const { ModalBuilder, ActionRowBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const interactionError = require('../../Events/WebhookError/interactionError');

module.exports = {
    id: 'ticketCreateSelect',
    async execute(interaction, client) {
        try {
            // L·∫•y gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn t·ª´ menu
            const selectedValue = interaction.values[0];

            // T·∫°o modal ƒë·ªÉ t·∫°o v√© m·ªõi
            const modal = new ModalBuilder()
                .setTitle(`T·∫°o v√© c·ªßa b·∫°n`)
                .setCustomId('ticketModal')
                .addComponents(
                    new ActionRowBuilder().addComponents(
                        new TextInputBuilder()
                            .setCustomId('whyTicket')
                            .setRequired(true)
                            .setPlaceholder('L√Ω do t·∫°o v√© n√†y l√† g√¨')
                            .setLabel('T·∫°i sao b·∫°n t·∫°o v√© n√†y? ( B·∫Øt bu·ªôc )')
                            .setStyle(TextInputStyle.Paragraph)
                    ),
                    new ActionRowBuilder().addComponents(
                        new TextInputBuilder()
                            .setCustomId('infoTicket')
                            .setRequired(false)
                            .setPlaceholder('N·∫øu kh√¥ng c√≥ th√¥ng tin n√†o c·∫ßn b·ªï sung, vui l√≤ng ƒë·ªÉ tr·ªëng ph·∫ßn n√†y!')
                            .setLabel('Cung c·∫•p cho t√¥i b·∫•t k·ª≥ tt b·ªï sung n√†o')
                            .setStyle(TextInputStyle.Paragraph)
                    )
                );

            // L∆∞u tr·ªØ gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn v√†o m·ªôt customId m·ªõi ƒë·ªÉ x·ª≠ l√Ω sau
            modal.setCustomId(`ticketModal-${selectedValue}`);
            await interaction.showModal(modal);

        } catch (error) {
            interactionError.execute(interaction, error, client); // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c x·ª≠ l√Ω l·ªói c·ªßa b·∫°n
        }
    },
};



// const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionsBitField, ChannelType, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
// const ticket = require('../../schemas/ticketSchema'); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c ƒë·∫øn schema ticket
// const pingStaff = require('../../schemas/pingstaffSchema');

// module.exports = {
//     id: 'ticketCreateSelect', // ƒê·∫∑t id gi·ªëng nh∆∞ id b·∫°n ƒë√£ s·ª≠ d·ª•ng trong menu l·ª±a ch·ªçn

//     async execute(interaction) {
//         const selectedValue = interaction.values[0]; // L·∫•y gi√° tr·ªã ƒë√£ ch·ªçn t·ª´ t∆∞∆°ng t√°c

//         try {
//             const user = interaction.user;
//             const data = await ticket.findOne({ Guild: interaction.guild.id });

//             if (!data) {
//                 return await interaction.reply({ content: `L·∫•y l√†m ti·∫øc! C√≥ v·∫ª nh∆∞ b·∫°n ƒë√£ t√¨m th·∫•y th√¥ng b√°o n√†y nh∆∞ng h·ªá th·ªëng v√© v·∫´n ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p ·ªü ƒë√¢y.`, ephemeral: true });
//             } else {
//                 const why = "L√Ω do m·∫´u"; // Ch·ªânh s·ª≠a l·∫°i logic ƒë·ªÉ l·∫•y l√Ω do
//                 const info = "Th√¥ng tin m·∫´u"; // Ch·ªânh s·ª≠a l·∫°i logic ƒë·ªÉ l·∫•y th√¥ng tin b·ªï sung
//                 const category = await interaction.guild.channels.cache.get(data.Category);

//                 // TƒÉng s·ªë v√© hi·ªán t·∫°i d·ª±a tr√™n lo·∫°i v√© ƒë√£ ch·ªçn
//                 data.currentTicketNumber += 1;
//                 if (selectedValue === 'discordTicket') {
//                     data.currentDiscordTicketNumber += 1;
//                 } else if (selectedValue === 'gameTicket') {
//                     data.currentGameTicketNumber += 1;
//                 }
//                 await data.save();

//                 const ticketNumber = selectedValue === 'discordTicket'
//                     ? data.currentDiscordTicketNumber.toString().padStart(5, '0')
//                     : data.currentGameTicketNumber.toString().padStart(5, '0');

//                 let channelName = `ticket-${ticketNumber}`;
//                 if (selectedValue === 'discordTicket') {
//                     channelName = `discord-${ticketNumber}`;
//                 } else if (selectedValue === 'gameTicket') {
//                     channelName = `game-${ticketNumber}`;
//                 }

//                 const pingStaffData = await pingStaff.findOne({ Guild: interaction.guild.id });
//                 if (!pingStaffData) return await interaction.reply({ content: `üö´ Kh√¥ng t√¨m th·∫•y th√¥ng tin vai tr√≤ trong h·ªá th·ªëng. Vui l√≤ng d√πng l·ªánh /ping-staff manage ƒë·ªÉ th√™m vai tr√≤ h·ªó tr·ª£ cho k√™nh`, ephemeral: true });

//                  // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c vai tr√≤ trong server
//                 const validRoles = pingStaffData.Roles.filter(role => interaction.guild.roles.cache.has(role.RoleID));
//                 if (validRoles.length === 0) {
//                     return await interaction.reply({ content: `Kh√¥ng c√≥ vai tr√≤ n√†o h·ª£p l·ªá ƒë·ªÉ th√™m v√†o k√™nh. H√£y ch·∫Øc ch·∫Øn r·∫±ng c√°c vai tr√≤ ƒë∆∞·ª£c thi·∫øt l·∫≠p kh√¥ng b·ªã x√≥a kh·ªèi m√°y ch·ªß.`, ephemeral: true });
//                 }

//                 const roleOverwrites = validRoles.map(role => ({
//                     id: role.RoleID,
//                     allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory]
//                 }));

//                 const channel = await interaction.guild.channels.create({
//                     name: channelName,
//                     type: ChannelType.GuildText,
//                     topic: `Ng∆∞·ªùi S·ª≠ d·ª•ng v√©: ${user.id}\nL√Ω do t·∫°o v√©: ${why}`,
//                     parent: category,
//                     permissionOverwrites: [
//                         {
//                             id: interaction.guild.id,
//                             deny: [PermissionsBitField.Flags.ViewChannel]
//                         },
//                         {
//                             id: interaction.user.id,
//                             allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory]
//                         },
//                         ...roleOverwrites
//                     ]
//                 });

//                 const embed = new EmbedBuilder()
//                     .setColor("Blurple")
//                     .setTitle(`V√© t·ª´ ${user.username} üé´`)
//                     .setDescription(`L√Ω do m·ªü ƒë·∫ßu: ${why}\n\nTh√¥ng tin b·ªï sung: ${info}`)
//                     .setTimestamp();

//                 const buttonRow = new ActionRowBuilder()
//                     .addComponents(
//                         new ButtonBuilder()
//                             .setCustomId('closeTicket')
//                             .setLabel(`üîê ƒê√≥ng v√©`)
//                             .setStyle(ButtonStyle.Danger),
//                         new ButtonBuilder()
//                             .setCustomId('ticketTranscript')
//                             .setLabel('üìú Nh·∫≠t k√Ω tr√≤ chuy·ªán')
//                             .setStyle(ButtonStyle.Primary)
//                     );

//                 await channel.send({ embeds: [embed], components: [buttonRow] });
//                 await interaction.reply({ content: `‚ú® V√© c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c m·ªü trong ${channel}`, ephemeral: true });
//             }
//         } catch (error) {
//             console.error('L·ªói khi x·ª≠ l√Ω l·ª±a ch·ªçn v√©:', error);
//             await interaction.reply({ content: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω v√©. Vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral: true });
//         }
//     }
// };



































// // const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionsBitField, ChannelType } = require('discord.js');
// // const ticket = require('../../schemas/ticketSchema'); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c ƒë·∫øn schema ticket
// // const pingStaff = require('../../schemas/pingstaffSchema');

// // module.exports = {
// //     id: 'ticketCreateSelect', // ƒê·∫∑t id gi·ªëng nh∆∞ id b·∫°n ƒë√£ s·ª≠ d·ª•ng trong menu l·ª±a ch·ªçn

// //     async execute(interaction) {
// //         const selectedValue = interaction.values[0]; // L·∫•y gi√° tr·ªã ƒë√£ ch·ªçn t·ª´ t∆∞∆°ng t√°c

// //         try {
// //             const user = interaction.user;
// //             const data = await ticket.findOne({ Guild: interaction.guild.id });

// //             if (!data) {
// //                 return await interaction.reply({ content: `L·∫•y l√†m ti·∫øc! C√≥ v·∫ª nh∆∞ b·∫°n ƒë√£ t√¨m th·∫•y th√¥ng b√°o n√†y nh∆∞ng h·ªá th·ªëng v√© v·∫´n ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p ·ªü ƒë√¢y.`, ephemeral: true });
// //             } else {
// //                 const why = "L√Ω do m·∫´u"; // Ch·ªânh s·ª≠a l·∫°i logic ƒë·ªÉ l·∫•y l√Ω do
// //                 const info = "Th√¥ng tin m·∫´u"; // Ch·ªânh s·ª≠a l·∫°i logic ƒë·ªÉ l·∫•y th√¥ng tin b·ªï sung
// //                 const category = await interaction.guild.channels.cache.get(data.Category);

// //                 // TƒÉng s·ªë v√© hi·ªán t·∫°i d·ª±a tr√™n lo·∫°i v√© ƒë√£ ch·ªçn
// //                 data.currentTicketNumber += 1;
// //                 if (selectedValue === 'discordTicket') {
// //                     data.currentDiscordTicketNumber += 1;
// //                 } else if (selectedValue === 'gameTicket') {
// //                     data.currentGameTicketNumber += 1;
// //                 }
// //                 await data.save();

// //                 const ticketNumber = selectedValue === 'discordTicket'
// //                     ? data.currentDiscordTicketNumber.toString().padStart(5, '0')
// //                     : data.currentGameTicketNumber.toString().padStart(5, '0');

// //                 let channelName = `ticket-${ticketNumber}`;
// //                 if (selectedValue === 'discordTicket') {
// //                     channelName = `discord-${ticketNumber}`;
// //                 } else if (selectedValue === 'gameTicket') {
// //                     channelName = `game-${ticketNumber}`;
// //                 }

// //                 const pingStaffData = await pingStaff.findOne({ Guild: interaction.guild.id });
// //                 if (!pingStaffData) return await interaction.reply({ content: `üö´ Kh√¥ng t√¨m th·∫•y th√¥ng tin vai tr√≤ trong h·ªá th·ªëng. Vui l√≤ng d√πng l·ªánh /ping-staff manage ƒë·ªÉ th√™m vai tr√≤ h·ªó tr·ª£ cho k√™nh`, ephemeral: true });

// //                  // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c vai tr√≤ trong server
// //                 // const validRoles = pingStaffData.Roles.filter(role => interaction.guild.roles.cache.has(role.RoleID));
// //                 const validRoles = pingStaffData.Roles.filter(role => interaction.guild.roles.cache.has(role.RoleID) && role.ChannelType === (selectedValue === 'discordTicket' ? 'discord-' : 'game-'));
// //                 if (validRoles.length === 0) {
// //                     return await interaction.reply({ content: `Kh√¥ng c√≥ vai tr√≤ n√†o h·ª£p l·ªá ƒë·ªÉ th√™m v√†o k√™nh. H√£y ch·∫Øc ch·∫Øn r·∫±ng c√°c vai tr√≤ ƒë∆∞·ª£c thi·∫øt l·∫≠p kh√¥ng b·ªã x√≥a kh·ªèi m√°y ch·ªß.`, ephemeral: true });
// //                 }

// //                 const roleOverwrites = validRoles.map(role => ({
// //                     id: role.RoleID,
// //                     allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory]
// //                 }));

// //                 const channel = await interaction.guild.channels.create({
// //                     name: channelName,
// //                     type: ChannelType.GuildText,
// //                     topic: `Ng∆∞·ªùi S·ª≠ d·ª•ng v√©: ${user.id}\nL√Ω do t·∫°o v√©: ${why}`,
// //                     parent: category,
// //                     permissionOverwrites: [
// //                         {
// //                             id: interaction.guild.id,
// //                             deny: [PermissionsBitField.Flags.ViewChannel]
// //                         },
// //                         {
// //                             id: interaction.user.id,
// //                             allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory]
// //                         },
// //                         ...roleOverwrites
// //                     ]
// //                 });

// //                 const embed = new EmbedBuilder()
// //                     .setColor("Blurple")
// //                     .setTitle(`V√© t·ª´ ${user.username} üé´`)
// //                     .setDescription(`L√Ω do m·ªü ƒë·∫ßu: ${why}\n\nTh√¥ng tin b·ªï sung: ${info}`)
// //                     .setTimestamp();

// //                 const buttonRow = new ActionRowBuilder()
// //                     .addComponents(
// //                         new ButtonBuilder()
// //                             .setCustomId('closeTicket')
// //                             .setLabel(`üîê ƒê√≥ng v√©`)
// //                             .setStyle(ButtonStyle.Danger),
// //                         new ButtonBuilder()
// //                             .setCustomId('ticketTranscript')
// //                             .setLabel('üìú Nh·∫≠t k√Ω tr√≤ chuy·ªán')
// //                             .setStyle(ButtonStyle.Primary)
// //                     );

// //                 await channel.send({ embeds: [embed], components: [buttonRow] });
// //                 await interaction.reply({ content: `‚ú® V√© c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c m·ªü trong ${channel}`, ephemeral: true });
// //             }
// //         } catch (error) {
// //             console.error('L·ªói khi x·ª≠ l√Ω l·ª±a ch·ªçn v√©:', error);
// //             await interaction.reply({ content: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω v√©. Vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral: true });
// //         }
// //     }
// // };



