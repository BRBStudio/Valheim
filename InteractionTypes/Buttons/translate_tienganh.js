/*
    Ch·ª©c nƒÉng: ƒê·ªãnh nghƒ©a m·ªôt n√∫t b·∫•m v√† h√†nh ƒë·ªông khi n√∫t n√†y ƒë∆∞·ª£c nh·∫•n.
    n√∫t t·∫°i ActionRowBuilder.js ( ƒë·ªãnh nghƒ©a n√∫t sau )
*/
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require(`discord.js`)
const translate = require('@iamtraction/google-translate');
const config = require(`../../config`)
const interactionError = require('../../Events/WebhookError/interactionError');
const translationCollector = new Map();
const translationEvents = {};

    // H√†m chuy·ªÉn ƒë·ªïi m√£ ng√¥n ng·ªØ th√†nh t√™n ng√¥n ng·ªØ
    function getLanguageName(isoCode) {
            const languages = {
            auto: "T·ª± ƒë·ªông",
            as: "Ti·∫øng Assam",
            af: "Ti·∫øng Afrikaans",
            sq: "Ti·∫øng Albania",
            am: "Ti·∫øng Amharic",
            ar: "Ti·∫øng ·∫¢ R·∫≠p",
            hy: "Ti·∫øng Armenia",
            az: "Ti·∫øng Azerbaijan",
            eu: "Ti·∫øng Basque",
            be: "Ti·∫øng Belarus",
            bn: "Ti·∫øng Bengali",
            bs: "Ti·∫øng Bosnia",
            bg: "Ti·∫øng Bungari",
            ca: "Ti·∫øng Catalan",
            ceb: "Cebuano",
            ny: "Chichewa",
            "zh-cn": "Ti·∫øng Trung gi·∫£n th·ªÉ",
            "zh-tw": "Truy·ªÅn th·ªëng Trung Hoa",
            co: "Ti·∫øng Corse",
            hr: "Ti·∫øng Croatia",
            cs: "Ti·∫øng S√©c",
            da: "Ti·∫øng ƒêan M·∫°ch",
            nl: "Ti·∫øng H√† Lan",
            en: "Ti·∫øng Anh",
            eo: "Qu·ªëc t·∫ø ng·ªØ",
            et: "Ti·∫øng Estonia",
            tl: "Ti·∫øng Philippin",
            fi: "Ti·∫øng Ph·∫ßn Lan",
            fr: "Ng∆∞·ªùi Ph√°p",
            fy: "Frisian(Ti·∫øng Frisia)",
            gl: "Galician(Ti·∫øng Galicia)",
            ka: "Georgian(Ti·∫øng Gruzia)",
            de: "German(Ti·∫øng ƒê·ª©c)",
            el: "Greek(Ti·∫øng Hy L·∫°p)", 
            ht: "Haitian Creole(Ti·∫øng Creole Haiti)",
            ha: "Hausa(Ti·∫øng Hausa)",
            haw: "Hawaiian(Ti·∫øng Hawaii)",
            iw: "Hebrew(Ti·∫øng Do Th√°i)",
            hi: "Hindi(Ti·∫øng Hindi)",
            hmn: "Hmong(Ti·∫øng ng∆∞·ªùi M√¥ng)",
            hu: "Hungarian(Ti·∫øng Hungary)",
            is: "Icelandic(Ti·∫øng Iceland)",
            ig: "Igbo(Ti·∫øng Igbo)",
            id: "Indonesian(Ti·∫øng Indonesia)",
            ga: "Irish(Ti·∫øng Ireland)",
            it: "Italian",
            ja: "Japanese",
            jw: "Javanese",
            kn: "Kannada",
            kk: "Kazakh",
            km: "Khmer",
            ko: "Korean(Ti·∫øng H√†n Qu·ªëc)",
            ku: "Kurdish (Kurmanji)",
            ky: "Kyrgyz",
            lo: "Lao",
            la: "Latin",
            lv: "Latvian",
            lt: "Lithuanian",
            lb: "Luxembourgish",
            mk: "Macedonian",
            mg: "Malagasy",
            ms: "Malay",
            ay: "Ti·∫øng Aymara",
            ml: "Malayalam",
            mt: "Maltese",
            mi: "Maori",
            mr: "Marathi",
            mn: "Mongolian",
            my: "Myanmar (Burmese)",
            ne: "Nepali",
            no: "Norwegian",
            ps: "Pashto",
            fa: "Persian",
            pl: "Polish",
            pt: "B·ªì ƒê√†o Nha",
            pa: "Punjabi",
            ro: "Romanian",
            ru: "Ti·∫øng Nga",
            sm: "Samoan",
            gd: "Scots Gaelic",
            sr: "Serbian",
            st: "Sesotho",
            sn: "Shona",
            sd: "Sindhi",
            si: "Sinhala",
            sk: "Slovak",
            sl: "Slovenian",
            so: "Somali",
            es: "Spanish",
            su: "Sundanese",
            sw: "Swahili",
            sv: "Swedish",
            tg: "Tajik",
            ta: "Tamil",
            te: "Telugu",
            th: "Thai(Ti·∫øng Th√°i Lan)",
            tr: "Turkish(Ti·∫øng Th·ªï Nhƒ© K·ª≥)",
            uk: "Ukrainian",
            ur: "Urdu",
            uz: "Uzbek",
            vi: "Vietnamese",
            cy: "Welsh",
            xh: "Xhosa",
            yi: "Yiddish",
            yo: "Yoruba",
            zu: "Ti·∫øng Zulu",
            };

            return languages[isoCode] || isoCode;
        }

        // Ch·ª©c nƒÉng ph√°t hi·ªán ng√¥n ng·ªØ: H√†m kh√¥ng ƒë·ªìng b·ªô detectLanguages·ª≠ d·ª•ng google-translateth∆∞ vi·ªán ƒë·ªÉ ph√°t hi·ªán ng√¥n ng·ªØ c·ªßa m·ªôt vƒÉn b·∫£n nh·∫•t ƒë·ªãnh.
        async function detectLanguage(text) {
            try {
                const result = await translate(text, { to: 'en' });
                return result.from.language.iso;
            } catch (error) {
                return null;
            }
        }

        module.exports = {
            id: 'translate_tienganh',
            async execute(interaction, client) {
                // L∆∞u tr·ªØ s·ª± ki·ªán d·ªãch cho ng∆∞·ªùi d√πng
                translationEvents[interaction.user.id] = { type: 'translate_tienganh', from: 'vi', to: 'en' };
                await interaction.deferReply({ ephemeral: true });
                setupTranslateMessageCollector(interaction, 'vi', 'en');
            },
            // Export hai bi·∫øn translationCollector v√† translationEvents
            translationCollector,
            translationEvents
        };
        
        // H√†m thi·∫øt l·∫≠p b·ªô thu th·∫≠p tin nh·∫Øn ƒë·ªÉ d·ªãch
        async function setupTranslateMessageCollector(interaction, fromLanguage, toLanguage, client) {
            try {
                const userTranslationEvent = translationEvents[interaction.user.id];
        
                if (!userTranslationEvent) {
                    throw new Error('Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán d·ªãch cho ng∆∞·ªùi d√πng.');
                }
        
                // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ b·ªô thu th·∫≠p cho ng∆∞·ªùi d√πng n√†y
                if (translationCollector.has(interaction.user.id)) {
                    return;
                }
        
                // T·∫°o b·ªô l·ªçc ƒë·ªÉ ch·ªâ thu th·∫≠p tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng ƒë√£ t∆∞∆°ng t√°c
                const filterCollect = (msg) => msg.author.id === interaction.user.id;  
        
                // T·∫°o b·ªô thu th·∫≠p tin nh·∫Øn
                const TranslationCollectorInstance = interaction.channel.createMessageCollector({ filter: filterCollect });
        
                let lastMessageTimestamp = 0;
        
                TranslationCollectorInstance.on('collect', async (msg) => {
                    try {
                        if (msg.createdTimestamp > lastMessageTimestamp) {
                            lastMessageTimestamp = msg.createdTimestamp;
        
                            const userTranslationEvent = translationEvents[interaction.user.id];
                            const messageLanguage = await detectLanguage(msg.content);
        
                            if (userTranslationEvent.type === 'translate_tienganh' && messageLanguage !== userTranslationEvent.to) {
                                const translation = await translate(msg.content, { to: userTranslationEvent.to });
                                const translatedMessage = translation.text;
        
                                const embed = new EmbedBuilder()
                                    .setColor(config.embedCyan)
                                    .setTitle("üåê D·ªãch tin nh·∫Øn")
                                    .setDescription(`***${msg.author.username} ƒê√É VI·∫æT***:\n\`\`\`diff\n-${msg.content}\`\`\`\n\nD·ªãch ${getLanguageName(messageLanguage)} -> ${getLanguageName(userTranslationEvent.to)}:\n\`\`\`diff\n+${translatedMessage}\`\`\``)
                                    .setTimestamp()
                                    .setFooter({ text: `Ch√∫c b·∫°n 1 ng√†y t·ªët l√†nh t·∫°i ***${interaction.guild.name}***` });
        
                                await interaction.followUp({
                                    embeds: [embed],
                                    ephemeral: true,
                                });
                            }
                        }
                    } catch (error) {
                        interactionError.execute(interaction, error, client);
                    }
                });
        
                TranslationCollectorInstance.on('end', () => {
                    translationCollector.delete(interaction.user.id);
                    delete translationEvents[interaction.user.id];
                });
        
                // L∆∞u tr·ªØ b·ªô thu th·∫≠p v√†o Map
                translationCollector.set(interaction.user.id, TranslationCollectorInstance);
            } catch (error) {
                interactionError.execute(interaction, error, client);
            }
        }