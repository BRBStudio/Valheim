const { ApplicationCommandType, PermissionsBitField, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const config = require(`../../config`)
const levelSchema = require(`../../schemas/messagelevelSchema`);

module.exports = {
    data: {
        name: 'XP C·ª¶A NG∆Ø·ªúI D√ôNG',
        type: ApplicationCommandType.User,
    },
    async execute(interaction, client) {
        if (!interaction.isUserContextMenuCommand()) return;

        if (interaction.commandName === 'XP C·ª¶A NG∆Ø·ªúI D√ôNG') {

                const user = interaction.targetUser;
                const { guild, client } = interaction;

                const embed = new EmbedBuilder()
                    .setColor(config.embedBlue)
                    .setImage(`https://i.imgur.com/W3KNxrO.gif`)
                    .setDescription(`üéè ${user.displayName} ch∆∞a c√≥ ƒëi·ªÉm XP n√†o...`);

                // ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·∫•t k·ª≥ d·ªØ li·ªáu c·∫•p ƒë·ªô ho·∫∑c XP n√†o kh√¥ng
                levelSchema.findOne({ Guild: guild.id, User: user.id }).then((userData) => {
                    if (!userData) {
                        return interaction.reply({ embeds: [embed] });
                    }

                const embed1 = new EmbedBuilder()
                                    .setColor(config.embedBlue)
                                    .setTitle(`üéè Th√¥ng tin XP c·ªßa ${user.displayName}:`)
                                    .setDescription(`\`\`\`${user.displayName} CH∆ØA C√ì TR√äN B·∫¢NG X·∫æP H·∫†NG...\n\nXP: ${userData.XP}\nLevel: ${userData.Level}\`\`\``)
                                    .setTimestamp()
                                    .setImage(`https://i.imgur.com/W3KNxrO.gif`)
                                    .setFooter({ text: 'Th√¥ng tin XP c·ªßa ng∆∞·ªùi d√πng' });

                // N·∫øu ng∆∞·ªùi d√πng c√≥ d·ªØ li·ªáu, th√¨ ki·ªÉm tra xem h·ªç c√≥ n·∫±m trong top 10 kh√¥ng
                levelSchema.find({ Guild: guild.id })
                    .sort({
                        XP: -1,
                        Level: -1,
                    })
                    .limit(10)
                    .then((Data) => {
                        if (!Data || Data.length === 0) {
                            return interaction.reply({ embeds: [embed] });
                        }

                        const topUserData = Data.find((data) => data.User === user.id);

                        if (!topUserData) {
                            return interaction.reply({ embeds: [embed1] });
                        }

                        // N·∫øu userData t·ªìn t·∫°i v√† n·∫±m trong top 10, ti·∫øp t·ª•c logic h∆°n
                        interaction.deferReply().then(() => {
                            client.users.fetch(user.id).then((value) => {
                                const member = value.displayName; // S·ª≠ d·ª•ng bi·ªát danh c·ªßa ng∆∞·ªùi d√πng

                                const text = `${member} | XP: ${userData.XP} | Level: ${userData.Level}\n`;

                                const embed2 = new EmbedBuilder()
                                    .setColor(config.embedBlue)
                                    .setTitle(`Th√¥ng tin XP c·ªßa ${member}:`)
                                    .setDescription(`\`\`\`${text}\`\`\``)
                                    .setTimestamp()
                                    .setImage(`https://i.imgur.com/W3KNxrO.gif`)
                                    .setFooter({ text: 'Th√¥ng tin XP c·ªßa ng∆∞·ªùi d√πng tr√™n b·∫£ng x·∫øp h·∫°ng' });

                                interaction.editReply({ embeds: [embed2] });
                            }).catch((err) => {
                                console.error(err);
                                interaction.editReply({ content: 'ƒê√£ x·∫£y ra l·ªói khi t√¨m ng∆∞·ªùi d√πng.' });
                            });
                        }).catch((err) => {
                            console.error(err);
                            interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi ho√£n tr·∫£ l·ªùi.' });
                        });
                    })
                    .catch((err) => {
                        console.error(err);
                        interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi t√¨m d·ªØ li·ªáu.' });
                    });
            }).catch((err) => {
                console.error(err);
                interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi t√¨m d·ªØ li·ªáu ng∆∞·ªùi d√πng.' });
            });
        }
    },
};




