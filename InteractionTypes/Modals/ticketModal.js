const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, PermissionsBitField, ChannelType, ButtonStyle } = require('discord.js');
const ticket = require('../../schemas/ticketSchema');
const pingStaff = require(`../../schemas/pingstaffSchema`);

module.exports = {
    id: 'ticketModal',
    async execute(interaction) {
        if (interaction.customId && interaction.customId.startsWith('ticketModal')) {
            const selectedValue = interaction.customId.split('-')[1];
            const user = interaction.user;
            const data = await ticket.findOne({ Guild: interaction.guild.id });

            if (!data) {
                return await interaction.reply({ content: `L·∫•y l√†m ti·∫øc! C√≥ v·∫ª nh∆∞ b·∫°n ƒë√£ t√¨m th·∫•y th√¥ng b√°o n√†y nh∆∞ng h·ªá th·ªëng v√© v·∫´n ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p ·ªü ƒë√¢y.`, ephemeral: true });
            } else {
                const why = interaction.fields.getTextInputValue('whyTicket');
                const info = interaction.fields.getTextInputValue('infoTicket');
                // // Log gi√° tr·ªã ƒë·ªÉ ki·ªÉm tra
                // console.log('Gi√° tr·ªã whyTicket:', why);
                // console.log('Gi√° tr·ªã infoTicket:', info);
                const category = await interaction.guild.channels.cache.get(data.Category);

                // TƒÉng s·ªë v√© hi·ªán t·∫°i
                data.currentTicketNumber += 1;
                if (selectedValue === 'discordTicket') {
                    data.currentDiscordTicketNumber += 1;
                } else if (selectedValue === 'gameTicket') {
                    data.currentGameTicketNumber += 1;
                }
                await data.save();

                const ticketNumber = selectedValue === 'discordTicket'
                    ? data.currentDiscordTicketNumber.toString().padStart(5, '0')
                    : data.currentGameTicketNumber.toString().padStart(5, '0');

                // ƒê·∫∑t t√™n k√™nh m·ªõi d·ª±a tr√™n gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn
                let channelName = `ticket-${ticketNumber}`;
                if (selectedValue === 'discordTicket') {
                    channelName = `discord-${ticketNumber}`;
                } else if (selectedValue === 'gameTicket') {
                    channelName = `game-${ticketNumber}`;
                }

                // L·∫•y th√¥ng tin vai tr√≤ t·ª´ schema
                const pingStaffData = await pingStaff.findOne({ Guild: interaction.guild.id });
                if (!pingStaffData) {
                    return await interaction.reply({ content: `üö´ Kh√¥ng t√¨m th·∫•y th√¥ng tin vai tr√≤ trong h·ªá th·ªëng. H√£y d√πng l·ªánh ***ping-staff manage*** ƒë·ªÉ setup 2 vai tr√≤ cho v√© discord v√† v√© valheim.`, ephemeral: true });
                }

                // // L·∫•y c√°c quy·ªÅn t·ª´ pingStaffData
                // const roleOverwrites = pingStaffData.Roles.map(role => ({
                //     id: role.RoleID,
                //     allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory]
                // }));

                // // L∆∞u th√¥ng tin vai tr√≤ v√†o c∆° s·ªü d·ªØ li·ªáu
                // const roles = pingStaffData.Roles.map(role => ({
                //     id: role.RoleID,
                //     name: role.RoleName // Gi·∫£ s·ª≠ b·∫°n c√≥ t√™n vai tr√≤ trong pingStaffData
                // }));

                // L·∫•y c√°c quy·ªÅn t·ª´ pingStaffData d·ª±a tr√™n lo·∫°i v√©
                const roleOverwrites = pingStaffData.Roles
                    .filter(role => (selectedValue === 'discordTicket' && role.ChannelType === 'discord-') || 
                                     (selectedValue === 'gameTicket' && role.ChannelType === 'game-'))
                    .map(role => ({
                        id: role.RoleID,
                        allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory]
                    }));

                // L∆∞u th√¥ng tin vai tr√≤ v√†o c∆° s·ªü d·ªØ li·ªáu
                const roles = pingStaffData.Roles
                    .filter(role => (selectedValue === 'discordTicket' && role.ChannelType === 'discord-') || 
                                     (selectedValue === 'gameTicket' && role.ChannelType === 'game-'))
                    .map(role => ({
                        id: role.RoleID,
                        name: role.RoleName
                    }));

                if (selectedValue === 'discordTicket') {
                    data.roles.discord = roles;
                } else if (selectedValue === 'gameTicket') {
                    data.roles.game = roles;
                }
                await data.save();

                // T·∫°o k√™nh m·ªõi cho v√©
                const channel = await interaction.guild.channels.create({
                    name: channelName,
                    type: ChannelType.GuildText,
                    topic: `Ng∆∞·ªùi S·ª≠ d·ª•ng v√©: ${user.id}\nL√Ω do t·∫°o v√©: ${why}`,
                    parent: category,
                    permissionOverwrites: [
                        {
                            id: interaction.guild.id,
                            deny: [PermissionsBitField.Flags.ViewChannel]
                        },
                        {
                            id: interaction.user.id,
                            allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory]
                        },
                        ...roleOverwrites // Th√™m quy·ªÅn t·ª´ vai tr√≤
                    ]
                });

                const embed = new EmbedBuilder()
                    .setColor("Blurple")
                    .setTitle(`V√© t·ª´ ${user.displayName} üé´`)
                    .setDescription(`L√Ω do m·ªü ƒë·∫ßu: ${why}\n\nTh√¥ng tin b·ªï sung: ${info}\n\n‚ö†Ô∏è | h√£y d√πng l·ªánh /ping-staff list ƒë·ªÉ xem vai tr√≤ h·ªó tr·ª£ n√†o ph√π h·ª£p v·ªõi b·∫°n `)
                    .setTimestamp();

                const button = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('closeTicket')
                            .setLabel(`üîê ƒê√≥ng v√©`)
                            .setStyle(ButtonStyle.Danger),
                        new ButtonBuilder()
                            .setCustomId('ticketTranscript')
                            .setLabel('üìú Nh·∫≠t k√Ω tr√≤ chuy·ªán')
                            .setStyle(ButtonStyle.Primary)
                    );

                await channel.send({ embeds: [embed], components: [button] });
                await interaction.reply({ content: `‚ú® V√© c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c m·ªü trong ${channel}`, ephemeral: true });
            }
        }
    }
};
