// Import c√°c class v√† module c·∫ßn thi·∫øt t·ª´ th∆∞ vi·ªán discord.js
const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require("discord.js");
const Mailbox = require('../../schemas/mailboxSchema'); 

    // ƒê·ªãnh nghƒ©a c√°c t√πy ch·ªçn cho m·ªói lo·∫°i ph·∫£n h·ªìi
    const options = {
        bug: {
            name: "B√°o c√°o l·ªói",
            replyMessage: "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i b√°o c√°o l·ªói! Ch√∫ng t√¥i s·∫Ω xem x√©t v√† x·ª≠ l√Ω ngay.",
            previewMessage: `D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho B√°o c√°o l·ªói:`
        },
        suggestion: {
            name: "B√°o c√°o ƒë·ªÅ xu·∫•t",
            replyMessage: "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒë·ªÅ xu·∫•t! Ch√∫ng t√¥i s·∫Ω xem x√©t v√† x·ª≠ l√Ω nhanh ch√≥ng.",
            previewMessage: `D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho B√°o c√°o l·ªói:`
        },
        review: {
            name: "ƒê√°nh gi√° ph·∫£n h·ªìi",
            replyMessage: "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒë√°nh gi√°! Ch√∫ng t√¥i t√¥n tr·ªçng quy·∫øt ƒë·ªãnh c·ªßa b·∫°n.",
            previewMessage: `D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho B√°o c√°o l·ªói:`
        },
        other: {
            name: "B√°o c√°o kh√°c",
            replyMessage: "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i b√°o c√°o! Ch√∫ng t√¥i s·∫Ω c√¢n nh·∫Øc v·ªÅ ƒëi·ªÅu ƒë√≥.",
            previewMessage: `D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho B√°o c√°o l·ªói:`
        },
    };

// Xu·∫•t module ƒë·ªÉ s·ª≠ d·ª•ng trong ·ª©ng d·ª•ng Discord
module.exports = {
    // ƒê·ªãnh nghƒ©a th√¥ng tin c·ªßa Slash Command
    data: new SlashCommandBuilder()
        .setName("mailbox")
        .setDescription("üì¨ | Ph·∫£n h·ªìi v·ªÅ bot cho DEV")
        .addStringOption(option => option.setName(`option`).setDescription(`Ch·ªçn danh m·ª•c ph·∫£n h·ªìi`).setRequired(true).addChoices(
            { name: options.bug.name, value: "bug" },
            { name: options.suggestion.name, value: "suggestion" },
            { name: options.review.name, value: "review" },
            { name: options.other.name, value: "other" },
        ))
        .addStringOption(option => option.setName(`feedback`).setDescription(`Th√¥ng tin ph·∫£n h·ªìi c·ªßa b·∫°n`).setRequired(true)),

    // H√†m x·ª≠ l√Ω khi Slash Command ƒë∆∞·ª£c th·ª±c thi
    async execute(interaction, client, member) {

    // Ki·ªÉm tra xem Slash Command ƒë∆∞·ª£c g·ªçi t·ª´ m√°y ch·ªß c√≥ ID l√† '1028540923249958912' hay kh√¥ng
        // if (interaction.guildId !== '1028540923249958912') {
        //     return interaction.reply({ content: "L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong m√°y ch·ªß c·ªßa BRB Studio.", ephemeral: true });
        // }

    // L·∫•y th√¥ng tin c·ªßa ng∆∞·ªùi g·ª≠i Slash Command v√† c√°c t√πy ch·ªçn t·ª´ ng∆∞·ªùi d√πng
        const user = interaction.user;
        const option = interaction.options.get(`option`).value;
        const feedback = interaction.options.get(`feedback`).value;

    // T·∫°o embed d·ª±a tr√™n lo·∫°i ph·∫£n h·ªìi v√† th√™m timestamp
        const feedbackEmbed = new EmbedBuilder()
            .setTitle(options[option].name)
            .setDescription(`\`\`\`${feedback}\`\`\``)
            .setColor('Random')
            .setImage(`https://i.gifer.com/origin/bc/bc77626a04355c8c12cf05a09f87c61a_w200.gif`)
            .addFields({ name: `CH√ö √ù:`, value: `Ph·∫£n h·ªìi c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ªõi DEV.\n\n***N·∫øu b·∫°n ƒëang ·ªü m√°y ch·ªß kh√°c v√† c·∫ßn gi√∫p ƒë·ª°?***\nH√£y th√™m t√™n discord c·ªßa b·∫°n k√®m l·ªùi m·ªùi (m·ªùi v√†o m√°y ch·ªß c·ªßa b·∫°n) v√†o ph·∫£n h·ªìi, t·ªët nh·∫•t l√† l·ªùi m·ªùi vƒ©nh vi·ªÖn v√¨ t√¥i c√≤n ph·∫£i gi√∫p ƒë·ª° nhi·ªÅu ng∆∞·ªùi kh√°c n·ªØa,n·∫øu l√† l·ªùi m·ªùi ng·∫Øn h·∫°n c√≥ th·ªÉ t√¥i s·∫Ω b·ªè l·ª° ƒëi·ªÅu g√¨ ƒë√≥ t·ª´ b·∫°n.`, inline: true })
            .setTimestamp(); // Th√™m timestamp v√†o ƒë√¢y;

     // T·∫°o n√∫t "Send"
        const sendButton = new ButtonBuilder()
            .setCustomId('sendButton')
            .setLabel('OK')
            .setEmoji(`<:zzahhdinook:1249470387016695808>`)
            .setStyle(ButtonStyle.Success);

    // T·∫°o n√∫t "Cancel"
        const cancelButton = new ButtonBuilder()
            .setCustomId('cancelButton')
            .setLabel('Cancel')
            .setEmoji(`<:2629notick:1249471458565165156>`)
            .setStyle(ButtonStyle.Danger);
   

    // Hi·ªÉn th·ªã xem tr∆∞·ªõc v√† n√∫t cho ng∆∞·ªùi t∆∞∆°ng t√°c
        const row = new ActionRowBuilder()
            .addComponents(sendButton, cancelButton);

    // G·ª≠i tin nh·∫Øn xem tr∆∞·ªõc v√† l·∫•y tin nh·∫Øn ƒë√≥ ƒë·ªÉ th·ª±c hi·ªán x√≥a sau n√†y
        const previewMessage = await interaction.reply({ content: options[option].previewMessage, embeds: [feedbackEmbed], components: [row], ephemeral: true });

    // T·∫°o l·∫Øng nghe s·ª± ki·ªán cho n√∫t
        const filter = i => i.customId === 'sendButton' || i.customId === 'cancelButton';
        const collector = interaction.channel.createMessageComponentCollector({ filter, time: 120000 });

    // Bi·∫øn ki·ªÉm so√°t tr·∫°ng th√°i c·ªßa n√∫t
        let sendButtonClicked = false;
        let cancelButtonClicked = false;

    // X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng ·∫•n n√∫t
        collector.on('collect', async i => {
            if (i.customId === 'sendButton' && !sendButtonClicked) {
                sendButtonClicked = true;

                // T·∫°o li√™n k·∫øt m·ªùi v√†o m√°y ch·ªß c·ªßa ng∆∞·ªùi g·ª≠i ph·∫£n h·ªìi
                const userGuild = interaction.guild;
                let inviteLink;
                try {
                    const invite = await userGuild.invites.create(interaction.channel.id, { maxAge: 0, maxUses: 1 });
                    inviteLink = invite.url;
                } catch (error) {
                    console.error(`Kh√¥ng th·ªÉ t·∫°o li√™n k·∫øt m·ªùi: ${error.message}`);
                    inviteLink = "Kh√¥ng th·ªÉ t·∫°o li√™n k·∫øt m·ªùi";
                }

                const feedbackEmbedADM = new EmbedBuilder()
                        .setTitle(options[option].name)
                        .setDescription(`\`\`\`${feedback}\`\`\``)
                        .setColor('Green')
                        .setImage(`https://i.gifer.com/origin/bc/bc77626a04355c8c12cf05a09f87c61a_w200.gif`)
                        .addFields({ name: `Ng∆∞·ªùi d√πng ƒë√£ g·ª≠i y√™u c·∫ßu:`, value: `${i.user.displayName}`, inline: false })
                        .addFields({ name: `ƒê∆∞·ª£c g·ª≠i t·ª´ m√°y ch·ªß:`, value: `${i.guild.name}`, inline: false })
                        .setTimestamp(); // Th√™m timestamp v√†o ƒë√¢y;

                // T·∫°o n√∫t v√†o m√°y ch·ªß c·ªßa ng∆∞·ªùi g·ª≠i ph·∫£n h·ªìi
                const row = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setLabel('V√†o m√°y ch·ªß ƒë·ªÉ h·ªó tr·ª£')
                                .setStyle(ButtonStyle.Link)
                                .setURL(inviteLink)
                        );

                // G·ª≠i ph·∫£n h·ªìi v√† tin nh·∫Øn c·∫£m ∆°n
                interaction.followUp({ content: options[option].replyMessage, ephemeral: true });

                // G·ª≠i embed v√†o k√™nh feedback
                const guild = client.guilds.cache.get("1028540923249958912"); // ID m√°y ch·ªß brb studio
                const channel = guild.channels.cache.get('1148874551514632192'); // ID k√™nh l∆∞u tr·ªØ feedback trong m√°y ch·ªß brb studio
                channel.send({ embeds: [feedbackEmbedADM], components: [row] });

                // Ki·ªÉm tra n·∫øu tin nh·∫Øn xem tr∆∞·ªõc t·ªìn t·∫°i tr∆∞·ªõc khi c·ªë g·∫Øng x√≥a
                await previewMessage.delete().catch(error => {
                    console.error(`Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn xem tr∆∞·ªõc1: ${error.message}`);
                });
            } else if (i.customId === 'cancelButton' && !cancelButtonClicked) {
                cancelButtonClicked = true;

                // Hu·ª∑ tin nh·∫Øn xem tr∆∞·ªõc
                interaction.followUp({ content: `B·∫°n ƒë√£ hu·ª∑ vi·ªác g·ª≠i ph·∫£n h·ªìi.`, ephemeral: true });

                // Ki·ªÉm tra n·∫øu tin nh·∫Øn xem tr∆∞·ªõc t·ªìn t·∫°i tr∆∞·ªõc khi c·ªë g·∫Øng x√≥a
                await previewMessage.delete().catch(error => {
                    console.error(`Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn xem tr∆∞·ªõc2: ${error.message}`);
                });
            }
        });

        // X·ª≠ l√Ω s·ª± ki·ªán khi th·ªùi gian ch·ªù k·∫øt th√∫c
        collector.on('end', collected => {
            if (collected.size === 0) {
                // N·∫øu kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c thu th·∫≠p, th√¥ng b√°o v·ªÅ vi·ªác h·∫øt th·ªùi gian
                interaction.followUp({ content: `B·∫°n ƒë√£ kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n√†o tong 2 ph√∫t, v√¨ v·∫≠y s·∫Ω kh√¥ng t∆∞∆°ng t√°c ƒë∆∞·ª£c v·ªõi n√∫t n·ªØa.`, ephemeral: true });
            }
        });
    }
};