const { SlashCommandBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, EmbedBuilder } = require("discord.js");
const Blacklist = require('../../schemas/blacklistSchema');
const config = require(`../../config`)
const { createEmojiEmbed } = require(`../../Embeds/embedsCreate`)

module.exports = {
    data: new SlashCommandBuilder()
        .setName("emoji")
        .setDMPermission(false)
        .setDescription("Danh s√°ch ID emoji"),

    async execute(interaction) {
        
            const userId = interaction.user.id;
            const guildEmojis = await interaction.guild.emojis.fetch();
            const blacklistedUser = await Blacklist.findOne({ userId });

            const embedbl = await createEmojiEmbed(interaction);

            if (blacklistedUser) {
                return await interaction.reply({ embeds: [embedbl], ephemeral: false });
            }

            const animatedEmojis = guildEmojis.filter(emoji => emoji.animated).map(emoji => ({
                name: `${emoji} ‚Ä¢ \`\`\`${emoji.name}\`\`\``,
                value: `<a:${emoji.name}:${emoji.id}>`,
                inline: false
            }));

            const staticEmojis = guildEmojis.filter(emoji => !emoji.animated).map(emoji => ({
                name: `${emoji} ‚Ä¢ \`\`\`${emoji.name}\`\`\``,
                value: `<:${emoji.name}:${emoji.id}>`,
                inline: false
            }));

            const emojiList = [...animatedEmojis, ...staticEmojis];

            const button1 = new ButtonBuilder()
                .setLabel("https://emoji.gg/")
                .setStyle(ButtonStyle.Link)
                .setURL("https://emoji.gg/")
                .setEmoji("<:hanyaCheer:1173363092353200158>");

            const button2 = new ButtonBuilder()
                .setLabel("https://emojidb.org/")
                .setStyle(ButtonStyle.Link)
                .setURL("https://emojidb.org/")
                .setEmoji("<:ech7:1234014842004705360>");

            const actionRow = new ActionRowBuilder()
                .addComponents(button1, button2);

            if (guildEmojis.size === 0) {
                return await interaction.reply({
                    content: `\`\`\`yml\nM√°y ch·ªß c·ªßa b·∫°n kh√¥ng c√≥ emoji ƒë·ªÉ l·∫•y ID. H√£y th√™m emoji v√†o m√°y ch·ªß r·ªìi d√πng l·∫°i l·ªánh\n\n¬ª N·∫øu b·∫°n c√≥ nitro, h√£y ki·ªÉm tra c√†i ƒë·∫∑t ng∆∞·ªùi d√πng > Nitro ƒë·ªÉ bi·∫øt chi ti·∫øt\n\n¬ª N·∫øu b·∫°n kh√¥ng c√≥ nitro, v·∫≠y h√£y th√™m ch√∫ng b·∫±ng th·ªß c√¥ng:\n-----------------------------------------------------------------------------------------------\n    ‚öôÔ∏è C√†i ƒë·∫∑t m√°y ch·ªß\n\n    üëâ Sau ƒë√≥ v√†o m·ª•c emoji r·ªìi nh·∫•p v√†o t·∫£i l√™n emoji\n-----------------------------------------------------------------------------------------------\nüëá D∆∞·ªõi ƒë√¢y l√† 1 s·ªë trang h·ªó tr·ª£ l·∫•y emoji. nh·∫•p v√†o ch√∫ng\`\`\``,
                    components: [actionRow]
                });
            }

            await interaction.deferReply({ ephemeral: true });

            const totalPages = Math.ceil(emojiList.length / 25);

            function chunkArray(myArray, chunk_size) {
                let index = 0;
                let arrayLength = myArray.length;
                let tempArray = [];

                for (index = 0; index < arrayLength; index += chunk_size) {
                    let myChunk = myArray.slice(index, index + chunk_size);
                    tempArray.push(myChunk);
                }

                return tempArray;
            }

            const emojiChunks = chunkArray(emojiList, 25);

            let currentPage = 0;

            const embeds = emojiChunks.map((chunk, index) => {
                const embed = new EmbedBuilder()
                    .setTitle(`Danh s√°ch ID emoji - Trang ${index + 1}`)
                    .setColor(config.embedBlue)
                    .setImage(`https://i.pinimg.com/originals/d6/31/2a/d6312a4610c17a6a0fa43c882502305a.gif`)
                    .setFooter({ text: `Trang ${index + 1} / ${totalPages}` });

                chunk.forEach(emoji => {
                    embed.addFields({ name: emoji.name, value: `\`\`\`yml\n${emoji.value}\`\`\``, inline: false }); // hi·ªÉn th·ªã trong tr∆∞·ªùng khi d√πng l·ªánh /emoji
                });

                return embed;
            });

            function createActionRow() {
                const previousButton = new ButtonBuilder()
                    .setCustomId("a_page")
                    .setLabel("Trang tr∆∞·ªõc")
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(currentPage === 0);

                const nextButton = new ButtonBuilder()
                    .setCustomId("b_page")
                    .setLabel("Trang ti·∫øp theo")
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(currentPage === totalPages - 1);

                return new ActionRowBuilder().addComponents(previousButton, nextButton);
            }

            async function sendCurrentPage() {
                    await interaction.editReply({
                        embeds: [embeds[currentPage]],
                        components: [createActionRow()],
                    });
            }

            await sendCurrentPage();

            const collector = interaction.channel.createMessageComponentCollector();

            collector.on('collect', async (i) => {
                // try {
                    if (i.customId === 'a_page' && currentPage > 0) {
                        currentPage--;
                    } else if (i.customId === 'b_page' && currentPage < totalPages - 1) {
                        currentPage++;
                    }

                    await i.update({ embeds: [embeds[currentPage]], components: [createActionRow()], ephemeral: true });
                // } catch (error) {
                //     if (error.code && error.code === 10062) {
                //         // Ignore "Unknown interaction" error
                //         return;
                //     }
            
                //     console.error("Error collecting interaction:", error);
                // }
            });

            collector.on('end', () => {
                // try {
                    interaction.editReply({ components: [] });
                // } catch (error) {
                //     if (error.code !== 10008) {
                //         console.error("Error ending collector:", error);
                //     }
                // }
            });
    }
};
