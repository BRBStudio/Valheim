const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const tinycolor = require("tinycolor2"); // Th√™m d√≤ng n√†y ƒë·ªÉ import module color-name

module.exports = {
	data: new SlashCommandBuilder()
		.setName('meeting-virtual')
		.setDescription('üìÖ | T·∫°o th√¥ng b√°o v√† nh·∫Øc nh·ªü cho cu·ªôc h·ªçp')
		.addStringOption(option =>
			option.setName('date')
			.setDescription('Ng√†y h·ªçp (ƒë·ªãnh d·∫°ng DD/MM/YYYY)')
			.setRequired(true))
		.addStringOption(option =>
			option.setName('hour')
			.setDescription('Th·ªùi gian b·∫Øt ƒë·∫ßu cu·ªôc h·ªçp (ƒë·ªãnh d·∫°ng HH:MM)')
			.setRequired(true))
		.addStringOption(option =>
			option.setName('duration')
			.setDescription('∆Ø·ªõc t√≠nh th·ªùi gian h·ªçp trong bao l√¢u (t√≠nh b·∫±ng ph√∫t). VD: 120')
			.setRequired(true))
		.addStringOption(option =>
			option.setName('objet')
			.setDescription('M·ª•c ƒë√≠ch c·ªßa cu·ªôc h·ªçp l√† g√¨?')
			.setRequired(true))
		.addChannelOption(option =>
			option.setName('channel')
			.setDescription('K√™nh di·ªÖn ra cu·ªôc h·ªçp')
			.setRequired(true))
		.addChannelOption(option =>
			option.setName('channel1')
			.setDescription('K√™nh g·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü cho cu·ªôc h·ªçp')
			.setRequired(true))
		.addRoleOption(option =>
			option.setName('role')
			.setDescription('Vai tr√≤ ƒë∆∞·ª£c th√¥ng b√°o cho cu·ªôc h·ªçp')
			.setRequired(true))
		.addStringOption((option) =>
			option.setName("color")
			.setDescription("Ch·ªçn m√†u vi·ªÅn cho tin nh·∫Øn.")
			.setRequired(true)
			.addChoices(
				{ name: "M·∫ßu ƒë·ªè", value: "Red" },
				{ name: "M·∫ßu xanh d∆∞∆°ng", value: "Blue" },
				{ name: "M·∫ßu xanh l√° c√¢y", value: "Green" },
				{ name: "M·∫ßu t√≠m", value: "Purple" },
				{ name: "M·∫ßu cam", value: "Orange" },
				{ name: "M·∫ßu v√†ng", value: "Yellow" },
				{ name: "M·∫ßu ƒëen", value: "Black" },
				{ name: "M·∫ßu xanh l∆° (r·∫•t ƒë·∫πp)", value: "Cyan" },
				{ name: "M·∫ßu h·ªìng", value: "Pink" },
				{ name: "M·∫ßu hoa o·∫£i h∆∞∆°ng", value: "Lavender" },
				{ name: "M·∫ßu s·∫´m (M·∫ßu ƒë·ªè s·∫´m, h∆°i t√≠m)", value: "Maroon" },
				{ name: "M·∫ßu √¥ liu", value: "Olive" },
				{ name: "M·∫ßu xanh lam (xanh n∆∞·ªõc bi·ªÉn)", value: "Teal" },
				{ name: "M·∫ßu b·∫°c", value: "Silver" },
				{ name: "M·∫ßu v√†ng ƒë·ªìng", value: "Gold" },
				{ name: "M·∫ßu be", value: "Beige" },
				{ name: "M·∫ßu h·∫£i qu√¢n (xanh d∆∞∆°ng ƒë·∫≠m)", value: "Navy" },
				{ name: "M·∫ßu t√≠m ƒë·∫≠m", value: "Indigo" },
				{ name: "M·∫ßu h·ªìng t√≠m", value: "Violet" },
			)
		)
		.addAttachmentOption((option) =>
			option.setName("thumbnail")
			.setDescription("H√¨nh thu nh·ªè s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã khi nh√∫ng.")
			.setRequired(false)
		  ),
	async execute(interaction) {
		const date = interaction.options.getString('date');
		const hour = interaction.options.getString('hour');
		const duration = interaction.options.getString('duration');
		const objet = interaction.options.getString('objet');
		const channel = interaction.options.getChannel('channel');
		const channel1 = interaction.options.getChannel('channel1');
		const role = interaction.options.getRole('role');
		const thumbnailUrl = interaction.options.getAttachment('thumbnail');
		// const colorCode = interaction.options.getString('color');

		// Ki·ªÉm tra v√† x·ª≠ l√Ω thumbnailAttachment
        const thumbnailAttachmentURL = thumbnailUrl ? thumbnailUrl.url : null;

		// Chuy·ªÉn ƒë·ªïi t√™n m√†u th√†nh m√£ HEX
        const colorObject = tinycolor(interaction.options.getString("color"));

        if (!colorObject.isValid()) {                                                 //////////////////// if (!colorCode)
          return await interaction.reply({ content: "M√†u b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá.", ephemeral: true,});
        }
            // Chuy·ªÉn ƒë·ªïi t√™n m√†u th√†nh m√£ HEX
        const colorCode = colorObject.toHexString();

		const embed = new EmbedBuilder()
			.setTitle('Cu·ªôc h·ªçp online')
			.setDescription(`M·ª•c ƒë√≠ch Cu·ªôc H·ªçp: **${objet}**`)
			.addFields(
			{
				name: 'Ng√†y b·∫Øt ƒë·∫ßu cu·ªôc h·ªçp',
				value: date,
				inline: true
			},

			{
				name: 'Th·ªùi gian b·∫Øt ƒë·∫ßu cu·ªôc h·ªçp',
				value: hour,
				inline: true
			},

			{
				name: 'Th·ªùi gian d·ª± ki·∫øn c·ªßa cu·ªôc h·ªçp',
				value: `${duration} ph√∫t`,
				inline: true
			},

			{
				name: 'K√™nh di·ªÖn ra cu·ªôc h·ªçp',
				value: `<#${channel.id}>`,
				inline: false
			},

			{
				name: 'K√™nh nh·∫Øc nh·ªü',
				value: `<#${channel1.id}>`,
				inline: false
			},

			{
				name: `Vai tr√≤ nh·∫≠n ƒë∆∞·ª£c nh·∫Øc nh·ªü (30 ph√∫t tr∆∞·ªõc khi cu·ªôc h·ªçp b·∫Øt ƒë·∫ßu)`,
				value: `<@&${role.id}>`,
				inline: false
			}
		);

		if (thumbnailAttachmentURL) {
			embed.setThumbnail(thumbnailAttachmentURL);
		}

		if (colorCode) {
			embed.setColor(`${colorCode}`);
		} else {
			embed.setColor(0x0099FF);
		}
		
		embed.setFooter({ text: `TH√îNG B√ÅO ƒê√É ƒê∆Ø·ª¢C G·ª¨I`})

		await interaction.reply({
			content: `<@&${role.id}> c√≥ th√¥ng b√°o:`,
			embeds: [embed]
		});

		const formattedHour = hour.replace('h', '');
		const dateTimeString = `${date.split('/').reverse().join('-')}T${formattedHour}:00`;
		const dateTime = new Date(dateTimeString);
		const meetingTime = dateTime.getTime();
		const currentTime = new Date().getTime();
		const notificationDelay = meetingTime - currentTime - (30 * 60 * 1000);

		if (!isNaN(meetingTime) && notificationDelay > 0) {
			setTimeout(() => {

				const embed1 = new EmbedBuilder()
					.setTitle(`üìÖ NH·∫ÆC NH·ªû CU·ªòC H·ªåP TR∆Ø·ªöC 30 PH√öT`)
					.setDescription(`\n> Cu·ªôc h·ªçp n√†y d√†nh cho: <@&${role.id}>`)
					.setFields(
						{
							name: 'Ng√†y b·∫Øt ƒë·∫ßu cu·ªôc h·ªçp',
							value: date,
							inline: true
						},

						{
							name: `Th·ªùi gian b·∫Øt ƒë·∫ßu`,
							value: hour,
							inline: true
						},

						{
							name: 'K√™nh cu·ªôc h·ªçp di·ªÖn ra',
							value: `<#${channel.id}>`,
							inline: false
						},

						{
							name: `N·ªôi Dung cu·ªôc h·ªçp`,
							value: `${objet}`,
							inline: false
						},

						{
							name: 'Cu·ªôc h·ªçp di·ªÖn ra kho·∫£ng:',
							value: `${duration} ph√∫t`,
							inline: true
						},

						{
							name: `Th·ªùi gian nh·∫Øc nh·ªü`,
							value: `__30 ph√∫t__ ph√∫t tr∆∞·ªõc khi cu·ªôc h·ªçp di·ªÖn ra, tr√°nh vi·ªác b·∫°n b·ªè l·ª° ƒëi·ªÅu g√¨ ƒë√≥.`,
							inline: false
						}
					)
				
				if (thumbnailAttachmentURL) {
					embed1.setThumbnail(thumbnailAttachmentURL);
				}

				const buttonMeeting = new ButtonBuilder()
						.setCustomId(`button_Meeting`)
						.setLabel(`Cu·ªôc h·ªçp ƒë∆∞·ª£c t·ªï ch·ª©c b·ªüi: ${interaction.user.displayName}`)
                        .setDisabled(true)
						.setStyle(ButtonStyle.Danger)
				
				const row = new ActionRowBuilder()
					.addComponents(buttonMeeting)
					

				channel1.send({
					content: `<@&${role.id}>`,
					embeds: [embed1],
					components: [row],
					allowedMentions: {
						roles: [role.id]
					}
				});
			}, notificationDelay);
		} else {
			// console.log('Ng√†y gi·ªù kh√¥ng h·ª£p l·ªá ho·∫∑c Cu·ªôc h·ªçp qu√° g·∫ßn ƒë·ªÉ l√™n l·ªãch th√¥ng b√°o ho·∫∑c ƒë√£ tr√¥i qua.');
			await interaction.followUp({ 
				content:
					`Ng√†y gi·ªù kh√¥ng h·ª£p l·ªá ho·∫∑c cu·ªôc h·ªçp qu√° g·∫ßn ƒë·ªÉ l√™n l·ªãch th√¥ng b√°o ho·∫∑c ƒë√£ tr√¥i qua.
					\n> __L∆ØU √ù__: Th·ªùi gian b·∫Øt ƒë·∫ßu h·ªçp = th·ªùi gian b·∫Øt ƒë·∫ßu t·∫°o + 30 ph√∫t ( ƒë√¢y l√† th·ªùi gian t·ªëi thi·∫øu), n·∫øu vi·∫øt sai ƒë·ªãnh d·∫°ng ng√†y v√† th·ªùi gian s·∫Ω kh√¥ng c√≥ nh·∫Øc nh·ªü n√†o.
					\nVD: b·∫°n mu·ªën t·ªï ch·ª©c cu·ªôc h·ªçp v√†o l√∫c 08:30 v·∫≠y th√¨ trong m·ª•c ch·ªçn ***duration*** b·∫°n n√™n vi·∫øt l√† 09:01.
					\nV√¨ nh·∫Øc nh·ªü s·∫Ω ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc khi di·ªÖn ra cu·ªôc h·ªçp 30 ph√∫t!`,
				ephemeral:true
			})
		}
	},
};