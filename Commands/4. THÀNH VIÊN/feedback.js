const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require("discord.js");
const FeedbackChannel = require("../../schemas/feedbackSchema"); // Import FeedbackChannel model

// ƒê·ªãnh nghƒ©a c√°c t√πy ch·ªçn cho m·ªói lo·∫°i ph·∫£n h·ªìi
const options = {
    bug: {
        name: "B√°o c√°o l·ªói",
        replyMessage: "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i b√°o c√°o l·ªói! Ch√∫ng t√¥i s·∫Ω xem x√©t v√† x·ª≠ l√Ω ngay.",
        previewMessage: `D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho B√°o c√°o l·ªói:`
    },
    suggestion: {
        name: "B√°o c√°o ƒë·ªÅ xu·∫•t",
        replyMessage: "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒë·ªÅ xu·∫•t! Ch√∫ng t√¥i s·∫Ω xem x√©t v√† x·ª≠ l√Ω nhanh ch√≥ng.",
        previewMessage: `D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho B√°o c√°o ƒë·ªÅ xu·∫•t:`
    },
    review: {
        name: "ƒê√°nh gi√° ph·∫£n h·ªìi",
        replyMessage: "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒë√°nh gi√°! Ch√∫ng t√¥i t√¥n tr·ªçng quy·∫øt ƒë·ªãnh c·ªßa b·∫°n.",
        previewMessage: `D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho ƒê√°nh gi√° ph·∫£n h·ªìi:`
    },
    other: {
        name: "B√°o c√°o kh√°c",
        replyMessage: "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i b√°o c√°o! Ch√∫ng t√¥i s·∫Ω c√¢n nh·∫Øc v·ªÅ ƒëi·ªÅu ƒë√≥.",
        previewMessage: `D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho B√°o c√°o kh√°c:`
    },
};

// Xu·∫•t module ƒë·ªÉ s·ª≠ d·ª•ng trong ·ª©ng d·ª•ng Discord
module.exports = {
    // ƒê·ªãnh nghƒ©a th√¥ng tin c·ªßa Slash Command
    data: new SlashCommandBuilder()
        .setName("feedback")
        .setDescription("üì¨ | Ph·∫£n h·ªìi v·ªÅ l·ªói ho·∫∑c ƒë√≥ng g√≥p √Ω ki·∫øn v·ªÅ cho m√°y ch·ªß")
        .addSubcommand(subcommand =>
            subcommand
                .setName("send")
                .setDescription("G·ª≠i ph·∫£n h·ªìi")
                .addStringOption(option => option.setName('option').setDescription('Ch·ªçn danh m·ª•c ph·∫£n h·ªìi').setRequired(true).addChoices(
                    { name: options.bug.name, value: "bug" },
                    { name: options.suggestion.name, value: "suggestion" },
                    { name: options.review.name, value: "review" },
                    { name: options.other.name, value: "other" },
                ))
                .addStringOption(option => option.setName('feedback').setDescription('Th√¥ng tin ph·∫£n h·ªìi c·ªßa b·∫°n').setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName("setup")
                .setDescription("Ch·ªçn k√™nh ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi")
                .addChannelOption(option => option.setName('channel').setDescription('Ch·ªçn k√™nh ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi').setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName("remove")
                .setDescription("X√≥a thi·∫øt l·∫≠p k√™nh ph·∫£n h·ªìi")),

    // H√†m x·ª≠ l√Ω khi Slash Command ƒë∆∞·ª£c th·ª±c thi
    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();
        const guildId = interaction.guild.id;

        if (subcommand === "setup") {
            // Thi·∫øt l·∫≠p k√™nh g·ª≠i ph·∫£n h·ªìi
            const channel = interaction.options.getChannel('channel');
            const channelId = channel.id;

            // L∆∞u tr·ªØ th√¥ng tin k√™nh v√†o MongoDB
            await FeedbackChannel.findOneAndUpdate(
                { guildId },
                { channelId },
                { upsert: true, new: true }
            );

            await interaction.reply({ content: `K√™nh ${channel.name} ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë·ªÉ nh·∫≠n ph·∫£n h·ªìi.`, ephemeral: true });
        } else if (subcommand === "remove") {
            // X√≥a thi·∫øt l·∫≠p k√™nh ph·∫£n h·ªìi
            await FeedbackChannel.findOneAndDelete({ guildId });

            await interaction.reply({ content: `ƒê√£ x√≥a thi·∫øt l·∫≠p k√™nh ph·∫£n h·ªìi cho m√°y ch·ªß n√†y.`, ephemeral: true });
        } else if (subcommand === "send") {
            const option = interaction.options.get('option').value;
            const feedback = interaction.options.get('feedback').value;

            // Ki·ªÉm tra xem k√™nh g·ª≠i ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p hay ch∆∞a
            const feedbackChannelDoc = await FeedbackChannel.findOne({ guildId });
            if (!feedbackChannelDoc) {
                await interaction.reply({ content: `Ch∆∞a c√≥ k√™nh n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi. Vui l√≤ng s·ª≠ d·ª•ng l·ªánh /feedback setup ƒë·ªÉ thi·∫øt l·∫≠p k√™nh.`, ephemeral: true });
                return;
            }

            const feedbackChannel = interaction.guild.channels.cache.get(feedbackChannelDoc.channelId);

            // T·∫°o embed d·ª±a tr√™n lo·∫°i ph·∫£n h·ªìi v√† th√™m timestamp
            const feedbackEmbed = new EmbedBuilder()
                .setTitle(options[option].name)
                .setDescription(`\`\`\`${feedback}\`\`\``)
                .setColor('Random')
                .setImage(`https://i.gifer.com/origin/bc/bc77626a04355c8c12cf05a09f87c61a_w200.gif`)
                .setTimestamp();

            // T·∫°o n√∫t "Send"
            const sendButton = new ButtonBuilder()
                .setCustomId('sendButton')
                .setLabel('OK')
                .setEmoji(`<:zzahhdinook:1249470387016695808>`)
                .setStyle(ButtonStyle.Success);

            // T·∫°o n√∫t "Cancel"
            const cancelButton = new ButtonBuilder()
                .setCustomId('cancelButton')
                .setLabel('Cancel')
                .setEmoji(`<:2629notick:1249471458565165156>`)
                .setStyle(ButtonStyle.Danger);

            // Hi·ªÉn th·ªã xem tr∆∞·ªõc v√† n√∫t cho ng∆∞·ªùi t∆∞∆°ng t√°c
            const row = new ActionRowBuilder()
                .addComponents(sendButton, cancelButton);

            // G·ª≠i tin nh·∫Øn xem tr∆∞·ªõc v√† l·∫•y tin nh·∫Øn ƒë√≥ ƒë·ªÉ th·ª±c hi·ªán x√≥a sau n√†y
            const previewMessage = await interaction.reply({ content: options[option].previewMessage, embeds: [feedbackEmbed], components: [row], ephemeral: true });

            // T·∫°o l·∫Øng nghe s·ª± ki·ªán cho n√∫t
            const filter = i => i.customId === 'sendButton' || i.customId === 'cancelButton';
            const collector = interaction.channel.createMessageComponentCollector({ filter, time: 120000 });

            // Bi·∫øn ki·ªÉm so√°t tr·∫°ng th√°i c·ªßa n√∫t
            let sendButtonClicked = false;
            let cancelButtonClicked = false;

            // X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng ·∫•n n√∫t
            collector.on('collect', async i => {
                if (i.customId === 'sendButton' && !sendButtonClicked) {
                    sendButtonClicked = true;

                    // G·ª≠i ph·∫£n h·ªìi v√† tin nh·∫Øn c·∫£m ∆°n
                    interaction.followUp({ content: options[option].replyMessage, ephemeral: true });

                    // G·ª≠i embed v√†o k√™nh feedback ƒë√£ ch·ªçn
                    feedbackChannel.send({ embeds: [feedbackEmbed] });

                    // Ki·ªÉm tra n·∫øu tin nh·∫Øn xem tr∆∞·ªõc t·ªìn t·∫°i tr∆∞·ªõc khi c·ªë g·∫Øng x√≥a
                    await previewMessage.delete().catch(error => {
                        console.error(`Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn xem tr∆∞·ªõc: ${error.message}`);
                    });
                } else if (i.customId === 'cancelButton' && !cancelButtonClicked) {
                    cancelButtonClicked = true;

                    // Hu·ª∑ tin nh·∫Øn xem tr∆∞·ªõc
                    interaction.followUp({ content: `B·∫°n ƒë√£ hu·ª∑ vi·ªác g·ª≠i ph·∫£n h·ªìi.`, ephemeral: true });

                    // Ki·ªÉm tra n·∫øu tin nh·∫Øn xem tr∆∞·ªõc t·ªìn t·∫°i tr∆∞·ªõc khi c·ªë g·∫Øng x√≥a
                    await previewMessage.delete().catch(error => {
                        console.error(`Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn xem tr∆∞·ªõc: ${error.message}`);
                    });
                }
            });

            // X·ª≠ l√Ω s·ª± ki·ªán khi th·ªùi gian ch·ªù k·∫øt th√∫c
            collector.on('end', collected => {
                if (collected.size === 0) {
                    // N·∫øu kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c thu th·∫≠p, th√¥ng b√°o v·ªÅ vi·ªác h·∫øt th·ªùi gian
                    interaction.followUp({ content: `B·∫°n ƒë√£ kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n√†o trong 2 ph√∫t, v√¨ v·∫≠y s·∫Ω kh√¥ng t∆∞∆°ng t√°c ƒë∆∞·ª£c v·ªõi n√∫t n·ªØa.`, ephemeral: true });
                }
            });
        }
    }
};
