const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder } = require('discord.js');
const fs = require('fs');
const config = require('../../config');
const { row3 } = require('../../ButtonPlace/ActionRowBuilder');
const { createInviteEmbed, createReportEmbed, createEmptyCategoryEmbed, createEmbedEmbed } = require(`../../Embeds/embedsCreate`)

// Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c danh m·ª•c l·ªánh slash
const SlashCommandEmojis = {
    '0. DEV': `üë©üèª‚Äçüíª`,
    '1. SERVER OWNER': 'üëë',
    '2. ADMIN': '‚ôõ',
    '3. ADMIN 1': '‚ôõ',
    '4. TH√ÄNH VI√äN': 'üë®‚Äçüë®‚Äçüë¶‚Äçüë¶',
    '5. TH√ÄNH VI√äN 1': 'üë®‚Äçüë®‚Äçüë¶‚Äçüë¶',
    '6. RANK & XP': 'üèÜ',
    '7. AI': 'ü§ñ',
    '8. GAMES': 'üéÆ',
    'NUDE 18+': 'üîû',
    'TUY·ªÇN_D·ª§NG': 'üíº',
    'Utils': 'üõ†Ô∏è',
    'other': '‚åõ' // Danh m·ª•c M·∫∑c ƒë·ªãnh
};

// Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c danh m·ª•c l·ªánh prefix
const PrefixCommandsEmojis = {
    '2. PREFIX': '‚ôõ', // Chuy·ªÉn ƒë·ªïi kh√≥a th√†nh ch·ªØ in hoa ƒë·ªÉ ƒë·ªìng nh·∫•t
    '1. PREFIXOFADMIN': 'üëë',
    'AI': 'ü§ñ',
    'Games': 'üéÆ',
    'NUDE 18+': 'üîû',
    'Rank & XP': 'üèÖ',
    'Th√†nh Vi√™n': 'üôãüèª‚Äç‚ôÇÔ∏è',
    'TUY·ªÇN_D·ª§NG': 'üíº',
    'Utils': 'üõ†Ô∏è',
    'other': '‚åõ' // Danh m·ª•c M·∫∑c ƒë·ªãnh
};

// Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c file l·ªánh, ch·ªâ ch·ª©a t√™n file kh√¥ng c√≥ ƒëu√¥i
const fileEmojis = {
    'Create-Role': `üé≠`,
    'anti-swear': 'ü§¨',
    'ban': `‚ö†Ô∏è`,
    'brb': 'üìë',
    'commands-bot': 'üìú',
    'hi': 'üëãüèª',
    'discordjs-guide': 'üî£',
    'ping': 'üèì',
    'pickrole-add-role': 'üî≤',
    'pickrole-message-create': 'üî≤',
    'pickrole-message-delete': 'üî≤',
    'setup-server': 'üñß',
    'leave-guild': 'üí¨',
    'verification': '„Äå ‚úî ·µõ·µâ ≥·∂¶·∂†·∂¶·µâ·µà „Äç',
    'welcome-setup': 'ü§ù',
    'AI-L·∫§Y-TR·ªòM-EMOJI': 'üëÅÔ∏è',
    'AI-TI·∫æNG-ANH': 'üî£',
    'AI-TI·∫æNG-VI·ªÜT': 'üî£',
    'CH√ÄO-TH√ÄNH-VI√äN': 'üëã',
    'ƒê√ÇY-L√Ä-AI': 'üîç',
    'rank': 'üëë',
    'thanks': 'ü•∞',
    'xp-reset': 'üîÑ',
    'xpuse-reset': 'üîÑ',
    'solve': `üîè`,
    'speak': `üó£Ô∏è`,
    'invite': `ü§ñ`,
    'invites-code': `üë®üèª‚Äçüíª`,
    'profile': `üìù`,
    'review': `üíØ`,
    'role-members': `üìã`,
    'statute-server': `üí¨`,
    'todo': `üìù`,
    'translate': `üåê`,
    'vote-image': `‚≠ê`,
    'shows-role-members': `üîé`,
    'get-help': `ü§ù`,
    'help-valheim': `üÜò`,
    'info-server': `üóÑÔ∏è`,
    'test-userinfo': `üìë`
};

// Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c file l·ªánh, ch·ªâ ch·ª©a t√™n file kh√¥ng c√≥ ƒëu√¥i
const prefixEmojis = {
    'hello': 'üí¨',
    'greet': 'ü§ù'
};

// ƒê·ªçc c√°c l·ªánh prefix t·ª´ th∆∞ m·ª•c PrefixCommands
const prefixCommands = {};
const prefixCategories = {};
const prefixFolders = fs.readdirSync('./PrefixCommands');
for (const folder of prefixFolders) {
    const commandFiles = fs.readdirSync(`./PrefixCommands/${folder}`).filter(file => file.endsWith('.js'));
    const folderName = folder.toUpperCase();
    prefixCategories[folderName] = []; // Kh·ªüi t·∫°o danh m·ª•c
    
    for (const file of commandFiles) {
        const fileNameWithoutExt = file.split('.').shift();
        prefixCommands[fileNameWithoutExt] = {
            name: fileNameWithoutExt,
            description: `ƒê√¢y l√† l·ªánh prefix, h√£y d√πng ?${fileNameWithoutExt}`,
            emoji: prefixEmojis[fileNameWithoutExt] || '‚Ä¢'
        };
        prefixCategories[folderName].push(fileNameWithoutExt); // Th√™m v√†o danh m·ª•c
    }
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('commands-bot')
        .setDMPermission(false)
        .setDescription('Li·ªát k√™ t·∫•t c·∫£ c√°c l·ªánh ho·∫∑c th√¥ng tin v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ'),

    async execute(interaction, client) {
        const commandFolders = fs.readdirSync('./Commands').filter(folder => !folder.startsWith('.'));
        const commandsByCategory = {};

        // X·ª≠ l√Ω c√°c l·ªánh trong th∆∞ m·ª•c Commands
        for (const folder of commandFolders) {
            const folderName = folder.toUpperCase();
            const commandFiles = fs.readdirSync(`./Commands/${folder}`).filter(file => file.endsWith('.js'));
            const commands = [];

            for (const file of commandFiles) {
                const fileNameWithoutExt = file.split('.').shift();
                const { default: commandFile } = await import(`./../${folder}/${file}`);
                if (commandFile && commandFile.data) {
                    commands.push({ 
                        name: commandFile.data.name, 
                        description: commandFile.data.description, 
                        emoji: fileEmojis[fileNameWithoutExt] || '‚Ä¢' 
                    });
                } else {
                    console.error(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu l·ªánh trong t·ªáp: ${file}`);
                }
            }

            commandsByCategory[folderName] = commands;
        }

        // T·∫°o c√°c t√πy ch·ªçn cho menu th·∫£ xu·ªëng l·ªánh g·∫°ch ch√©o
        const slashCommandOptions = Object.keys(commandsByCategory).map(folder => ({
            label: `${SlashCommandEmojis[folder] || '‚åõ'} ${folder}`,
            value: `slash-${folder}` // Ph√¢n bi·ªát l·ªánh Slash
        }));

        // T·∫°o c√°c t√πy ch·ªçn cho menu th·∫£ xu·ªëng l·ªánh ti·ªÅn t·ªë
        const prefixOptions = Object.keys(prefixCategories).map(category => ({
            label: `${PrefixCommandsEmojis[category] || '‚ùì'} ${category}`,
            value: `prefix-${category}` // Ph√¢n bi·ªát danh m·ª•c ti·ªÅn t·ªë
        }));

        // T·∫°o menu th·∫£ xu·ªëng l·ªánh g·∫°ch ch√©o
        const slashSelectMenu = new StringSelectMenuBuilder()
            .setCustomId('slash-category-select')
            .setPlaceholder('üîπ Chi ti·∫øt v·ªÅ l·ªánh g·∫°ch ch√©o (/)')
            .addOptions(slashCommandOptions.map(option => new StringSelectMenuOptionBuilder()
                .setLabel(option.label)
                .setValue(option.value)));

        // T·∫°o menu th·∫£ xu·ªëng l·ªánh ti·ªÅn t·ªë
        const prefixSelectMenu = new StringSelectMenuBuilder()
            .setCustomId('prefix-category-select')
            .setPlaceholder('üî∏ Chi ti·∫øt v·ªÅ l·ªánh ti·ªÅn t·ªë (?)')
            .addOptions(prefixOptions.map(option => new StringSelectMenuOptionBuilder()
                .setLabel(option.label)
                .setValue(option.value)));

        const embed = createEmbedEmbed(client)

        const row1 = new ActionRowBuilder()
            .addComponents(slashSelectMenu);

        const row2 = new ActionRowBuilder()
            .addComponents(prefixSelectMenu);

        const message = await interaction.reply({ embeds: [embed], components: [row1, row2, row3], ephemeral: false, fetchReply: true });

        const filter = i => i.user.id === interaction.user.id;

        const collector = message.createMessageComponentCollector({ filter });

        collector.on('collect', async i => {
            if (i.isStringSelectMenu()) {
                await i.deferUpdate();

                const [type, value] = i.values[0].split('-');
                if (type === 'slash') {
                    const selectedCategory = value;
                    const categoryCommands = commandsByCategory[selectedCategory];

                    if (categoryCommands.length === 0) {
                        const emptyCategoryEmbed = createEmptyCategoryEmbed(client)
                        
                            await i.editReply({ embeds: [emptyCategoryEmbed], components: [row1, row2, row3] });
                        
                    }

                    const commandChunks = chunkArray(categoryCommands, 25);

                    for (const chunk of commandChunks) {

                        const categoryEmbed = new EmbedBuilder()
                            .setTitle(`${selectedCategory}`)
                            .setDescription(config.DescriptionSlash)
                            .setThumbnail(client.user.displayAvatarURL())
                            .addFields(chunk.map(command => {
                                const name = `${command.emoji || ''} ${command.name || `T√™n kh√¥ng x√°c ƒë·ªãnh`}`;
                                const description = command.description || 'Kh√¥ng c√≥ m√¥ t·∫£';
                                return { name, value: description };
                            }));

                        try {
                            await i.editReply({ embeds: [categoryEmbed], components: [row1, row2, row3] });
                        } catch (error) {
                            console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c1: ${error.message}`);
                        }
                    }
                } else if (type === 'prefix') {
                    const selectedCategory = value;
                    const categoryCommands = prefixCategories[selectedCategory] || [];

                    if (categoryCommands.length === 0) {
                        const emptyCategoryEmbed = createEmptyCategoryEmbed(client)

                        try {
                            await i.editReply({ embeds: [emptyCategoryEmbed], components: [row1, row2, row3] });
                        } catch (error) {
                            console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c khi th∆∞ m·ª•c tr·ªëng: ${error.message}`);
                        }
                        return;
                    }

                    const commandChunks = chunkArray(categoryCommands.map(cmd => ({
                        name: cmd,
                        description: client.prefixDescriptions[cmd] || 'Kh√¥ng c√≥ m√¥ t·∫£',
                        emoji: prefixCommands[cmd].emoji
                    })), 25);

                    for (const chunk of commandChunks) {
                        const categoryEmbed = new EmbedBuilder()
                            .setTitle(`${selectedCategory}`)
                            .setDescription(config.DescriptionPrefix)
                            .setThumbnail(client.user.displayAvatarURL())
                            .addFields(chunk.map(command => {
                                const name = `${command.emoji || ''} ${command.name || `T√™n kh√¥ng x√°c ƒë·ªãnh`}`;
                                const description = command.description || 'Kh√¥ng c√≥ m√¥ t·∫£';
                                return { name, value: description };
                            }));

                        try {
                            await i.editReply({ embeds: [categoryEmbed], components: [row1, row2, row3] });
                        } catch (error) {
                            console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c1: ${error.message}`);
                        }
                    }
                }
            }

            if (i.isButton()) {
                if (i.customId === 'deleteButton') {
                    try {
                        await i.update({ content: 'ƒê√£ x√≥a b·ªè.', components: [], embeds: [] });
                        setTimeout(() => interaction.deleteReply().catch(() => {}), 0);
                    } catch (error) {
                        console.error(`L·ªói x√≥a ph·∫£n h·ªìi: ${error.message}`);
                    }
                }

                if (i.customId === 'inviteButton') {

                    const inviteEmbed = createInviteEmbed(client)
                    
                    try {
                        await i.update({ embeds: [inviteEmbed], components: [row3] }); // thay th·∫ø b·∫±ng components: [new ActionRowBuilder().addComponents(homeButton, reportButton, inviteButton, deleteButton)]
                    } catch (error) {
                        console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c invite: ${error.message}`);
                    }
                }

                if (i.customId === 'reportButton') {
                    const reportEmbed = createReportEmbed(client)
                    
                    try {
                        await i.update({ embeds: [reportEmbed], components: [row3] }); // thay th·∫ø b·∫±ng components: [new ActionRowBuilder().addComponents(homeButton, reportButton, inviteButton, deleteButton)]
                    } catch (error) {
                        console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c b√°o c√°o: ${error.message}`);
                    }
                }

                if (i.customId === 'homeButton') {
                    try {
                        await i.update({ embeds: [embed], components: [row1, row2, row3] });
                    } catch (error) {
                        console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c trang ch·ªß: ${error.message}`);
                    }
                }
            }
        });
    },
};

// H√†m chia m·∫£ng th√†nh c√°c ph·∫ßn nh·ªè h∆°n
function chunkArray(array, size) {
    const result = [];
    for (let i = 0; i < array.length; i += size) {
        result.push(array.slice(i, i + size));
    }
    return result;
}