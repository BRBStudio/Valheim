const { SlashCommandBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, PermissionsBitField, ActionRowBuilder, StringSelectMenuBuilder, ChannelType } = require('discord.js');
const ticket = require('../../schemas/ticketSchema');
 
    module.exports = {
        data: new SlashCommandBuilder()
        .setName('ticket')
        .setDescription('Qu·∫£n l√Ω h·ªá th·ªëng v√©')
        .addSubcommand(command => command.setName('send').setDescription('G·ª≠i tin nh·∫Øn v√©').addStringOption(option => option.setName('name').setDescription('T√™n cho n·ªôi dung menu ch·ªçn m·ªü').setRequired(true)).addStringOption(option => option.setName('message').setDescription('M·ªôt th√¥ng b√°o t√πy ch·ªânh ƒë·ªÉ th√™m v√†o ph·∫ßn nh√∫ng').setRequired(false)))
        .addSubcommand(command => command.setName('setup').setDescription('Thi·∫øt l·∫≠p danh m·ª•c v√©').addChannelOption(option => option.setName('category').setDescription('Th·ªÉ lo·∫°i g·ª≠i v√© v√†o').addChannelTypes(ChannelType.GuildCategory).setRequired(true)))
        .addSubcommand(command => command.setName('remove').setDescription('V√¥ hi·ªáu h√≥a h·ªá th·ªëng v√©'))
        .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),
        async execute (interaction) {

        try {
            const { options } = interaction;
            const sub = options.getSubcommand();
            const data = await ticket.findOne({ Guild: interaction.guild.id});
    
            switch (sub) {
                case 'send':
                    if (!data) return await interaction.reply({ content: `‚ö†Ô∏è B·∫°n ph·∫£i th·ª±c hi·ªán /ticket setup tr∆∞·ªõc khi c√≥ th·ªÉ g·ª≠i tin nh·∫Øn ticket...`, ephemeral: true });
    
                    const name = options.getString('name');
                    var message = options.getString('message') || 'T·∫°o m·ªôt v√© ƒë·ªÉ n√≥i chuy·ªán v·ªõi nh√¢n vi√™n m√°y ch·ªß! Sau khi b·∫°n ch·ªçn b√™n d∆∞·ªõi, h√£y s·ª≠ d·ª•ng th√¥ng tin ƒë·∫ßu v√†o ƒë·ªÉ m√¥ t·∫£ l√Ω do b·∫°n t·∫°o phi·∫øu n√†y';
    
                    const select = new ActionRowBuilder()
                    .addComponents(
                        new StringSelectMenuBuilder()
                        .setCustomId('ticketCreateSelect')
                        .setPlaceholder(`üí≥ ${name}`)
                        .setMinValues(1)
                        .addOptions(
                            {
                                label: 'üí≥ T·∫°o v√© h·ªó tr·ª£ discord',
                                description: 'Nh·∫•p ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o v√©',
                                value: 'discordTicket'
                            },
                            {
                                label: 'üí≥ T·∫°o v√© h·ªó tr·ª£ game',
                                description: 'Nh·∫•p ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o v√©',
                                value: 'gameTicket'
                            }
                        )
                    );

                    const button = new ButtonBuilder()
                                .setCustomId('cancel-Ticket')
                                .setLabel('B·ªè t·∫°o v√©')
                                .setStyle(ButtonStyle.Danger)
                                .setEmoji(`<a:tickred51:1240060253240819843>`)

                    const RemoveDiscordChannelTicket = new ButtonBuilder()
                                .setCustomId('removeDC-Ticket')
                                .setLabel('X√≥a t·∫•t c·∫£ c√°c k√™nh v√© discord')
                                .setStyle(ButtonStyle.Danger)
                                .setEmoji(`<a:_ew_no_:1253443732083179521>`)
                        
                    const RemoveGameChannelTicket = new ButtonBuilder()
                                .setCustomId('removeG-Ticket')
                                .setLabel('X√≥a t·∫•t c·∫£ c√°c k√™nh v√© game')
                                .setStyle(ButtonStyle.Danger)
                                .setEmoji(`<a:_ew_no_:1253443732083179521>`)

                    const RefeshDiscordTicket = new ButtonBuilder()
                                .setCustomId('refeshDC-Ticket')
                                .setLabel('L√†m m·ªõi stt k√™nh v√© discord')
                                .setStyle(ButtonStyle.Primary)
                                .setEmoji(`<a:UK8zaNG86f:1250122827596697620>`)
                    
                    const RefeshGameTicket = new ButtonBuilder()
                                .setCustomId('refeshG-Ticket')
                                .setLabel('L√†m m·ªõi stt k√™nh v√© game')
                                .setStyle(ButtonStyle.Primary)
                                .setEmoji(`<a:UK8zaNG86f:1250122827596697620>`)

                    
                    const row = new ActionRowBuilder().addComponents(RemoveDiscordChannelTicket, RemoveGameChannelTicket);
                    const row1 = new ActionRowBuilder().addComponents(RefeshDiscordTicket, RefeshGameTicket, button);
    
                    const embed = new EmbedBuilder()
                        .setColor("Blurple")
                        .setTitle(`‚ú® T·∫°o m·ªôt v√©!`)
                        .setDescription(message + 'üé´')
                        .setFooter({ text: `${interaction.guild.name}`, iconURL: interaction.guild.iconURL() });
    
                    await interaction.reply({ content: `üè∑Ô∏è T√¥i ƒë√£ g·ª≠i tin nh·∫Øn v√© c·ªßa b·∫°n d∆∞·ªõi ƒë√¢y.`, ephemeral: true });                    
                    await interaction.channel.send({ embeds: [embed], components: [select, row, row1] });
                                   
                break;

                case 'remove':
                    if (!data) return await interaction.reply({ content: `‚ö†Ô∏è C√≥ v·∫ª nh∆∞ b·∫°n ch∆∞a c√†i ƒë·∫∑t h·ªá th·ªëng v√©`, ephemeral: true });
                    else {
                        await ticket.deleteOne({ Guild: interaction.guild.id});
                        await interaction.reply({ content: `üìÇ T√¥i ƒë√£ x√≥a danh m·ª•c v√© c·ªßa b·∫°n.`, ephemeral: true });
                    }
    
                break;

                case 'setup':
                    if (data) return await interaction.reply({ content: `‚ö†Ô∏è C√≥ v·∫ª nh∆∞ b·∫°n ƒë√£ ƒë·∫∑t danh m·ª•c v√© l√† <#${data.Category}> r·ªìi.`, ephemeral: true });
                    else {
                        const category = options.getChannel('category');
                        await ticket.create({ 
                            Guild: interaction.guild.id,
                            Category: category.id
                        });
    
                        await interaction.reply({ content: `üìÇ T√¥i ƒë√£ ƒë·∫∑t danh m·ª•c th√†nh **${category}**! S·ª≠ d·ª•ng /ticket send ƒë·ªÉ g·ª≠i v√© t·∫°o tin nh·∫Øn`, ephemeral: true });
                    }
            }
        } catch (error) {
            console.error(error);
            interaction.client.emit('interactionError', interaction.client, interaction, error);
            await interaction.reply({ content: `‚ùå ƒê√£ x·∫£y ra l·ªói trong khi th·ª±c thi l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau.`, ephemeral: true });
        }
    
    }
}