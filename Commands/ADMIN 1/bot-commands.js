const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder } = require('discord.js');
const fs = require('fs');

// Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c danh m·ª•c l·ªánh
const commandEmojis = {
    'ADMIN 1': 'üëë',
    'ADMIN 2': 'üëë',
    'AI' : 'ü§ñ',
    'Games': 'üéÆ',
    'NUDE 18+': 'üîû',
    'Rank & XP': 'üèÖ',
    'Th√†nh Vi√™n': 'üôãüèª‚Äç‚ôÇÔ∏è',
    'TUY·ªÇN_D·ª§NG': 'üíº',
    'Utils': 'üõ†Ô∏è',
    'other': '‚åõ' // Danh m·ª•c M·∫∑c ƒë·ªãnh
};

// Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c file l·ªánh
const fileEmojis = {
    'rank.js': 'üëë',
    'thanks.js': '‚ù§',
    'AI-L·ªùi-Ch√†o.js': 'üíö',
    'modpanel-PhatCoThoiGian.js': 'üëë',
};

module.exports = {
    data: new SlashCommandBuilder()
        .setName('bot-commands')
        .setDescription('üìú | Li·ªát k√™ t·∫•t c·∫£ c√°c l·ªánh ho·∫∑c th√¥ng tin v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ'),

    async execute(interaction, client) {
        const commandFolders = fs.readdirSync('./Commands').filter(folder => !folder.startsWith('.'));
        const commandsByCategory = {};

        for (const folder of commandFolders) {
            // const folderName = folder.toLowerCase(); // Chuy·ªÉn ƒë·ªïi t√™n th∆∞ m·ª•c th√†nh ch·ªØ th∆∞·ªùng
            const folderName = folder.toUpperCase(); // Chuy·ªÉn ƒë·ªïi t√™n th∆∞ m·ª•c th√†nh ch·ªØ hoa
            const commandFiles = fs.readdirSync(`./Commands/${folder}`).filter(file => file.endsWith('.js'));
            const commands = [];

            for (const file of commandFiles) {
                const { default: commandFile } = await import(`./../${folder}/${file}`);
                if (commandFile && commandFile.data) {
                    commands.push({ name: commandFile.data.name, description: commandFile.data.description, emoji: fileEmojis[file] || '‚Ä¢' }); // m·ªõi th√™m emoji cho file n·∫øu kh√¥ng mu·ªën th√¨ b·ªè d√≤ng `emoji: fileEmojis[file]`
                } else {
                    console.error(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu l·ªánh trong t·ªáp: ${file}`);
                }
            }

            // commandsByCategory[folder] = commands;
            commandsByCategory[folderName] = commands;
        }

        const dropdownOptions = Object.keys(commandsByCategory).map(folder => ({
            // label: folder,
            label: `${commandEmojis[folder] || '‚åõ'} ${folder}`,
            value: folder
        }));

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('category-select')
            .setPlaceholder('‚ùÑÔ∏è Ch·ªçn m·ªôt danh m·ª•c')
            .addOptions(...dropdownOptions.map(option => new StringSelectMenuOptionBuilder()
                .setLabel(option.label)
                .setValue(option.value)));

        const embed = new EmbedBuilder()
            .setTitle('Command - Help')
            .setDescription('Ch·ªçn m·ªôt danh m·ª•c t·ª´ menu th·∫£ xu·ªëng ƒë·ªÉ xem c√°c l·ªánh')
            .setThumbnail(client.user.displayAvatarURL());

        const row = new ActionRowBuilder()
            .addComponents(selectMenu);

        const homeButton = new ButtonBuilder()
            .setCustomId("homeButton")
            .setLabel("Trang ch·ªß")
            .setStyle("Primary");
       
        const reportButton = new ButtonBuilder()
            .setCustomId("reportButton")
            .setLabel("B√°o c√°o")
            .setStyle("Primary");
       
        const inviteButton = new ButtonBuilder()
            .setCustomId("inviteButton")
            .setLabel("M·ªùi Bot")
            .setStyle("Primary");
       
        const deleteButton = new ButtonBuilder()
            .setCustomId("deleteButton")
            .setLabel("X√≥a b·ªè")
            .setStyle("Danger");

        const row1 = new ActionRowBuilder()
            .addComponents(homeButton, reportButton, inviteButton, deleteButton);

        const message = await interaction.reply({ embeds: [embed], components: [row, row1], ephemeral: false, fetchReply: true });

        const filter = i => i.user.id === interaction.user.id;

        const collector = message.createMessageComponentCollector({ filter });

        collector.on('collect', async i => {
 

            if (i.isStringSelectMenu() && i.customId === 'category-select') {
                // const selectedCategory = i.values[0].toLowerCase(); // Nh·∫≠n danh m·ª•c ƒë√£ ch·ªçn, Chuy·ªÉn ƒë·ªïi danh m·ª•c ƒë√£ ch·ªçn th√†nh ch·ªØ th∆∞·ªùng
                const selectedCategory = i.values[0].toUpperCase(); // Chuy·ªÉn ƒë·ªïi danh m·ª•c ƒë√£ ch·ªçn th√†nh ch·ªØ hoa
                const categoryCommands = commandsByCategory[selectedCategory];

                if (categoryCommands.length === 0) {
                    const emptyCategoryEmbed = new EmbedBuilder()
                        .setTitle('Danh m·ª•c tr·ªëng')
                        .setDescription('Vui l√≤ng ch·ªçn danh m·ª•c kh√°c ho·∫∑c ch·ªù DEV th√™m v√†o.')
                        .setColor('Green')
                        .setThumbnail(client.user.displayAvatarURL());

                    try {
                        await i.update({ embeds: [emptyCategoryEmbed], components: [row, row1] });
                    } catch (error) {
                        console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c khi th∆∞ m·ª•c tr·ªëng: ${error.message}`);
                    }
                    return;
                }

                const commandChunks = chunkArray(categoryCommands, 25);

                for (const chunk of commandChunks) {
                    const categoryEmbed = new EmbedBuilder()
                        .setTitle(`${selectedCategory}`)
                        .setDescription('Danh s√°ch c√°c l·ªánh c√≥ s·∫µn trong danh m·ª•c n√†y:')
                        .setThumbnail(client.user.displayAvatarURL())
                        .addFields(chunk.map(command => {
                            // const name = command.name || `T√™n kh√¥ng x√°c ƒë·ªãnh` // 'Unknown';
                            const name = `${command.emoji || ''} ${command.name || `T√™n kh√¥ng x√°c ƒë·ªãnh`}`; // Th√™m emoji v√†o t√™n l·ªánh
                            const description = command.description || 'Kh√¥ng c√≥ m√¥ t·∫£';
                            return { name, value: description };
                        }));

                    try {
                        await i.update({ embeds: [categoryEmbed], components: [row, row1] });
                    } catch (error) {
                        console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c1: ${error.message}`);
                    }
                }
            }

            if (i.isButton()) {
                if (i.customId === 'deleteButton') {
                    try {
                        await i.update({ content: 'ƒê√£ x√≥a b·ªè.', components: [], embeds: [] });
                        setTimeout(() => interaction.deleteReply().catch(() => {}), 0); // B·ªè qua l·ªói khi x√≥a, thay 0 th√†nh 5000 ƒë·ªÉ th√†nh 5s m·ªõi x√≥a1
                    } catch (error) {
                        console.error(`L·ªói x√≥a ph·∫£n h·ªìi: ${error.message}`);
                    }
                }

                if (i.customId === 'inviteButton') {
                    const inviteLink = `https://discord.com/oauth2/authorize?client_id=1159874172290334730&permissions=8&scope=bot`;
            
                    const inviteEmbed = new EmbedBuilder()
                        .setDescription(`S·ª≠ d·ª•ng li√™n k·∫øt d∆∞·ªõi ƒë√¢y ƒë·ªÉ m·ªùi t√¥i ƒë·∫øn m√°y ch·ªß c·ªßa b·∫°n. T√¥i y√™u c·∫ßu quy·ªÅn **Qu·∫£n tr·ªã** ƒë·ªÉ c√≥ ch·ª©c nƒÉng t·ªët h∆°n. Tuy nhi√™n, b·∫°n c√≥ th·ªÉ ƒë·∫∑t quy·ªÅn c·ªßa t√¥i theo √Ω mu·ªën.` +
                        `\n\nNh·∫•p chu·ªôt v√†o [M·ªùi bot](${inviteLink}) ƒë·ªÉ m·ªùi.`)
                        .setThumbnail(interaction.client.user.displayAvatarURL())
                        .setColor(0x2b2d31);
            
                    try {
                        await i.update({ embeds: [inviteEmbed], components: [row, row1] });
                    } catch (error) {
                        console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c2: ${error.message}`);
                    }
                }

                if (i.customId === 'reportButton') {
                    const reportEmbed = new EmbedBuilder()
                        .setDescription(`D√πng l·ªánh /mailbox n·∫øu b·∫°n mu·ªën b√°o c√°o b·∫•t k·ª≥ l·ªói ho·∫∑c l·ªói n√†o. Valheim Surival c√πng ƒë·ªôi ng≈© c·ªßa anh ·∫•y s·∫Ω li√™n h·ªá l·∫°i v·ªõi b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ.`)
                        .setThumbnail(interaction.client.user.displayAvatarURL())
                        .setColor(0x2b2d31);

                    try {
                        await i.update({ embeds: [reportEmbed], components: [row, row1] });
                    } catch (error) {
                        console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c3: ${error.message}`);
                    }
                }

                if (i.customId === 'homeButton') {
                    try {
                        await i.update({ embeds: [embed], components: [row, row1] });
                    } catch (error) {
                        console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c4: ${error.message}`);
                    }
                }
            }
    });

        // collector.on('end', async () => {
        //     try {
        //         await message.edit({ components: [row] }).catch(() => {}); // B·ªè qua l·ªói khi ch·ªânh s·ª≠a
        //     } catch (error) {
        //         console.error(`L·ªói c·∫≠p nh·∫≠t t∆∞∆°ng t√°c5: ${error.message}`);
        //     }
        // });
    }
};

function chunkArray(array, size) {
    const chunkedArray = [];
    for (let i = 0; i < array.length; i += size) {
        chunkedArray.push(array.slice(i, i + size));
    }
    return chunkedArray;
}



//// Li·ªát k√™ t·∫•t c·∫£ c√°c l·ªánh ho·∫∑c th√¥ng tin v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ ////
//////////////////////////////////////////////////////////////////
//  ____  ____  ____    ____  _             _ _                //
// | __ )|  _ \| __ )  / ___|| |_ _   _  __| (_) ___          //
// |  _ \| |_) |  _ \  \___ \| __| | | |/ _` | |/ _ \        //
// | |_) |  _ <| |_) |  ___) | |_| |_| | (_| | | (_) |      //
// |____/|_| \_\____/  |____/ \__|\__,_|\__,_|_|\___/      //
//                                                        //
///////////////////////////////////////////////////////////