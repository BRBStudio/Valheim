// anti-swear.js
const AntiwordConfig = require('../../schemas/antiwordSchema');
const { SlashCommandBuilder, EmbedBuilder, PermissionsBitField } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('anti-swear')
    .setDescription('ü§¨ | C·∫•u h√¨nh h·ªá th·ªëng ch·ªëng ch·ª≠i th·ªÅ')
    .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageGuild)
    .addSubcommand(command => command.setName("addword").setDescription('ü§¨ | Th√™m m·ªôt t·ª´ v√†o danh s√°ch t·ª´ x·∫•u').addStringOption(option => option.setName('badword').setDescription('T·ª´ b·∫°n mu·ªën th√™m').setRequired(true)))
    .addSubcommand(command => command.setName('channel').setDescription('ü§¨ | K√™nh ki·ªÉm duy·ªát ng∆∞·ªùi d√πng ƒë√£ d√πng t·ª´ x·∫•u').addChannelOption(option => option.setName('channels').setDescription('k√™nh m√† b·∫°n mu·ªën tin nh·∫Øn ƒë·∫øn').setRequired(true)))
    .addSubcommand(command => command.setName('remove').setDescription('ü§¨ | X√≥a m·ªôt t·ª´ kh·ªèi danh s√°ch t·ª´ x·∫•u').addStringOption(option => option.setName('word').setDescription('T·ª´ c·∫ßn x√≥a').setRequired(true)))
    .addSubcommand(command => command.setName('list').setDescription('ü§¨ | Xem danh s√°ch t·ª´ x·∫•u'))
    .addSubcommand(command => command.setName('removeall').setDescription('ü§¨ | X√≥a t·∫•t c·∫£ t·ª´ x·∫•u')),

  async execute(interaction) {

    if (!interaction.guild) {
      interaction.reply("B·∫°n ch·ªâ c√≥ th·ªÉ d√πng l·ªánh c·ªßa bot ·ªü trong sever");
      return;
  }

    const sub = interaction.options.getSubcommand();

    try { 
      switch (sub) {
        case "addword":
          const guildId = interaction.guild.id;
          const badword = interaction.options.getString('badword').toLowerCase();
          let guildConfig = await AntiwordConfig.findOne({ guildId });

          if (!guildConfig) {
            guildConfig = new AntiwordConfig({
              guildId: guildId,
              badWords: [badword]
            });
          } else {
            if (!guildConfig.badWords) {
              guildConfig.badWords = [badword];
            } else {
              // Ki·ªÉm tra xem t·ª´ ƒë√≥ ƒë√£ t·ªìn t·∫°i trong m·∫£ng badWords ch∆∞a
              if (!guildConfig.badWords.includes(badword)) {
                guildConfig.badWords.push(badword);
              } else {
                // N·∫øu t·ª´ ƒë√£ t·ªìn t·∫°i, h√£y g·ª≠i tin nh·∫Øn cho bi·∫øt r·∫±ng
                interaction.reply(`T·ª´ **${badword}** ƒë√£ t·ªìn t·∫°i trong danh s√°ch t·ª´ x·∫•u.`);
                return;
              }
            }
          }

          await guildConfig.save();

          const embedAdd = new EmbedBuilder()
            .setColor('#00FF00') 
            .setDescription(` Th√†nh c√¥ng!\n ƒê√£ th√™m **${badword}** v√†o danh s√°ch t·ª´ x·∫•u`)
            .setImage(`https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExeG9sZmxiYTN4ZXMxaWY3c2R1dHZudGp3bWl4OG1uZmxnZDVmOXJ6MiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/dhsagLKDGYVySLsDrF/giphy.gif`);

          interaction.reply({ embeds: [embedAdd] });
          break;

        case "remove":
          const word = interaction.options.getString('word').toLowerCase();
          const guildIdToRemove = interaction.guild.id;

          await AntiwordConfig.findOneAndUpdate(
            { guildId: guildIdToRemove },
            { $pull: { badWords: word } }
          );

          const embedRemove = new EmbedBuilder()
            .setColor('#00FF00') 
            .setDescription(`‚õî Th√†nh c√¥ng!\nüõë ƒê√£ x√≥a **${word}** kh·ªèi danh s√°ch t·ª´ x·∫•u`)
            .setImage(`https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExeG9sZmxiYTN4ZXMxaWY3c2R1dHZudGp3bWl4OG1uZmxnZDVmOXJ6MiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/dhsagLKDGYVySLsDrF/giphy.gif`)
            .setTimestamp();

          await interaction.reply({ embeds: [embedRemove] });
          break;

        case "list":
          const guildIdToList = interaction.guild.id;
          const guildConfigToList = await AntiwordConfig.findOne({ guildId: guildIdToList });

          if (!guildConfigToList || !guildConfigToList.badWords || guildConfigToList.badWords.length === 0) {
            const nowords = new EmbedBuilder()
              .setColor('#FF0000') 
              .setDescription(`\`‚ùó Kh√¥ng c√≥ t·ª´ n√†o trong danh s√°ch t·ª´ x·∫•u!\``)
              .setImage(`https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExeG9sZmxiYTN4ZXMxaWY3c2R1dHZudGp3bWl4OG1uZmxnZDVmOXJ6MiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/dhsagLKDGYVySLsDrF/giphy.gif`)
              .setTimestamp();

            return interaction.reply({ embeds: [nowords] });
          } else {
            const listembed = new EmbedBuilder()
              .setAuthor({ name: `ƒê√¢y l√† danh s√°ch nh·ªØng t·ª´ x·∫•u`, iconURL: interaction.guild.iconURL() })
              .setDescription(`*${guildConfigToList.badWords.join('\n')}*`)
              .setImage(`https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExeG9sZmxiYTN4ZXMxaWY3c2R1dHZudGp3bWl4OG1uZmxnZDVmOXJ6MiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/dhsagLKDGYVySLsDrF/giphy.gif`)
              .setColor('#00FF00'); 
            await interaction.reply({ embeds: [listembed] });
          }
          break;

        case "channel":
          const selectedChannel = interaction.options.getChannel('channels');
          const guildIdForChannel = interaction.guild.id;

          await AntiwordConfig.findOneAndUpdate(
            { guildId: guildIdForChannel },
            { selectedChannelId: selectedChannel.id }
          );

          interaction.reply(`Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o k√™nh ${selectedChannel} ƒë·ªÉ b·∫°n ki·ªÉm duy·ªát.`);
          break;

        case "removeall":
          const guildIdToRemoveAll = interaction.guild.id;

          await AntiwordConfig.findOneAndUpdate(
            { guildId: guildIdToRemoveAll },
            { badWords: [] } // X√≥a t·∫•t c·∫£ c√°c t·ª´ x·∫•u
          );

          interaction.reply(`ƒê√£ x√≥a t·∫•t c·∫£ t·ª´ x·∫•u kh·ªèi danh s√°ch.`);
          break;

        default:
          throw new Error('L·ªánh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.');
      }
    } catch (error) {
      console.error(error);
      const errorMessage = 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω l·ªánh.';
      interaction.reply(errorMessage);
    }
  }
};










// const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
// const fs = require('fs');
// const tinycolor = require('tinycolor2');
// const AntiwordSettings = require('./schemas/antiwordSchema');

// const badWordsFile = 'badwords.json';
// let badWords = [];

// // Ki·ªÉm tra xem t·ªáp badwords.json c√≥ t·ªìn t·∫°i kh√¥ng, n·∫øu kh√¥ng th√¨ t·∫°o m·ªõi
// if (fs.existsSync(badWordsFile)) {
//   try {
//     const data = fs.readFileSync(badWordsFile, 'utf8');
//     badWords = JSON.parse(data);
//   } catch (err) {
//     console.error('L·ªói khi ƒë·ªçc t·ªáp badwords.json:', err);
//   }
// }

// module.exports = {
//   data: new SlashCommandBuilder()
//     .setName('anti-swear')
//     .setDescription('ü§¨ | C·∫•u h√¨nh h·ªá th·ªëng ch·ªëng ch·ª≠i th·ªÅ')
//     .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
//     .addSubcommand(command => command.setName("addword").setDescription('ü§¨ | Th√™m m·ªôt t·ª´ v√†o danh s√°ch t·ª´ x·∫•u').addStringOption(option => option.setName('badword').setDescription('T·ª´ b·∫°n mu·ªën th√™m').setRequired(true)))
//     .addSubcommand(command => command.setName('channel').setDescription('ü§¨ | K√™nh ki·ªÉm duy·ªát ng∆∞·ªùi d√πng ƒë√£ d√πng t·ª´ x·∫•u').addChannelOption(option => option.setName('channels').setDescription('k√™nh m√† b·∫°n mu·ªën tin nh·∫Øn ƒë·∫øn').setRequired(true)))
//     .addSubcommand(command => command.setName('remove').setDescription('ü§¨ | X√≥a m·ªôt t·ª´ kh·ªèi danh s√°ch t·ª´ x·∫•u').addStringOption(option => option.setName('word').setDescription('T·ª´ c·∫ßn x√≥a').setRequired(true)))
//     .addSubcommand(command => command.setName('list').setDescription('ü§¨ | Xem danh s√°ch t·ª´ x·∫•u')),

//   async execute(interaction) {
//     const sub = interaction.options.getSubcommand();
//     const channel = interaction.options.getChannel('channel')

//     try {
//       switch (sub) {
//         case "addword":
//           const badword = interaction.options.getString('badword').toLowerCase();

//           if (badWords.includes(badword)) {
//             const already = new EmbedBuilder()
//               .setDescription(`\`‚ùó ${badword} ƒë√£ n·∫±m trong danh s√°ch t·ª´ x·∫•u!\``)
//               .setColor('#FF0000') // Set a default color
//               .setTimestamp();

//             return interaction.reply({ embeds: [already] });
//           }

//           badWords.push(badword);
//           fs.writeFileSync(badWordsFile, JSON.stringify(badWords, null, 2));

//           const embedAdd = new EmbedBuilder()
//             .setColor('#00FF00') // Set a success color
//             .setDescription(` Th√†nh c√¥ng!\n ƒê√£ th√™m **${badword}** v√†o danh s√°ch t·ª´ x·∫•u`);

//           interaction.reply({ embeds: [embedAdd] });
//           break;

//         case "remove":
//           const word = interaction.options.getString('word').toLowerCase();

//           if (!badWords.includes(word)) {
//             const noData = new EmbedBuilder()
//               .setColor('#FF0000') // Set a default color
//               .setDescription(`\`‚ùó ${word} kh√¥ng c√≥ trong danh s√°ch t·ª´ x·∫•u!\``)
//               .setTimestamp();

//             return interaction.reply({ embeds: [noData] });
//           }

//           badWords.splice(badWords.indexOf(word), 1);
//           fs.writeFileSync(badWordsFile, JSON.stringify(badWords, null, 2));

//           const embedRemove = new EmbedBuilder()
//             .setColor('#00FF00') // Set a success color
//             .setDescription(`<:tickred51:1240060253240819843> Th√†nh c√¥ng!\n<:_verified_:1240060278863958056> ƒê√£ x√≥a **${word}** kh·ªèi danh s√°ch t·ª´ x·∫•u`)
//             .setTimestamp();

//           await interaction.reply({ embeds: [embedRemove] });
//           break;

//         case "list":
//           const nowords = new EmbedBuilder()
//             .setColor('#FF0000') // Set a default color
//             .setDescription(`\`‚ùó Kh√¥ng c√≥ t·ª´ n√†o trong danh s√°ch t·ª´ x·∫•u!\``)
//             .setTimestamp();

//           if (badWords.length === 0) return interaction.reply({ embeds: [nowords] });
//           else {
//             const listembed = new EmbedBuilder()
//               .setAuthor({ name: `ƒê√¢y l√† danh s√°ch nh·ªØng t·ª´ x·∫•u`, iconURL: interaction.guild.iconURL() })
//               .setDescription(`*${badWords.join('\n')}*`)
//               .setColor('#00FF00'); // Set a success color

//             await interaction.reply({ embeds: [listembed] });
//           }
//           break;

//         case "channel":
//           const selectedChannel = interaction.options.getChannel('channels');
//           if (!selectedChannel) {
//               return interaction.reply("H√£y ch·ªçn m·ªôt k√™nh.");
//           }
//           interaction.reply(`Tin nh·∫Øn s·∫Ω ƒë∆∞·ª£c g·ª≠i v√†o k√™nh ${selectedChannel}.`);
//           interaction.client.selectedChannel = selectedChannel; // L∆∞u tr·ªØ k√™nh ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ s·ª≠ d·ª•ng messageCreate.js
//           break;

        

//         default:
//           throw new Error('L·ªánh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.');
//       }

//       // Ki·ªÉm tra t·ª´ ng·ªØ x·∫•u trong n·ªôi dung tin nh·∫Øn
//       if (interaction.isCommand() && interaction.inGuild() && badWords.length > 0 && sub !== "list") {
//         let messageContent = "";
//         if (sub === "add") {
//           messageContent = interaction.options.getString('badword').toLowerCase();
//         }

//         for (const word of badWords) {
//           if (messageContent.includes(word)) {
//             // Send an embed message to the user
//             const embedWarning = new EmbedBuilder()
//               .setColor('#FF0000') // Set a warning color
//               .setDescription(`B·∫°n ƒë√£ th√™m t·ª´ "${word}" l√† t·ª´ x·∫•u.`)
//               .setTimestamp();

//             interaction.reply({ embeds: [embedWarning] });
//             return; // D·ª´ng x·ª≠ l√Ω th√™m ƒë·ªÉ tr√°nh th·ª±c hi·ªán h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh
//           }
//         }
//       }
//     } catch (error) {
//       console.error(error);
//       const errorMessage = 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω l·ªánh.';
//       interaction.reply(errorMessage);
//     }
//   }
// };
