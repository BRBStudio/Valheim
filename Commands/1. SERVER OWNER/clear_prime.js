const { SlashCommandBuilder, PermissionsBitField } = require("discord.js");
const interactionError = require('../../Events/WebhookError/interactionError');
const { checkOwner } = require(`../../permissionCheck`)

module.exports = {
    data: new SlashCommandBuilder()
        .setName("clear_prime")
        .setDescription("üóëÔ∏è | X√≥a t·∫•t c·∫£ tin nh·∫Øn trong k√™nh")
        .setDMPermission(false)
        .addIntegerOption(option =>
            option.setName('amount')
                .setDescription('S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn x√≥a')
                .setRequired(true)),

    async execute(interaction) {

            const hasPermission = await checkOwner(interaction);
            if (!hasPermission) return;

            // Tr√¨ ho√£n tr·∫£ l·ªùi ƒë·ªÉ gi·∫£m chi ph√≠ API
            await interaction.deferReply({ ephemeral: true });

            // L·∫•y k√™nh v√† kh·ªüi t·∫°o b·ªô ƒë·∫øm cho c√°c tin nh·∫Øn ƒë√£ x√≥a
            const channel = interaction.channel;
            const amount = interaction.options.getInteger('amount');
            let deletedSize = 0;

        try {
            // L·∫•y t·∫•t c·∫£ tin nh·∫Øn v√† x√≥a ch√∫ng m·ªôt c√°ch ƒë∆°n l·∫ª
            const fetchedMessages = await channel.messages.fetch({ limit: amount });
            await Promise.all(fetchedMessages.map(async (message) => {
                await message.delete();
                deletedSize++;
            }));
        } catch (error) {
            // console.error("L·ªói khi x√≥a tin nh·∫Øn:", error);
            // return interaction.followUp({
            //   content: "ƒê√£ x·∫£y ra l·ªói khi x√≥a tin nh·∫Øn.",
            // });
            interactionError.execute(interaction, error, client);
        }

            // G·ª≠i th√¥ng b√°o sau khi ƒë√£ x√≥a tin nh·∫Øn
            await interaction.followUp({
            content: `ƒê√£ x√≥a th√†nh c√¥ng **${deletedSize}** tin nh·∫Øn trong k√™nh n√†y.`,
        });
    },
};
