const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const crypto = require('crypto');
const User = require('../../schemas/premiumUserSchema');
const PremiumCode = require('../../schemas/premiumSchema');
const moment = require('moment');
const authorizedUsers = ['940104526285910046', '1215380543815024700']; // '1215380543815024700'

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// H√†m n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o m√£ cao c·∫•p ng·∫´u nhi√™n. N√≥ s·ª≠ d·ª•ng crypto.randomBytes ƒë·ªÉ t·∫°o m·ªôt chu·ªói hex ng·∫´u nhi√™n v√† chuy·ªÉn ƒë·ªïi n√≥ th√†nh ch·ªØ hoa.
function generatePremiumCode(length = 16) {
    return crypto.randomBytes(length / 2).toString('hex').toUpperCase();
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('premium')
        .setDescription('üèÜ | Qu·∫£n l√Ω ƒëƒÉng k√Ω tr·∫£ ph√≠')
        .addSubcommand(subcommand =>
            subcommand.setName('create')
                .setDescription('T·∫°o m√£ cao c·∫•p')
                .addStringOption(option => 
                    option.setName('duration')
                        .setDescription('Th·ªùi h·∫°n c·ªßa m√£ cao c·∫•p')
                        .setRequired(true)
                        .addChoices(
                            { name: '30 ph√∫t', value: 'minutely'},
                            { name: '1 tu·∫ßn', value: 'weekly' },
                            { name: '1 th√°ng', value: 'monthly' },
                            { name: '1 nƒÉm', value: 'yearly' },
                            { name: 'vƒ©nh vi·ªÖn', value: 'lifetime' }
                        ))
        )
        .addSubcommand(subcommand =>
            subcommand.setName('renew')
                .setDescription('Gia h·∫°n tr·∫°ng th√°i cao c·∫•p c·ªßa ng∆∞·ªùi d√πng d·ª±a tr√™n g√≥i cu·ªëi c√πng c·ªßa h·ªç')
                .addStringOption(option =>
                    option.setName('code')
                        .setDescription('Nh·∫≠p m√£ gia h·∫°n c·ªßa b·∫°n')
                        .setRequired(true))
        )
        .addSubcommand(subcommand =>
            subcommand.setName('view')
                .setDescription('Ki·ªÉm tra tr·∫°ng th√°i cao c·∫•p c·ªßa b·∫°n')
        )
        .addSubcommand(subcommand =>
            subcommand.setName('redeem')
                .setDescription('ƒê·ªïi m√£ cao c·∫•p')
                .addStringOption(option => 
                    option.setName('code')
                        .setDescription('M√£ cao c·∫•p b·∫°n mu·ªën ƒë·ªïi')
                        .setRequired(true))
        )
        .addSubcommand(subcommand =>
            subcommand.setName('gift')
                .setDescription('T·∫∑ng g√≥i ƒëƒÉng k√Ω tr·∫£ ph√≠ cho ng∆∞·ªùi d√πng kh√°c')
                .addUserOption(option => 
                    option.setName('recipient')
                        .setDescription('Ng∆∞·ªùi d√πng nh·∫≠n ƒë∆∞·ª£c qu√† t·∫∑ng cao c·∫•p')
                        .setRequired(true))
                .addStringOption(option => 
                    option.setName('code')
                        .setDescription('M√£ cao c·∫•p ƒë·ªÉ t·∫∑ng qu√†')
                        .setRequired(true))
        )
        .addSubcommand(subcommand =>
            subcommand.setName('revoke')
                .setDescription('Thu h·ªìi quy·ªÅn Premium c·ªßa ng∆∞·ªùi d√πng')
                .addUserOption(option =>
                    option.setName('user')
                        .setDescription('Ng∆∞·ªùi d√πng c·∫ßn thu h·ªìi quy·ªÅn Premium')
                        .setRequired(true))
        )
        
        
        .addSubcommand(subcommand =>
            subcommand.setName('users')
                .setDescription('Li·ªát k√™ t·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ tr·∫°ng th√°i cao c·∫•p')
        ),
    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'create':
                await handleCreate(interaction);
                break;
            case 'renew':
                await handleRenew(interaction);
                break;
            case 'gift':
                await handleGift(interaction);
                break;
            case 'view':
                await handleView(interaction);
                break;
            case 'redeem':
                await handleRedeem(interaction);
                break;
            case 'users':
                await handleUsers(interaction);
                break;
            case 'revoke':
                await handleRevoke(interaction);
                break;
        }
    },
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// X·ª≠ l√Ω l·ªánh create: H√†m handleCreate ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x·ª≠ l√Ω l·ªánh t·∫°o m√£ cao c·∫•p. N√≥ ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒë∆∞·ª£c ·ªßy quy·ªÅn kh√¥ng v√† sau ƒë√≥ t·∫°o m√£ cao c·∫•p d·ª±a tr√™n th·ªùi h·∫°n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh. N√≥ c≈©ng x√¢y d·ª±ng m·ªôt embed ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin m√£ m·ªõi v√† g·ª≠i n√≥ d∆∞·ªõi d·∫°ng tin nh·∫Øn ·∫©n.
async function handleCreate(interaction) {
    if (!authorizedUsers.includes(interaction.user.id)) {
        await interaction.reply({ content: 'B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p t·∫°o m√£ cao c·∫•p.', ephemeral: true });
        return;
    }

    const duration = interaction.options.getString('duration');
    const premiumCodeValue = generatePremiumCode();

    let embedTitle, embedDescription, expirationTime;
    switch (duration) {
        case 'minutely':
            embedTitle = 'M√£ t·∫°m th·ªùi ƒë√£ ƒë∆∞·ª£c t·∫°o';
            expirationTime = moment().add(30, 'minutes').format('YYYY-MM-DD HH:mm:ss');
            break;
        case 'weekly':
            embedTitle = 'M√£ m·ªôt tu·∫ßn ƒë√£ ƒë∆∞·ª£c t·∫°o';
            expirationTime = moment().add(7, 'days').format('YYYY-MM-DD HH:mm:ss');
            break;
        case 'monthly':
            embedTitle = 'M√£ h√†ng th√°ng ƒë√£ ƒë∆∞·ª£c t·∫°o';
            expirationTime = moment().add(1, 'months').format('YYYY-MM-DD HH:mm:ss');
            break;
        case 'yearly':
            embedTitle = 'M√£ h√†ng nƒÉm ƒë√£ ƒë∆∞·ª£c t·∫°o';
            expirationTime = moment().add(1, 'years').format('YYYY-MM-DD HH:mm:ss');
            break;
        case 'lifetime':
            embedTitle = 'M√£ vƒ©nh vi·ªÖn ƒë√£ ƒë∆∞·ª£c t·∫°o';
            expirationTime = moment().format('YYYY-MM-DD HH:mm:ss');
            break;
        default:
            await interaction.reply({ content: 'Th·ªùi gian kh√¥ng h·ª£p l·ªá.', ephemeral: true });
            return;
    }

    // N·∫øu kh√¥ng ph·∫£i l√† m√£ vƒ©nh vi·ªÖn, th√™m m√¥ t·∫£ v·ªÅ th·ªùi gian h·∫øt hi·ªáu l·ª±c
    if (duration !== 'lifetime') {
        embedDescription = `**M√£:** \`${premiumCodeValue}\`\n\n**Th·ªùi gian c√≥ hi·ªáu l·ª±c:** \n${getExpirationDescription(duration)}\n\n**Ng√†y gi·ªù ph√°t h√†nh m√£:** \n${moment().format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YYYY')}\n\n**Ng√†y m√£ h·∫øt h·∫°n:** \n${moment(expirationTime).format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YYYY')}`;
    } else {
        embedDescription = `**M√£:** \`${premiumCodeValue}\`\n\n**Th·ªùi gian c√≥ hi·ªáu l·ª±c:** \n${getExpirationDescription(duration)}\n\n**Ng√†y gi·ªù ph√°t h√†nh m√£:** \n${moment().format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YYYY')}`;
    }

    try {
        const premiumCode = await PremiumCode.create({
            code: premiumCodeValue,
            isUsed: false,
            user: null,
            duration: duration,
            expirationTime: expirationTime // L∆∞u th√¥ng tin th·ªùi gian h·∫øt hi·ªáu l·ª±c v√†o c∆° s·ªü d·ªØ li·ªáu
        });

        const embed = new EmbedBuilder()
            .setColor('#00FFFF')
            .setTitle(embedTitle)
            .setDescription(embedDescription)
            .setTimestamp();

        await interaction.reply({ embeds: [embed], ephemeral: true });
        
        // Tr·∫£ v·ªÅ th√¥ng tin m√£ v√† th·ªùi gian h·∫øt hi·ªáu l·ª±c
        return {
            code: premiumCodeValue,
            expirationTime: expirationTime,
            duration: duration
        };
        
    } catch (error) {
        console.error('L·ªói t·∫°o m√£ cao c·∫•p:', error);
        await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o m√£ cao c·∫•p. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// H√†m getExpirationDescription: H√†m n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·∫•y m√¥ t·∫£ v·ªÅ th·ªùi gian h·∫øt hi·ªáu l·ª±c d·ª±a tr√™n lo·∫°i m√£ cao c·∫•p
function getExpirationDescription(duration) {
    switch (duration) {
        case 'minutely':
            return '30 ph√∫t';
        case 'weekly':
            return '7 ng√†y';
        case 'monthly':
            return '1 th√°ng';
        case 'yearly':
            return '1 nƒÉm';
        case 'lifetime':
            return 'vƒ©nh vi·ªÖn';
        default:
            return '';
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// X·ª≠ l√Ω l·ªánh renew: H√†m handleRenew ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ gia h·∫°n tr·∫°ng th√°i cao c·∫•p c·ªßa m·ªôt ng∆∞·ªùi d√πng d·ª±a tr√™n g√≥i cu·ªëi c√πng c·ªßa h·ªç. N√≥ ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng v√† sau ƒë√≥ c·∫≠p nh·∫≠t th√¥ng tin v·ªÅ th·ªùi gian h·∫øt hi·ªáu l·ª±c trong c∆° s·ªü d·ªØ li·ªáu.
async function handleRenew(interaction) {
    // if (!authorizedUsers.includes(interaction.user.id)) {
    //     await interaction.reply({ content: 'Ch·ªâ ng∆∞·ªùi d√πng ƒë∆∞·ª£c ·ªßy quy·ªÅn m·ªõi c√≥ th·ªÉ gia h·∫°n g√≥i cao c·∫•p.', ephemeral: true });
    //     return;
    // }

    // const userToRenew = interaction.options.getUser('user', true);
    // try {
    //     const userDocument = await User.findOne({ discordId: userToRenew.id });

    //     if (!userDocument || !userDocument.isPremium) {
    //         await interaction.reply({ content: `${userToRenew.username} kh√¥ng c√≥ g√≥i tr·∫£ ph√≠ ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ gia h·∫°n.`, ephemeral: true });
    //         return;
    //     }

    //     const now = new Date();
    //     let newExpirationDate;

    //     switch (userDocument.planType) {
    //         case 'minutely':
    //             newExpirationDate = moment(now).add(1, 'minutes').toDate();
    //             break;
    //         case 'weekly':
    //             newExpirationDate = moment(now).add(1, 'weeks').toDate();
    //             break;
    //         case 'monthly':
    //             newExpirationDate = moment(now).add(1, 'months').toDate();
    //             break;
    //         case 'yearly':
    //             newExpirationDate = moment(now).add(1, 'years').toDate();
    //             break;
    //         case 'lifetime':
    //             await interaction.reply({ content: `${userToRenew.username} c√≥ k·∫ø ho·∫°ch tr·ªçn ƒë·ªùi v√† kh√¥ng c·∫ßn gia h·∫°n.`, ephemeral: true });
    //             return;
    //         default:
    //             await interaction.reply({ content: 'Lo·∫°i g√≥i kh√¥ng x√°c ƒë·ªãnh ho·∫∑c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·ªÉ gia h·∫°n.', ephemeral: true });
    //             return;
    //     }

    //     userDocument.premiumUntil = newExpirationDate;
    //     await userDocument.save();

    //     await interaction.reply({
    //         content: `${userToRenew.username}'s g√≥i tr·∫£ ph√≠ ƒë√£ ƒë∆∞·ª£c gia h·∫°n th√†nh c√¥ng cho ƒë·∫øn khi ${moment(newExpirationDate).format('DD/MM/YY')}.`,
    //         ephemeral: true
    //     });
    // } catch (error) {
    //     console.error('L·ªói khi gia h·∫°n g√≥i tr·∫£ ph√≠:', error);
    //     await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi gia h·∫°n g√≥i cao c·∫•p. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
    // }
    const userToRenew = interaction.user; // Ng∆∞·ªùi d√πng th·ª±c hi·ªán l·ªánh
    const renewalCode = interaction.options.getString('code', true);

    try {
        const userDocument = await User.findOne({ discordId: userToRenew.id });

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ g√≥i premium kh√¥ng
        if (!userDocument || !userDocument.isPremium) {
            await interaction.reply({ content: `${userToRenew.username} kh√¥ng c√≥ g√≥i tr·∫£ ph√≠ ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ gia h·∫°n.`, ephemeral: true });
            return;
        }

        // Ki·ªÉm tra xem m√£ gia h·∫°n c√≥ t·ªìn t·∫°i v√† ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng
        const premiumCodeDocument = await PremiumCode.findOne({ code: renewalCode, isUsed: false });

        if (!premiumCodeDocument) {
            await interaction.reply({ content: 'M√£ gia h·∫°n kh√¥ng x√°c ƒë·ªãnh ho·∫∑c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.', ephemeral: true });
            return;
        }

        // Ki·ªÉm tra m√£ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        const currentExpirationDate = userDocument.premiumUntil || new Date();
        const now = new Date();
        let remainingTime = 0;

        if (currentExpirationDate > now) {
            remainingTime = moment(currentExpirationDate).diff(now);
        }

        // Ki·ªÉm tra th·ªùi gian gia h·∫°n d·ª±a tr√™n lo·∫°i m√£
        let additionalTime;

        switch (premiumCodeDocument.duration) {
            case 'minutely':
                additionalTime = moment.duration(30, 'minutes').asMilliseconds();
                break;
            case 'weekly':
                additionalTime = moment.duration(7, 'days').asMilliseconds();
                break;
            case 'monthly':
                additionalTime = moment.duration(1, 'months').asMilliseconds();
                break;
            case 'yearly':
                additionalTime = moment.duration(1, 'years').asMilliseconds();
                break;
            case 'lifetime':
                // ƒê·ªëi v·ªõi m√£ tr·ªçn ƒë·ªùi, ƒë·∫∑t ng√†y h·∫øt h·∫°n r·∫•t xa trong t∆∞∆°ng lai
                additionalTime = moment.duration(100, 'years').asMilliseconds();
                break;
            default:
                await interaction.reply({ content: 'M√£ gia h·∫°n kh√¥ng x√°c ƒë·ªãnh ho·∫∑c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.', ephemeral: true });
                return;
        }

        // C·ªông d·ªìn th·ªùi gian m√£
        const newExpirationDate = moment(now).add(remainingTime + additionalTime, 'milliseconds').toDate();
        
        userDocument.premiumUntil = newExpirationDate;
        await userDocument.save();

        // ƒê√°nh d·∫•u m√£ gia h·∫°n l√† ƒë√£ s·ª≠ d·ª•ng
        premiumCodeDocument.isUsed = true;
        await premiumCodeDocument.save();

        await interaction.reply({
            content: `G√≥i tr·∫£ ph√≠ c·ªßa ${userToRenew.username} ƒë√£ ƒë∆∞·ª£c gia h·∫°n th√†nh c√¥ng cho ƒë·∫øn ${moment(newExpirationDate).format('[l√∫c] HH:mm [ng√†y] DD/MM/YYYY')}.`,
            ephemeral: true
        }); // Ng√†y gi·ªù ph√°t h√†nh m√£:** \n${moment().format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YYYY')}\n\n**Ng√†y m√£ h·∫øt h·∫°n:** \n${moment(expirationTime).format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YYYY')}
    } catch (error) {
        console.error('L·ªói khi gia h·∫°n g√≥i tr·∫£ ph√≠:', error);
        await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi gia h·∫°n g√≥i cao c·∫•p. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// X·ª≠ l√Ω l·ªánh view: H√†m handleView ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin v·ªÅ tr·∫°ng th√°i cao c·∫•p c·ªßa ng∆∞·ªùi d√πng, bao g·ªìm th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa g√≥i cao c·∫•p.
async function handleView(interaction) {
    const discordId = interaction.user.id;
    try {
        const user = await User.findOne({ discordId: discordId });

        if (user && user.isPremium) {
            const now = new Date();
            if (user.premiumUntil && now > user.premiumUntil) {
                // Premium ƒë√£ h·∫øt h·∫°n
                user.isPremium = false;
                user.premiumSince = null;
                user.premiumUntil = null;
                await user.save();
                await interaction.reply({ content: 'G√≥i Premium c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n.', ephemeral: true });
            } else {
                // Still premium
                let premiumSince = 'Kh√¥ng c√≥ s·∫µn';
                let premiumUntil = 'vƒ©nh vi·ªÖn';
                
                if (user.premiumSince) {
                    premiumSince = moment(user.premiumSince).format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YY');
                }

                if (user.premiumUntil) {
                    premiumUntil = moment(user.premiumUntil).format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YY');
                }

                const embed = new EmbedBuilder()
                    .setColor('#00FF00')
                    .setTitle(`${interaction.user.username} Tr·∫°ng th√°i cao c·∫•p`)
                    .setDescription('Chi ti·∫øt th√†nh vi√™n cao c·∫•p c·ªßa b·∫°n nh∆∞ sau:')
                    .addFields(
                        { name: 'Th·ªùi gian premium k√≠ch ho·∫°t ', value: premiumSince, inline: false },
                        { name: 'Th·ªùi gian premium h·∫øt h·∫°n', value: premiumUntil, inline: false },
                    )
                    .setTimestamp();

                await interaction.reply({ embeds: [embed], ephemeral: false });
            }
        } else {
            await interaction.reply({ content: 'B·∫°n hi·ªán kh√¥ng c√≥ t∆∞ c√°ch th√†nh vi√™n Premium ƒëang ho·∫°t ƒë·ªông.', ephemeral: true });
        }
    } catch (error) {
        console.error('L·ªói khi t√¨m n·∫°p tr·∫°ng th√°i cao c·∫•p:', error);
        await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra tr·∫°ng th√°i cao c·∫•p c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// X·ª≠ l√Ω l·ªánh redeem: H√†m handleRedeem ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë·ªïi m√£ cao c·∫•p. N√≥ ki·ªÉm tra xem m√£ c√≥ t·ªìn t·∫°i v√† ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng, sau ƒë√≥ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng v√† m√£ trong c∆° s·ªü d·ªØ li·ªáu.

async function handleRedeem(interaction) {
    const code = interaction.options.getString('code', true);

    try {
        const premiumCode = await PremiumCode.findOne({ code: code, isUsed: false });

        if (!premiumCode) {
            await interaction.reply({ content: 'M√£ cao c·∫•p kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.', ephemeral: true });
            return;
        }

        const now = new Date();
        let newExpirationDate;

        switch (premiumCode.duration) {
            case 'minutely':
                newExpirationDate = moment(now).add(30, 'minutes').toDate();
                break;
            case 'weekly':
                newExpirationDate = moment(now).add(7, 'days').toDate();
                break;
            case 'monthly':
                newExpirationDate = moment(now).add(1, 'months').toDate();
                break;
            case 'yearly':
                newExpirationDate = moment(now).add(1, 'years').toDate();
                break;
            default:
                newExpirationDate = null;
        }

        if (!newExpirationDate) {
            await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒë·ªïi m√£ cao c·∫•p. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
            return;
        }

        const userDocument = await User.findOneAndUpdate(
            { discordId: interaction.user.id },
            {
                isPremium: true,
                planType: premiumCode.duration,
                premiumSince: now,
                premiumUntil: newExpirationDate,
            },
            { upsert: true, new: true }
        );

        premiumCode.isUsed = true;
        premiumCode.user = interaction.user.id;
        await premiumCode.save();

        const embed = new EmbedBuilder()
            .setColor('#00FFFF')
            .setTitle('M√£ cao c·∫•p ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh c√¥ng!')
            .setDescription(`**M√£:** \`${code}\`\n\n**Th·ªùi gian c√≥ hi·ªáu l·ª±c:**\n${getExpirationDescription(premiumCode.duration)}\n\n**Ng√†y gi·ªù k√≠ch ho·∫°t m√£**:\nv√†o l√∫c ${moment(now).format('HH:mm:ss [ng√†y] DD/MM/YYYY')} \n\n**Ng√†y gi·ªù h·∫øt h·∫°n:**\nv√†o l√∫c ${moment(newExpirationDate).format('HH:mm:ss [ng√†y] DD/MM/YYYY')}`)
            .setTimestamp();

        await interaction.reply({ embeds: [embed], ephemeral: true });

    } catch (error) {
        console.error('L·ªói khi ƒë·ªïi m√£ cao c·∫•p:', error);
        await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒë·ªïi m√£ cao c·∫•p. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// x·ª≠ k√Ω s·ª± ki·ªán handleGift: h√†m handleGift ƒë∆∞·ª£c s·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng mu·ªën t·∫∑ng m·ªôt g√≥i ƒëƒÉng k√Ω tr·∫£ ph√≠ cho ng∆∞·ªùi kh√°c trong ·ª©ng d·ª•ng discord
async function handleGift(interaction) {
    const recipientUser = interaction.options.getUser('recipient', true);
    const premiumCodeValue = interaction.options.getString('code').toUpperCase();

    try {
        const premiumCode = await PremiumCode.findOne({ code: premiumCodeValue });

        if (!premiumCode) {
            await interaction.reply({ content: 'M√£ cao c·∫•p ƒë∆∞·ª£c cung c·∫•p kh√¥ng t·ªìn t·∫°i.', ephemeral: true });
            return;
        }

        if (premiumCode.isUsed) {
            await interaction.reply({ content: 'M√£ cao c·∫•p ƒë∆∞·ª£c cung c·∫•p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.', ephemeral: true });
            return;
        }

        const recipient = await interaction.client.users.fetch(recipientUser.id);
        const expirationTime = premiumCode.duration === 'lifetime' ? 'vƒ©nh vi·ªÖn' : moment().add(1, premiumCode.duration).format('HH:mm [ng√†y] DD/MM/YYYY');
        const durationDescription = getExpirationDescription(premiumCode.duration);

        // Ki·ªÉm tra n·∫øu l√† m√£ vƒ©nh vi·ªÖn th√¨ kh√¥ng hi·ªÉn th·ªã ng√†y h·∫øt h·∫°n
        const fields = [];

        // Th√™m tr∆∞·ªùng "Ng√†y gi·ªù ph√°t h√†nh m√£"
        fields.push({ name: 'Ng√†y gi·ªù ph√°t h√†nh m√£', value: moment().format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YYYY'), inline: false });

        // N·∫øu kh√¥ng ph·∫£i l√† m√£ vƒ©nh vi·ªÖn th√¨ hi·ªÉn th·ªã ng√†y h·∫øt h·∫°n
        if (premiumCode.duration !== 'lifetime') {
            const expirationDate = moment().add(1, premiumCode.duration);
            const expirationFormatted = expirationDate.format('HH:mm [ng√†y] DD/MM/YYYY');
            fields.push({ name: 'Ng√†y m√£ h·∫øt h·∫°n', value: expirationFormatted, inline: false });
        }

        // Th√™m tr∆∞·ªùng Premium Level sau c√°c tr∆∞·ªùng kh√°c
        fields.push({ name: 'Premium Level', value: durationDescription, inline: true });

        const giftEmbed = new EmbedBuilder()
            .setColor('#00FFFF')
            .setTitle('üéÅ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c m√£ ƒëƒÉng k√Ω tr·∫£ ph√≠!')
            .setDescription(`Xin ch√∫c m·ª´ng, b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫∑ng m·ªôt g√≥i ƒëƒÉng k√Ω tr·∫£ ph√≠ t·ª´ ng∆∞·ªùi d√πng ${interaction.user.username} v·ªõi m√£ sau: \`${premiumCodeValue}\``)
            .addFields(
                { name: 'Th·ªùi gian c√≥ hi·ªáu l·ª±c', value: durationDescription, inline: true },
                { name: 'Ng√†y gi·ªù ph√°t h√†nh m√£', value: moment(premiumCode.createdAt).format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YYYY'), inline: false },
                { name: 'Ng√†y m√£ h·∫øt h·∫°n', value: expirationTime, inline: false }
            )
            .setTimestamp();


        await recipient.send({ embeds: [giftEmbed] }).catch(error => console.log(`Kh√¥ng th·ªÉ g·ª≠i DM cho ng∆∞·ªùi d√πng ${recipientUser.username}:`, error));

        await interaction.reply({
            content: `B·∫°n ƒë√£ t·∫∑ng th√†nh c√¥ng g√≥i ƒëƒÉng k√Ω tr·∫£ ph√≠ cho ${recipientUser.username}. H·ªç ƒë√£ ƒë∆∞·ª£c th√¥ng b√°o.`,
            ephemeral: true
        });

    } catch (error) {
        console.error('L·ªói khi x·ª≠ l√Ω qu√† t·∫∑ng cao c·∫•p:', error);
        await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω qu√† t·∫∑ng cao c·∫•p. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
    }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// X·ª≠ l√Ω l·ªánh revoke: H√†m handleRevoke ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ thu h·ªìi quy·ªÅn Premium c·ªßa m·ªôt ng∆∞·ªùi d√πng. N√≥ ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng v√† sau ƒë√≥ c·∫≠p nh·∫≠t th√¥ng tin trong c∆° s·ªü d·ªØ li·ªáu.
async function handleRevoke(interaction) {
    if (!authorizedUsers.includes(interaction.user.id)) {
        await interaction.reply({ content: 'Ch·ªâ ng∆∞·ªùi d√πng ƒë∆∞·ª£c ·ªßy quy·ªÅn m·ªõi c√≥ th·ªÉ thu h·ªìi quy·ªÅn Premium c·ªßa ng∆∞·ªùi d√πng.', ephemeral: true });
        return;
    }

    const userToRevoke = interaction.options.getUser('user', true);
    try {
        const userDocument = await User.findOne({ discordId: userToRevoke.id });

        if (!userDocument || !userDocument.isPremium) {
            await interaction.reply({ content: `${userToRevoke.username} kh√¥ng c√≥ g√≥i tr·∫£ ph√≠ ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ thu h·ªìi.`, ephemeral: true });
            return;
        }

        userDocument.isPremium = false;
        userDocument.premiumSince = null;
        userDocument.premiumUntil = null;
        await userDocument.save();

        await interaction.reply({
            content: `${userToRevoke.username}'s quy·ªÅn Premium ƒë√£ ƒë∆∞·ª£c thu h·ªìi th√†nh c√¥ng.`,
            ephemeral: true
        });
    } catch (error) {
        console.error('L·ªói khi thu h·ªìi quy·ªÅn Premium:', error);
        await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi thu h·ªìi quy·ªÅn Premium c·ªßa ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// X·ª≠ l√Ω l·ªánh users: H√†m handleUsers ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ li·ªát k√™ t·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ tr·∫°ng th√°i cao c·∫•p. N√≥ truy v·∫•n c∆° s·ªü d·ªØ li·ªáu ƒë·ªÉ l·∫•y th√¥ng tin v·ªÅ nh·ªØng ng∆∞·ªùi d√πng n√†y v√† t·∫°o m·ªôt embed ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch.
// async function handleUsers(interaction) {
//     try {
//         const premiumUsers = await User.find({ isPremium: true }).sort({ premiumSince: -1 });

//         if (premiumUsers.length === 0) {
//             await interaction.reply({ content: 'Hi·ªán t·∫°i kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o c√≥ ƒëƒÉng k√Ω Premium ƒëang ho·∫°t ƒë·ªông.', ephemeral: true });
//             return;
//         }

//         let usersList = premiumUsers.map((user, index) => {
//             const premiumSinceDate = user.premiumSince ? moment(user.premiumSince).format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YY') : 'kh√¥ng x√°c ƒë·ªãnh';
//             const premiumUntilDate = user.premiumUntil ? moment(user.premiumUntil).format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YY') : 'vƒ©nh vi·ªÖn';
//             return `${index + 1}. <@${user.discordId}>\n> ***Th·ªùi gian Premium k√≠ch ho·∫°t:***\n‚è∞ | __${premiumSinceDate}__\n> ***Th·ªùi gian Premium h·∫øt h·∫°n:***\n‚è∞ | __${premiumUntilDate}__`;
//         }).join('\n\n');

//         if (usersList.length > 2000) {
//             usersList = usersList.substring(0, 1997) + '...';
//         }

//         const embed = new EmbedBuilder()
//             .setColor('#00FFFF')
//             .setTitle('Danh s√°ch ng∆∞·ªùi d√πng cao c·∫•p')
//             .setDescription(usersList)
//             .setTimestamp();

//         await interaction.reply({ embeds: [embed] });
//     } catch (error) {
//         console.error('L·ªói truy xu·∫•t ng∆∞·ªùi d√πng cao c·∫•p:', error);
//         await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi t√¨m n·∫°p danh s√°ch ng∆∞·ªùi d√πng cao c·∫•p. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
//     }
// }
async function handleUsers(interaction) {
    try {
        const currentTimestamp = new Date(); // Th·ªùi ƒëi·ªÉm hi·ªán t·∫°i

        // L·∫•y danh s√°ch ng∆∞·ªùi d√πng Premium ƒë√£ s·∫Øp x·∫øp theo th·ªùi gian Premium t·ª´ m·ªõi ƒë·∫øn c≈©
        const premiumUsers = await User.find({ isPremium: true }).sort({ premiumSince: -1 });

        if (premiumUsers.length === 0) {
            await interaction.reply({ content: 'Hi·ªán t·∫°i kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o c√≥ ƒëƒÉng k√Ω Premium ƒëang ho·∫°t ƒë·ªông.', ephemeral: true });
            return;
        }

        let usersList = '';
        premiumUsers.forEach((user, index) => {
            const premiumSinceDate = user.premiumSince ? moment(user.premiumSince).format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YY') : 'kh√¥ng x√°c ƒë·ªãnh';
            const premiumUntilDate = user.premiumUntil ? moment(user.premiumUntil).format('[v√†o l√∫c] HH:mm [ng√†y] DD/MM/YY') : 'vƒ©nh vi·ªÖn';

            // Ki·ªÉm tra n·∫øu ng√†y h·∫øt h·∫°n Premium ƒë√£ qua th√¨ kh√¥ng th√™m v√†o danh s√°ch
            if (user.premiumUntil && user.premiumUntil < currentTimestamp) {
                return; // B·ªè qua ng∆∞·ªùi d√πng n√†y
            }

            // Th√™m th√¥ng tin ng∆∞·ªùi d√πng v√†o danh s√°ch
            usersList += `${index + 1}. <@${user.discordId}>\n> ***Th·ªùi gian Premium k√≠ch ho·∫°t:***\n‚è∞ | __${premiumSinceDate}__\n> ***Th·ªùi gian Premium h·∫øt h·∫°n:***\n‚è∞ | __${premiumUntilDate}__\n\n`;
        });

        if (usersList === '') {
            await interaction.reply({ content: 'Hi·ªán t·∫°i kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o c√≥ ƒëƒÉng k√Ω Premium ƒëang ho·∫°t ƒë·ªông.', ephemeral: true });
            return;
        }

        // Ki·ªÉm tra chi·ªÅu d√†i danh s√°ch tr∆∞·ªõc khi t·∫°o embed
        if (usersList.length > 2000) {
            usersList = usersList.substring(0, 1997) + '...';
        }

        const embed = new EmbedBuilder()
            .setColor('#00FFFF')
            .setTitle('Danh s√°ch ng∆∞·ªùi d√πng cao c·∫•p')
            .setDescription(usersList.trim()) // X√≥a kho·∫£ng tr·∫Øng th·ª´a ·ªü ƒë·∫ßu v√† cu·ªëi
            .setTimestamp();

        await interaction.reply({ embeds: [embed] });
    } catch (error) {
        console.error('L·ªói truy xu·∫•t ng∆∞·ªùi d√πng cao c·∫•p:', error);
        await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi t√¨m n·∫°p danh s√°ch ng∆∞·ªùi d√πng cao c·∫•p. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
    }
}
