const { EmbedBuilder, SlashCommandBuilder } = require("discord.js");
const { loadembeds, embedr, loadembedsff, nodt } = require(`../../Embeds/embedsDEV`)
const todoSchema = require("../../schemas/todoSchema");

module.exports = {
    moderatorOnly: true,
    data: new SlashCommandBuilder()
        .setName("todo")
        .setDescription("Qu·∫£n l√Ω danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n!")
        .setDMPermission(false)
        .addSubcommand(subcommand =>
            subcommand.setName("add")
                .setDescription("Th√™m nhi·ªám v·ª• v√†o danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n")
                .addStringOption(option =>
                    option.setName("task")
                        .setDescription("Nhi·ªám v·ª• c·∫ßn th√™m")
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand.setName("list")
                .setDescription("Ki·ªÉm tra danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n")
        )
        .addSubcommand(subcommand =>
            subcommand.setName("complete")
                .setDescription("X√≥a m·ªôt nhi·ªám v·ª• t·ª´ danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n")
                .addIntegerOption(option =>
                    option.setName("number")
                        .setDescription("Nh·∫≠p theo s·ªë th·ª© t·ª± c·ªßa vi·ªác l√†m")
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand.setName("clear")
                .setDescription("X√≥a t·∫•t c·∫£ nhi·ªám v·ª• c·ªßa b·∫°n kh·ªèi danh s√°ch vi·ªác c·∫ßn l√†m")
        ),

async execute(interaction) {
    const { options, guildId, user, member } = interaction;

    const sub = options.getSubcommand(["add", "list", "complete", "clear"]);
    const task = options.getString("task")
    const taskId = options.getInteger("number") - 1;
    const taskDate = new Date(interaction.createdTimestamp).toLocaleDateString();


    switch (sub) {
        case "add":

            try {
                let data = await todoSchema.findOne({ GuildID: guildId, UserID: interaction.member.id });
                if (!data) {
                    data = new todoSchema({
                        GuildID: guildId,
                        UserID: interaction.member.id,
                        Content: [
                            {
                                Task: task,
                                Date: taskDate
                            }
                        ],
                    });
                } else {
                    const taskContent = {
                        Task: task,
                        Date: taskDate
                    }
                    data.Content.push(taskContent);
                }
                await data.save();

                const loadembeds = new EmbedBuilder()
                    .setDescription(`‚è≥ Th√™m **${task}** v√†o danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n...`)
                    .setColor('DarkNavy')

                await interaction.reply({ embeds: [loadembeds] })

                const asdfembed = new EmbedBuilder()
                    .setColor(`DarkNavy`)
                    .setDescription(`‚úî Th√†nh c√¥ng! **${task}** ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n!`)
                    .setTimestamp()

                await interaction.editReply({ embeds: [asdfembed] });
            } catch (err) {
                console.log(err)
            }

            break;

        case "list":
            try {
                let data = await todoSchema.findOne({ GuildID: guildId, UserID: interaction.member.id });
                if (data) {
                    // const loadembeds = new EmbedBuilder()
                    //     .setDescription(`‚è≥ ƒêang t√¨m n·∫°p danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n...`)
                    //     .setColor('DarkNavy')

                    await interaction.reply({ embeds: [loadembeds] })

                    if (data.Content.length === 0) {
                        
                        // const embedr = new EmbedBuilder()
                        //     .setColor('DarkNavy')
                        //     .setDescription(`‚ùó\`B·∫°n kh√¥ng c√≥ danh s√°ch vi·ªác c·∫ßn l√†m!\``)

                        await interaction.editReply({ embeds: [embedr] });

                    } else {
                        const nembed = new EmbedBuilder()
                            .setColor('DarkNavy')
                            .setTitle(`üìù ƒê√¢y l√† danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n!`)
                            .setDescription(`${data.Content.map(
                                (w, i) =>
                                `> Nhi·ªám v·ª• #${i + 1}:
                            **${w.Task}**
                            *Ng√†y th√™m: ${w.Date}*\n\n
                            `
                            ).join(" ")}`)
                            .setTimestamp()
                            .setThumbnail(interaction.member.displayAvatarURL())

                        await interaction.editReply({ embeds: [nembed] })
                    }
                }
            } catch (err) {
                console.log(err)
            }

            break;

        case "complete":
            try {
                let data = await todoSchema.findOne({ GuildID: guildId, UserID: interaction.member.id });
                if (data) {
                    const loadembedsf = new EmbedBuilder()
                        .setDescription(`‚è≥ Ki·ªÉm tra nhi·ªám v·ª• #${taskId + 1} ra kh·ªèi danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n...`)
                        .setColor('DarkNavy')

                    await interaction.reply({ embeds: [loadembedsf] })

                    data.Content.splice(taskId, 1);
                    await data.save();

                    const asdf = new EmbedBuilder()
                        .setColor('DarkNavy')
                        .setThumbnail(interaction.member.displayAvatarURL())
                        .setDescription(`T·ªët l·∫Øm, nhi·ªám v·ª• #${taskId + 1} ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u!\n\n> Ch·∫°y /todo list ƒë·ªÉ xem danh s√°ch vi·ªác c·∫ßn l√†m ƒë∆∞·ª£c c·∫≠p nh·∫≠t c·ªßa b·∫°n!`)
                        .setTimestamp();

                    await interaction.editReply({ embeds: [asdf] });

                } else if (data.Content === null) {

                    // const loadembedsff = new EmbedBuilder()
                    //     .setDescription(`‚è≥ ƒêang ki·ªÉm tra danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n...`)
                    //     .setColor('DarkNavy')

                    await interaction.reply({ embeds: [loadembedsff] })

                    // const nodt = new EmbedBuilder()
                    //     .setColor('DarkNavy')
                    //     .setDescription(`‚ùó\`B·∫°n kh√¥ng c√≥ nhi·ªám v·ª• n√†o c·∫ßn x√≥a!\``)
                    //     .setTimestamp();

                    await interaction.editReply({ embeds: [nodt] });
                }
            } catch (err) {
                console.log(err)
            }
            break;

        case "clear":
            try {
                let data = await todoSchema.findOne({ GuildID: guildId, UserID: interaction.member.id });

                if (data) {

                    const loadembedsff = new EmbedBuilder()
                        .setDescription(`‚è≥ ƒêang x√≥a danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n...`)
                        .setColor('DarkNavy')

                    await interaction.reply({ embeds: [loadembedsff] })


                    await todoSchema.findOneAndDelete({ GuildID: guildId, UserID: interaction.member.id });

                    const asdfasdf = new EmbedBuilder()
                        .setColor('DarkNavy')
                        .setDescription(`‚úî Th√†nh c√¥ng!\n‚û• ƒê√£ x√≥a danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n!`)
                        .setTimestamp();

                    await interaction.editReply({ embeds: [asdfasdf] });

                } else {
                    const loademdbedsff = new EmbedBuilder()
                        .setDescription(`‚è≥ Ki·ªÉm tra danh s√°ch vi·ªác c·∫ßn l√†m c·ªßa b·∫°n...`)
                        .setColor('DarkNavy')

                    await interaction.reply({ embeds: [loademdbedsff] })

                    const ssss = new EmbedBuilder()
                        .setDescription(`‚ùó\`B·∫°n kh√¥ng c√≥ danh s√°ch vi·ªác c·∫ßn l√†m ƒë·ªÉ x√≥a!\``)
                        .setColor('DarkNavy')
                        .setTimestamp();

                    await interaction.editReply({ embeds: [ssss] });
                }
            } catch (err) {
                console.log(err)
            }
            break;
        }
    }
}

/// c·∫ßn s·ª≠a l·∫°i