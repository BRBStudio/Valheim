const { SlashCommandBuilder, PermissionsBitField, ChannelType, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, setPosition } = require("discord.js");
const User = require('../../schemas/premiumUserSchema');

module.exports = {
    data: new SlashCommandBuilder()
        .setName("setup-server")
        .setDMPermission(false)
        .setDescription("Thi·∫øt l·∫≠p to√†n b·ªô m√°y ch·ªß (nh√∫ng, k√™nh, v.v.)")
        // .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)

        .addStringOption((option) => option.setName("setup").setDescription("thi·∫øt l·∫≠p m√°y ch·ªß b·∫±ng l·ªánh!").setRequired(true).addChoices(

            { name: "C∆° b·∫£n", value: "basic" },
            { name: "N√¢ng cao", value: "advanced" },
            { name: "Cao c·∫•p", value: "premium" })),


    async execute(interaction) {
        
        // Ki·ªÉm tra xem t∆∞∆°ng t√°c ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi ho·∫∑c ho√£n l·∫°i ch∆∞a
        if (interaction.deferred || interaction.replied) {
            // N·∫øu ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi ho·∫∑c ho√£n l·∫°i, kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n·ªØa
            return;
        }

        // Ki·ªÉm tra xem t∆∞∆°ng t√°c c√≥ ph·∫£i l√† l·ªánh "setup-server" kh√¥ng
        if (interaction.commandName !== "setup-server") {
            // N·∫øu kh√¥ng ph·∫£i l√† l·ªánh "setup-server", kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông
            return;
        }

        // Ki·ªÉm tra xem bot c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n kh√¥ng
        if (!interaction.guild.members.me.permissions.has(PermissionsBitField.Flags.Administrator)) {
            await interaction.reply({ content: `T√¥i thi·∫øu quy·ªÅn ***QU·∫¢N TR·ªä VI√äN***, b·∫°n c·∫ßn c·∫•p quy·ªÅn n√†y cho t√¥i tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu.`, ephemeral: true });
            return;
        }

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ ph·∫£i l√† ch·ªß s·ªü h·ªØu c·ªßa m√°y ch·ªß kh√¥ng
        if (interaction.guild.ownerId !== interaction.user.id) {
            return await interaction.reply({ content: "L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu m√°y ch·ªß", ephemeral: true });
        }

        // // Danh s√°ch ID c·ªßa c√°c ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh n√†y
        // const allowedUserIds = ["1215380543815024700", "940104526285910046", "ID_nguoi_dung_1", "ID_nguoi_dung_2"];

        // // Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ trong danh s√°ch ƒë∆∞·ª£c ph√©p kh√¥ng
        // if (!allowedUserIds.includes(interaction.user.id))
        //     return await interaction.reply({ content: "L·ªánh n√†y ch·ªâ d√†nh cho dev", ephemeral: true });
        // if (interaction.user.id !== "1215380543815024700" && interaction.user.id !== "940104526285910046") return await interaction.reply({ content: "L·ªánh n√†y ch·ªâ d√†nh cho dev", ephemeral: true });

        const setup = interaction.options.getString("setup");

        switch (setup) {
            case "basic": {

                const basicEmbed = new EmbedBuilder()
                    .setColor("Orange")
                    .setTitle("‚ö†Ô∏è C·∫£nh b√°o t·∫°o m√°y ch·ªß c∆° b·∫£n ‚ö†Ô∏è")
                    .setDescription("***C·∫§P T·∫§T C·∫¢ C√ÅC QUY·ªÄN CHO BOT TR∆Ø·ªöC KHI TH·ª∞C HI·ªÜN ƒêI·ªÄU N√ÄY***\n\nNh·∫•p v√†o n√∫t x√°c nh·∫≠n ho·∫∑c ‚úÖ t·∫•t c·∫£ k√™nh/danh m·ª•c c√≥ th·ªÉ b·ªã x√≥a v√† thay th·∫ø ƒë·ªÉ thi·∫øt l·∫≠p m√°y ch·ªß n√†y!")
                    .setTimestamp()
                    .setFooter({ text: "C·∫£nh b√°o c√†i ƒë·∫∑t c∆° b·∫£n" });

                const buttons = new ActionRowBuilder()
                    .addComponents(new ButtonBuilder()
                        .setEmoji("‚úñÔ∏è")
                        .setLabel("T·ª´ Ch·ªëi")
                        .setStyle(ButtonStyle.Danger)
                        .setCustomId("setup-sv-no"),

                    new ButtonBuilder()
                        .setEmoji("‚úÖ")
                        .setLabel("ƒê·ªìng √ù")
                        .setStyle(ButtonStyle.Success)
                        .setCustomId("setup-sv-ok"));

                await interaction.deferReply({ ephemeral: true }); // Ho√£n ph·∫£n h·ªìi ƒë·ªÉ tr√°nh l·ªói

                await interaction.channel.send({ embeds: [basicEmbed], components: [buttons] });

                await interaction.deleteReply(); // X√≥a ph·∫£n h·ªìi ƒë√£ ho√£n ƒë·ªÉ tr√°nh l·ªói "·ª®ng d·ª•ng kh√¥ng ph·∫£n h·ªìi"
                
                const collector = interaction.channel.createMessageComponentCollector();

                // let setupMessage; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ tham chi·∫øu tin nh·∫Øn

                collector.on("collect", async (i) => {
                    
                    if (i.customId === "setup-sv-no") {
                        basicEmbed.setColor("DarkGreen");
                        basicEmbed.setTitle("ƒê√£ h·ªßy thi·∫øt l·∫≠p m√°y ch·ªß c∆° b·∫£n");
                        basicEmbed.setDescription("Vi·ªác thi·∫øt l·∫≠p m√°y ch·ªß c∆° b·∫£n ƒë√£ b·ªã h·ªßy, n·∫øu ƒëi·ªÅu n√†y kh√¥ng ph·∫£i d·ª± ƒë·ªãnh c·ªßa b·∫°n th√¨ h√£y ch·∫°y l·∫°i l·ªánh.");
                        basicEmbed.setTimestamp();
                        i.update({ embeds: [basicEmbed], components: [], fetchReply: true }).then((message) => {
                            setTimeout(() => { message.delete(); }, 5000);
                        });

                        return;
                    }

                    if (i.customId === "setup-sv-ok") {
                    
                        basicEmbed.setColor("Gold");
                        basicEmbed.setTitle("ƒêang kh·ªüi t·∫°o...");
                        basicEmbed.setDescription("Qu√° tr√¨nh thi·∫øt l·∫≠p m√°y ch·ªß c∆° b·∫£n ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu, vi·ªác n√†y s·∫Ω m·∫•t nhi·ªÅu th·ªùi gian h∆°n v√† ph·ª• thu·ªôc v√†o ƒë∆∞·ªùng truy·ªÅn m·∫°ng c·ªßa b·∫°n. ƒê·ª´ng n√≥ng v·ªôi, h√£y ƒë·ª£i trong gi√¢y l√°t");
                        basicEmbed.setImage(`https://cdn.dribbble.com/users/90627/screenshots/1096260/loading.gif`);
                        basicEmbed.setTimestamp();

                        // l∆∞u tr·ªØ tin nh·∫Øn c·∫ßn x√≥a
                        setupMessage = await i.update({ embeds: [basicEmbed], components: [] });

                        await new Promise((resolve) => setTimeout(resolve, 5000));
                    } // s·ª≠ d·ª•ng l·∫°i m√£ nh√∫ng v√† m√£ n√∫t cho c√°c gi√° tr·ªã kh√°c

                    if (interaction.guild.channels.cache.size) {
                        for await (const [, channel] of interaction.guild.channels.cache) await channel.delete().catch(() => null);
                    }

                    const { guild } = interaction;

                    const categorybasic = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "Quan tr·ªçng"
                    });

                    await guild.channels.create({
                        name: "üôå„Éªch√†o-m·ª´ng", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic, // Category ID
                        permissionOverwrites: [
                            {
                                id: interaction.guild.id,
                                deny: [PermissionsBitField.Flags.SendMessages]
                            }
                        ]
                    });

                    await guild.channels.create({
                        name: "üìö„Éªquy-t·∫Øc", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic, // Category ID
                        permissionOverwrites: [
                            {
                                id: interaction.guild.id,
                                deny: [PermissionsBitField.Flags.SendMessages]
                            }
                        ]
                    });

                    // const category = interaction.guild.categories.cache.find((category) => category.name.includes("report"));
                    const channel = interaction.guild.channels.cache.find((channel) => channel.name.includes("quy-t·∫Øc")); // when reusing this line change the variable (channel) change to like (channel2) (used to find channels)

                    const rulesembed = new EmbedBuilder()
                        .setTitle("Quy t·∫Øc")
                        .setColor("Orange")
                        .addFields({ name: "**Quy t·∫Øc m√°y ch·ªß Discord**", value: "**Khi tham gia m√°y ch·ªß ƒë·ªìng √Ω t·∫•t c·∫£ c√°c quy t·∫Øc!**" })
                        .addFields({ name: "‚Ä¢ 1) __Discord ToS v√† Nguy√™n t·∫Øc__", value: "T·∫•t c·∫£ ng∆∞·ªùi d√πng c·∫ßn tu√¢n theo ƒêi·ªÅu kho·∫£n d·ªãch v·ª• v√† Nguy√™n t·∫Øc c·ªông ƒë·ªìng c·ªßa Discord --> https://discordapp.com/guidelines" })
                        .addFields({ name: "‚Ä¢ 2) __Qu·∫£ng c√°o__", value: "Kh√¥ng ng∆∞·ªùi d√πng n√†o n√™n ƒëƒÉng qu·∫£ng c√°o, Trong c√°c th√†nh vi√™n DM c·ªßa ch√≠nh m√°y ch·ªß, N·∫øu b·∫°n mu·ªën h·ª£p t√°c H√£y h·ªèi ch·ªß s·ªü h·ªØu." })
                        .addFields({ name: "‚Ä¢ 3) __L·ª´a ƒë·∫£o__", value: "Kh√¥ng ng∆∞·ªùi d√πng n√†o s·∫Ω l·ª´a ƒë·∫£o ho·∫∑c c·ªë g·∫Øng l·ª´a ƒë·∫£o c√°c th√†nh vi√™n/nh√¢n vi√™n ƒë·ªÉ l·∫•y c√°c m·∫∑t h√†ng Th·∫≠t ho·∫∑c c√°c m·∫∑t h√†ng tr·ª±c tuy·∫øn." })
                        .addFields({ name: "‚Ä¢ 4) __Ng√¥n ng·ªØ ph√¢n bi·ªát ch·ªßng t·ªôc__", value: "B·∫•t k·ª≥ l·ªùi n√≥i x·∫•u v·ªÅ ch·ªßng t·ªôc ho·∫∑c h√†nh vi/nh·∫≠n x√©t ph√¢n bi·ªát ch·ªßng t·ªôc n√†o ƒë·ªÅu KH√îNG ƒë∆∞·ª£c ch·∫•p nh·∫≠n trong m√°y ch·ªß n√†y. ƒê√¢y s·∫Ω l√† l·ªánh c·∫•m ngay l·∫≠p t·ª©c." })
                        .addFields({ name: "‚Ä¢ 5) __S·ª± t√¥n tr·ªçng__", value: "Vi·ªác t√¥n tr·ªçng admin v√† mod team th·ª±c s·ª± r·∫•t quan tr·ªçng. Nh√≥m ki·ªÉm duy·ªát c√≥ ti·∫øng n√≥i cu·ªëi c√πng." })
                        .addFields({ name: "‚Ä¢ 6) __NSFW__", value: "S·∫Ω c√≥ 0 h√¨nh ·∫£nh, video ho·∫∑c vƒÉn b·∫£n NSFW, vi ph·∫°m quy ƒë·ªãnh n√†y s·∫Ω b·ªã c·∫•m ngay l·∫≠p t·ª©c v√† vƒ©nh vi·ªÖn." })
                        .addFields({ name: "‚Ä¢ 7) __B√°n h√†ng__", value: "S·∫Ω kh√¥ng c√≥ vi·ªác b√°n h√†ng tr·ª±c tuy·∫øn b·∫±ng ti·ªÅn TH·ª∞C." })
                        .addFields({ name: "‚Ä¢ 8) __Kh√¥ng m·∫°o danh nh√¢n vi√™n__", value: "ƒê·ª´ng c·ªë g·∫Øng m·∫°o danh nh√¢n vi√™n." })
                        .addFields({ name: "‚Ä¢ 9) __L√¥Ãâ h√¥Ãâng__", value: "ƒê·ª´ng c·ªë g·∫Øng b·ªè qua b·∫•t k·ª≥ quy t·∫Øc n√†o c√≥ s∆° h·ªü trong quy t·∫Øc, n·∫øu c√≥ s∆° h·ªü b·ªã khai th√°c, ng∆∞·ªùi d√πng s·∫Ω b·ªã c·∫•m s·ª≠ d·ª•ng n√≥, Vui l√≤ng b√°o c√°o m·ªçi s∆° h·ªü ƒë∆∞·ª£c t√¨m th·∫•y." })
                        .addFields({ name: "‚Ä¢ 10) __ƒê·ªôt k√≠ch m√°y ch·ªß__", value: "ƒê·ª´ng c·ªë g·∫Øng thi·∫øt l·∫≠p v√† c·ªë g·∫Øng ƒë·ªôt k√≠ch m√°y ch·ªß n√†y ho·∫∑c b·∫•t k·ª≥ m√°y ch·ªß n√†o." })
                        .addFields({ name: " __**C·∫£nh b√°o**__", value: "vi ph·∫°m nh·∫π s·∫Ω b·ªã c·∫£nh c√°o." });

                    channel.send({ embeds: [rulesembed] });

                    await guild.channels.create({
                        name: "üì¢„Éªth√¥ng-b√°o", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic, // Category ID
                        permissionOverwrites: [
                            {
                                id: interaction.guild.id,
                                deny: [PermissionsBitField.Flags.SendMessages]
                            }
                        ]
                    });

                    await guild.channels.create({
                        name: "üíé„Éªboosts", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic, // Category ID
                        permissionOverwrites: [
                            {
                                id: interaction.guild.id,
                                deny: [PermissionsBitField.Flags.SendMessages]
                            }
                        ]
                    });

                    await guild.channels.create({
                        name: "‚ö†„Éªb√°o-c√°o", // Channel Name
                        type: ChannelType.GuildText, // Channel Type üôå„Éªwelcome
                        parent: categorybasic // Category ID
                    });

                    
                    const categorybasic2 = await guild.channels.create({ // change category variable when reusing this to make new category
                        type: ChannelType.GuildCategory,
                        name: "C·ªòNG ƒê·ªíNG"
                    });

                    await guild.channels.create({
                        name: "üí¨„Éªchung", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic2 // Category ID
                    });

                    await guild.channels.create({
                        name: "ü§ñ„Éªl·ªánh", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic2 // Category ID
                    });

                    await guild.channels.create({
                        name: "üÜô„ÉªthƒÉng-h·∫°ng", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic2, // Category ID
                        permissionOverwrites: [
                            {
                                id: interaction.guild.id,
                                deny: [PermissionsBitField.Flags.SendMessages]
                            }
                        ]
                    });


                    const categorybasic3 = await guild.channels.create({ // thay ƒë·ªïi bi·∫øn danh m·ª•c khi s·ª≠ d·ª•ng l·∫°i bi·∫øn n√†y ƒë·ªÉ t·∫°o danh m·ª•c m·ªõi
                        type: ChannelType.GuildCategory,
                        name: "Nh√¢n-vi√™n"
                    });

                    // x√≥a vai tr√≤ ƒë·ªÉ chu·∫©n b·ªã vai tr√≤ nh√¢n vi√™n + vai tr√≤ th√†nh vi√™n sau
                    if (interaction.guild.roles.cache.size) {
                        for await (const [, role] of interaction.guild.roles.cache) if (role.editable) await role.delete().catch(() => null);
                    }

                    // s√°ng t·∫°o vai tr√≤
                    await interaction.guild.roles.create({
                        name: "ng∆∞·ªùi s·ªü h·ªØu",
                        color: "#D60620",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel,
                            PermissionsBitField.Flags.Administrator]
                    });

                    await interaction.guild.roles.create({
                        name: "qu·∫£n tr·ªã vi√™n",
                        color: "#7f00ff",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel,
                            PermissionsBitField.Flags.BanMembers,
                            PermissionsBitField.Flags.KickMembers,
                            PermissionsBitField.Flags.ViewAuditLog,
                            PermissionsBitField.Flags.ManageMessages,
                            PermissionsBitField.Flags.MuteMembers]
                    });

                    await interaction.guild.roles.create({
                        name: "ng∆∞·ªùi ƒëi·ªÅu h√†nh",
                        color: "#FF8303",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel,
                            PermissionsBitField.Flags.ViewAuditLog,
                            PermissionsBitField.Flags.ManageMessages,
                            PermissionsBitField.Flags.MuteMembers]
                    });

                    await interaction.guild.roles.create({
                        name: "nh√¢n vi√™n",
                        color: "#d9ff00",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.ManageMessages,
                            PermissionsBitField.Flags.ViewAuditLog,
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel]
                    });

                    await interaction.guild.roles.create({
                        name: "th√†nh vi√™n",
                        color: "#1338BE",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel]
                    });


                    const role = interaction.guild.roles.cache.find((r) => r.name === "nh√¢n vi√™n"); // to find roles

                    await guild.channels.create({
                        name: "üîî„Éªth√¥ng-b√°o", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic3, // Category ID
                        permissionOverwrites: [
                            {
                                id: interaction.guild.id,
                                deny: [PermissionsBitField.Flags.ViewChannel]
                            },
                            {
                                id: role.id,
                                allow: [PermissionsBitField.Flags.ViewChannel] // const role is used for role.id
                            }
                        ]
                    });

                    await guild.channels.create({
                        name: "üîî„Éªtr√≤-chuy·ªán-nh√¢n-vi√™n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic3, // Category ID
                        permissionOverwrites: [
                            {
                                id: interaction.guild.id,
                                deny: [PermissionsBitField.Flags.ViewChannel]
                            },
                            {
                                id: role.id,
                                allow: [PermissionsBitField.Flags.ViewChannel] // const role is used for role.id
                            }
                        ]
                    });

                    await guild.channels.create({
                        name: "üîî„Éªnh√¢n-vi√™n-cmd", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic3, // Category ID
                        permissionOverwrites: [
                            {
                                id: interaction.guild.id,
                                deny: [PermissionsBitField.Flags.ViewChannel]
                            },
                            {
                                id: role.id,
                                allow: [PermissionsBitField.Flags.ViewChannel] // const role is used for role.id
                            }
                        ]
                    });

                    await guild.channels.create({
                        name: "üîî„Éªnh·∫≠t-k√Ω-mod", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: categorybasic3, // Category ID
                        permissionOverwrites: [
                            {
                                id: interaction.guild.id,
                                deny: [PermissionsBitField.Flags.ViewChannel],
                            },
                            {
                                id: role.id,
                                allow: [PermissionsBitField.Flags.ViewChannel] // const role is used for role.id
                            }]
                    });

                    const basicdone1 = interaction.guild.channels.cache.find((channel) => channel.name.includes("nh·∫≠t-k√Ω-mod"));

                    const basiccomplete = new EmbedBuilder()
                        .setTitle("Thi·∫øt l·∫≠p c∆° b·∫£n ƒë√£ ho√†n t·∫•t")
                        .setColor("Green")
                        .setDescription("m√°y ch·ªß c∆° b·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p, h√£y t·∫≠n h∆∞·ªüng m√°y ch·ªß c·ªßa b·∫°n!")
                        .setImage(`https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExd3Bqa2loYWxlZnNsYWczZmU2ZHRxbzNweTh5aGt5N2hlbWg0djcxcyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Ftw7aDJxYNOBvLAoQw/giphy.gif`)
                        .setTimestamp()
                        .setFooter({ text: "b·∫°n c√≥ th·ªÉ x√≥a n·ªôi dung nh√∫ng n√†y" });

                    basicdone1.send(({ embeds: [basiccomplete] }));

                });

                break;
            }
            














            
            case "advanced": {

                const advancedembed = new EmbedBuilder()
                    .setColor("LuminousVividPink")
                    .setTitle("‚ö†Ô∏è C·∫£nh b√°o t·∫°o m√°y ch·ªß n√¢ng cao ‚ö†Ô∏è")
                    .setDescription("***C·∫§P T·∫§T C·∫¢ C√ÅC QUY·ªÄN CHO BOT TR∆Ø·ªöC KHI TH·ª∞C HI·ªÜN ƒêI·ªÄU N√ÄY***\n\nNh·∫•p v√†o n√∫t x√°c nh·∫≠n ho·∫∑c ‚úÖ t·∫•t c·∫£ k√™nh/danh m·ª•c c√≥ th·ªÉ b·ªã x√≥a v√† thay th·∫ø ƒë·ªÉ thi·∫øt l·∫≠p m√°y ch·ªß n√†y!")
                    .setTimestamp()
                    .setFooter({ text: "C·∫£nh b√°o c√†i ƒë·∫∑t n√¢ng cao" });

                const advancedbuttons = new ActionRowBuilder()
                    .addComponents(new ButtonBuilder()
                        .setEmoji("‚úñÔ∏è")
                        .setLabel("H·ªßy b·ªè")
                        .setStyle(ButtonStyle.Danger)
                        .setCustomId("setup-sv-no1"),

                    new ButtonBuilder()
                        .setEmoji("‚úÖ")
                        .setLabel("x√°c nh·∫≠n")
                        .setStyle(ButtonStyle.Success)
                        .setCustomId("setup-sv-ok1"));

                await interaction.deferReply({ ephemeral: true }); // Ho√£n ph·∫£n h·ªìi ƒë·ªÉ tr√°nh l·ªói

                await interaction.channel.send({ embeds: [advancedembed], components: [advancedbuttons] });

                await interaction.deleteReply(); // X√≥a ph·∫£n h·ªìi ƒë√£ ho√£n ƒë·ªÉ tr√°nh l·ªói

                const advancedcollector = interaction.channel.createMessageComponentCollector();

                // let setupMessage; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ tham chi·∫øu tin nh·∫Øn

                advancedcollector.on("collect", async (i) => {

                    if (i.customId === "setup-sv-no1") {
                        advancedembed.setColor("DarkGreen");
                        advancedembed.setTitle("ƒê√£ h·ªßy thi·∫øt l·∫≠p m√°y ch·ªß n√¢ng cao");
                        advancedembed.setDescription("Vi·ªác thi·∫øt l·∫≠p m√°y ch·ªß n√¢ng cao ƒë√£ b·ªã h·ªßy, n·∫øu ƒëi·ªÅu n√†y kh√¥ng ƒë∆∞·ª£c d·ª± ƒë·ªãnh th√¨ h√£y ch·∫°y l·∫°i l·ªánh.");
                        advancedembed.setTimestamp();
                        i.update({ embeds: [advancedembed], components: [], fetchReply: true }).then((message) => {
                            setTimeout(() => { message.delete(); }, 5000);
                        });

                        return;
                    }


                    if (i.customId === "setup-sv-ok1") {
                        advancedembed.setColor("Gold");
                        advancedembed.setTitle("ƒêang kh·ªüi t·∫°o...");
                        advancedembed.setDescription("Qu√° tr√¨nh thi·∫øt l·∫≠p m√°y ch·ªß n√¢ng cao ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu, vi·ªác n√†y s·∫Ω m·∫•t nhi·ªÅu th·ªùi gian h∆°n v√† ph·ª• thu·ªôc v√†o ƒë∆∞·ªùng truy·ªÅn m·∫°ng c·ªßa b·∫°n. ƒê·ª´ng n√≥ng v·ªôi, h√£y ƒë·ª£i trong gi√¢y l√°t");
                        advancedembed.setTimestamp();
                        advancedembed.setImage(`https://cdn.dribbble.com/users/90627/screenshots/1096260/loading.gif`);

                        // l∆∞u tr·ªØ tin nh·∫Øn c·∫ßn x√≥a
                        setupMessage = await i.update({ embeds: [advancedembed], components: [] });


                        await new Promise((resolve) => setTimeout(resolve, 5000));
                    }


                    
                    // tr∆∞·ªõc ti√™n h√£y t·∫°o vai tr√≤ ·ªü ƒë√¢y cho c√°c quy·ªÅn n√¢ng cao
                    
                    if (interaction.guild.roles.cache.size) {
                        for await (const [, role] of interaction.guild.roles.cache) if (role.editable) await role.delete().catch(() => null);
                    }

                    // roles creations
                    await interaction.guild.roles.create({
                        name: "ng∆∞·ªùi s·ªü h·ªØu",
                        color: "#D60620",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel,
                            PermissionsBitField.Flags.Administrator],
                            Position: 1
                    });

                    await interaction.guild.roles.create({
                        name: "ƒë·ªìng s·ªü h·ªØu",
                        color: "#FFFFFF",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel,
                            PermissionsBitField.Flags.BanMembers,
                            PermissionsBitField.Flags.KickMembers,
                            PermissionsBitField.Flags.ViewAuditLog,
                            PermissionsBitField.Flags.ManageMessages,
                            PermissionsBitField.Flags.MuteMembers,
                            PermissionsBitField.Flags.Administrator],
                            Position: 2
                    });


                    await interaction.guild.roles.create({
                        name: "qu·∫£n tr·ªã vi√™n c·∫•p cao",
                        color: "#0a0612",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel,
                            PermissionsBitField.Flags.BanMembers,
                            PermissionsBitField.Flags.KickMembers,
                            PermissionsBitField.Flags.ViewAuditLog,
                            PermissionsBitField.Flags.ManageMessages,
                            PermissionsBitField.Flags.MuteMembers,
                            PermissionsBitField.Flags.DeafenMembers],
                            Position: 3
                    });


                    await interaction.guild.roles.create({
                        name: "admin",
                        color: "#7f00ff",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel,
                            PermissionsBitField.Flags.BanMembers,
                            PermissionsBitField.Flags.KickMembers,
                            PermissionsBitField.Flags.ViewAuditLog,
                            PermissionsBitField.Flags.ManageMessages,
                            PermissionsBitField.Flags.MuteMembers],
                            Position: 4
                    });


                    await interaction.guild.roles.create({
                        name: "ng∆∞·ªùi ƒëi·ªÅu h√†nh c·∫•p cao",
                        color: "#FCE205",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel,
                            PermissionsBitField.Flags.ViewAuditLog,
                            PermissionsBitField.Flags.ManageMessages,
                            PermissionsBitField.Flags.MuteMembers,
                            PermissionsBitField.Flags.KickMembers],
                            Position: 5
                    });

                    await interaction.guild.roles.create({
                        name: "ng∆∞·ªùi ƒëi·ªÅu h√†nh",
                        color: "#FF8303",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel,
                            PermissionsBitField.Flags.ViewAuditLog,
                            PermissionsBitField.Flags.ManageMessages,
                            PermissionsBitField.Flags.MuteMembers],
                            Position: 6
                    });

                    await interaction.guild.roles.create({
                        name: "nh√¢n vi√™n",
                        color: "#1167b1",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.ManageMessages,
                            PermissionsBitField.Flags.ViewAuditLog,
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel],
                            Position: 7
                    });

                    await interaction.guild.roles.create({
                        name: "Ng∆∞·ªùi t·ªï ch·ª©c qu√† t·∫∑ng",
                        color: "#010101",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.ManageMessages,
                            PermissionsBitField.Flags.ViewAuditLog,
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel],
                            Position: 8
                    });

                    await interaction.guild.roles.create({
                        name: "VIP",
                        color: "#D4AF37",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel],
                            Position: 9
                    });

                    await interaction.guild.roles.create({
                        name: "th√†nh vi√™n",
                        color: "#1338BE",
                        hoist: true,
                        permissions: [
                            PermissionsBitField.Flags.SendMessages,
                            PermissionsBitField.Flags.ReadMessageHistory,
                            PermissionsBitField.Flags.ViewChannel],
                            Position: 10
                    });

                    
                    const senioradminrole = interaction.guild.roles.cache.find((r) => r.name === "qu·∫£n tr·ªã vi√™n c·∫•p cao"); // to find roles

                    const adminrole = interaction.guild.roles.cache.find((r) => r.name === "admin"); // to find roles

                    const seniormodrole = interaction.guild.roles.cache.find((r) => r.name === "ng∆∞·ªùi ƒëi·ªÅu h√†nh c·∫•p cao"); // to find roles

                    const modrole = interaction.guild.roles.cache.find((r) => r.name === "ng∆∞·ªùi ƒëi·ªÅu h√†nh"); // to find roles

                    const staffrole = interaction.guild.roles.cache.find((r) => r.name === "nh√¢n vi√™n"); // to find roles

                    const giverole = interaction.guild.roles.cache.find((r) => r.name === "Ng∆∞·ªùi t·ªï ch·ª©c qu√† t·∫∑ng"); // to find roles

                    const viprole = interaction.guild.roles.cache.find((r) => r.name === "VIP"); // to find roles
                    
                    const memberrole = interaction.guild.roles.cache.find((r) => r.name === "th√†nh vi√™n"); // to find roles




                    
                    if (interaction.guild.channels.cache.size) {
                    for await (const [, channel] of interaction.guild.channels.cache) await channel.delete().catch(() => null);
                    }


                    const ids = [memberrole.id, viprole.id, giverole.id, staffrole.id, modrole.id, seniormodrole.id, adminrole.id]; const overwritesmute = [];
                    for await (const id of ids) overwritesmute.push({ id: id, deny: [PermissionsBitField.Flags.SendMessages], allow: [PermissionsBitField.Flags.ViewChannel] });


                    const ids0 = [adminrole.id, senioradminrole.id]; const overwritesadmin = [];
                    for await (const id of ids0) overwritesadmin.push({ id: id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] });

                    const { guild } = interaction;


                    const advancedcategory = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "Quan tr·ªçng"
                    });

                
                    await guild.channels.create({
                        name: "üôå„Éªch√†o-m·ª´ng", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory, // Category ID
                        permissionOverwrites: overwritesmute
                    });

                    await guild.channels.create({
                        name: "üìö„Éªquy-t·∫Øc", // T√™n k√™nh
                        type: ChannelType.GuildText, // Lo·∫°i k√™nh
                        parent: advancedcategory, // Th·ªÉ lo·∫°i ID
                        permissionOverwrites: overwritesmute
                    });

                    const channel = interaction.guild.channels.cache.find((channel) => channel.name.includes("quy-t·∫Øc")); // when reusing this line change the variable (channel) change to like (channel2) (used to find channels)

                    const advancedrules = new EmbedBuilder()
                        .setTitle("Quy t·∫Øc")
                        .setColor("Orange")
                        .addFields({ name: "**Quy t·∫Øc m√°y ch·ªß Discord**", value: "**Khi tham gia m√°y ch·ªß, t·∫•t c·∫£ c√°c quy t·∫Øc ƒë·ªÅu ƒë∆∞·ª£c ƒë·ªìng √Ω!**" })
                        .addFields({ name: "‚Ä¢ 1) __Discord ToS v√† Nguy√™n t·∫Øc__", value: "T·∫•t c·∫£ ng∆∞·ªùi d√πng c·∫ßn tu√¢n theo ƒêi·ªÅu kho·∫£n d·ªãch v·ª• v√† Nguy√™n t·∫Øc c·ªông ƒë·ªìng c·ªßa Discord --> https://discordapp.com/guidelines" })
                        .addFields({ name: "‚Ä¢ 2) __Qu·∫£ng c√°o__", value: "Kh√¥ng ng∆∞·ªùi d√πng n√†o n√™n ƒëƒÉng qu·∫£ng c√°o, Trong c√°c th√†nh vi√™n DM c·ªßa ch√≠nh m√°y ch·ªß, N·∫øu b·∫°n mu·ªën h·ª£p t√°c H√£y h·ªèi ch·ªß s·ªü h·ªØu." })
                        .addFields({ name: "‚Ä¢ 3) __L·ª´a ƒë·∫£o__", value: "Kh√¥ng ng∆∞·ªùi d√πng n√†o s·∫Ω l·ª´a ƒë·∫£o ho·∫∑c c·ªë g·∫Øng l·ª´a ƒë·∫£o c√°c th√†nh vi√™n/nh√¢n vi√™n ƒë·ªÉ l·∫•y c√°c m·∫∑t h√†ng Th·∫≠t ho·∫∑c c√°c m·∫∑t h√†ng tr·ª±c tuy·∫øn." })
                        .addFields({ name: "‚Ä¢ 4) __Ng√¥n ng·ªØ ph√¢n bi·ªát ch·ªßng t·ªôc__", value: "B·∫•t k·ª≥ l·ªùi n√≥i x·∫•u v·ªÅ ch·ªßng t·ªôc ho·∫∑c h√†nh vi/nh·∫≠n x√©t ph√¢n bi·ªát ch·ªßng t·ªôc n√†o ƒë·ªÅu KH√îNG ƒë∆∞·ª£c ch·∫•p nh·∫≠n trong m√°y ch·ªß n√†y. ƒê√¢y s·∫Ω l√† l·ªánh c·∫•m ngay l·∫≠p t·ª©c." })
                        .addFields({ name: "‚Ä¢ 5) __S·ª± t√¥n tr·ªçng__", value: "Vi·ªác t√¥n tr·ªçng admin v√† mod team th·ª±c s·ª± r·∫•t quan tr·ªçng. Nh√≥m ki·ªÉm duy·ªát c√≥ ti·∫øng n√≥i cu·ªëi c√πng." })
                        .addFields({ name: "‚Ä¢ 6) __NSFW__", value: "S·∫Ω c√≥ 0 h√¨nh ·∫£nh, video ho·∫∑c vƒÉn b·∫£n NSFW, vi ph·∫°m quy ƒë·ªãnh n√†y s·∫Ω b·ªã c·∫•m ngay l·∫≠p t·ª©c v√† vƒ©nh vi·ªÖn." })
                        .addFields({ name: "‚Ä¢ 7) __B√°n h√†ng__", value: "S·∫Ω kh√¥ng c√≥ vi·ªác b√°n h√†ng tr·ª±c tuy·∫øn b·∫±ng ti·ªÅn TH·ª∞C." })
                        .addFields({ name: "‚Ä¢ 8) __Kh√¥ng m·∫°o danh nh√¢n vi√™n__", value: "ƒê·ª´ng c·ªë g·∫Øng m·∫°o danh nh√¢n vi√™n." })
                        .addFields({ name: "‚Ä¢ 9) __L·ªó h·ªïng__", value: "ƒê·ª´ng c·ªë g·∫Øng b·ªè qua b·∫•t k·ª≥ quy t·∫Øc n√†o c√≥ l·ªó h·ªïng trong quy t·∫Øc, n·∫øu c√≥ s∆° h·ªü b·ªã khai th√°c, ng∆∞·ªùi d√πng s·∫Ω b·ªã c·∫•m s·ª≠ d·ª•ng n√≥, Vui l√≤ng b√°o c√°o m·ªçi l·ªó h·ªïng ƒë∆∞·ª£c t√¨m th·∫•y." })
                        .addFields({ name: "‚Ä¢ 10) __ƒê·ªôt k√≠ch m√°y ch·ªß__", value: "ƒê·ª´ng c·ªë g·∫Øng thi·∫øt l·∫≠p v√† c·ªë g·∫Øng t·∫•n c√¥ng m√°y ch·ªß n√†y ho·∫∑c b·∫•t k·ª≥ m√°y ch·ªß n√†o." })
                        .addFields({ name: " __**C·∫£nh b√°o**__", value: "vi ph·∫°m nh·∫π s·∫Ω b·ªã c·∫£nh c√°o." });

                    channel.send({ embeds: [advancedrules] });
                
                    await guild.channels.create({
                        name: "üì¢„Éªth√¥ng-b√°o", // Channel NameüçÄ‚îÉpings
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory, // Category ID
                        permissionOverwrites: overwritesmute, ...overwritesadmin
                    });

                    await guild.channels.create({
                        name: "üíé„Éªboosts", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory, // Category ID
                        permissionOverwrites: overwritesmute, ...overwritesadmin
                    });

                    await guild.channels.create({
                        name: "üçÄ„Éªpings", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory, // Category ID
                        permissionOverwrites: overwritesmute
                    });

                    await guild.channels.create({
                        name: "üé®„Éªm√†u-s·∫Øc", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory, // Category ID
                        permissionOverwrites: overwritesmute
                    });

                    const ids1 = [memberrole.id,viprole.id, giverole.id, staffrole.id, modrole.id, seniormodrole.id, adminrole.id]; const overwritestalk = [];
                    for await (const id of ids1) overwritestalk.push({ id: id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] });

                    await guild.channels.create({
                        name: "‚ö†„Éªb√°o-c√°o", // Channel Name
                        type: ChannelType.GuildText, // Channel Type üôå„Éªwelcome
                        parent: advancedcategory, // Category ID
                        permissionOverwrites: overwritestalk
                        
                    });



                    const advancedcategory2 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "C·ªòNG ƒê·ªíNG"
                    });


                    await guild.channels.create({
                        name: "üí¨„Éªchung", // Channel Name
                        type: ChannelType.GuildText, // Channel Type üôå„Éªwelcome
                        parent: advancedcategory2, // Category ID
                        permissionOverwrites: overwritestalk
                        
                    });

                    await guild.channels.create({
                        name: "ü§°„Éªmemes", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory2, // Category ID 
                    });

                    await guild.channels.create({
                        name: "ü§ñ„Éªl·ªánh", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory2 // Category ID
                    });

                    await guild.channels.create({
                        name: "üì∑„Éªph∆∞∆°ng-ti·ªán-truy·ªÅn-th√¥ng", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory2 // Category ID
                    });

                    await guild.channels.create({
                        name: "ü•á„ÉªthƒÉng-h·∫°ng", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory2, // Category ID
                        permissionOverwrites: overwritesmute
                    });


                    const advancedcategory3 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "S·ª∞ KI·ªÜN"
                    });

                    await guild.channels.create({
                        name: "üé™„Éªs·ª±-ki·ªán", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory3, // Category ID 
                        permissionOverwrites: overwritesmute
                    });

                    await guild.channels.create({
                        name: "c√°c-tr√≤-ch∆°i-ph·ª•", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory3, // Category ID 
                        permissionOverwrites: overwritesmute
                    });

                    const advancedcategory4 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "QU√Ä T·∫∂NG"
                    });

                    await guild.channels.create({
                        name: "üéâ‚ï≠„Éªqu√†-t·∫∑ng-l·ªõn", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory4, // Category ID 
                        permissionOverwrites: [
                            {
                                id: giverole,
                                allow: [PermissionsBitField.Flags.SendMessages]
                            },
                            ...overwritesmute],
                            
                    });


                    await guild.channels.create({
                        name: "üéâ‚îÉ ph√°t-ph·∫ßn-th∆∞·ªüngs", // Channel Nameü•≥‚ï∞„Éªopen-invites
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory4, // Category ID 
                        permissionOverwrites: [
                            {
                                id: giverole,
                                allow: [PermissionsBitField.Flags.SendMessages]
                            },
                            ...overwritesmute],
                            
                    });


                    await guild.channels.create({
                        name: "ü•≥‚ï∞„Éªqu√†-t·∫∑ng-nhanh", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory4, // Category ID 
                        permissionOverwrites: [
                            {
                                id: giverole,
                                allow: [PermissionsBitField.Flags.SendMessages]
                            },
                            ...overwritesmute],
                            
                    });


                    const advancedcategory5 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "V√â"
                    });

                    await guild.channels.create({
                        name: "üì©‚ï≠„Éªv√©", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory5, // Category ID 
                        permissionOverwrites: overwritesmute
                    });

                    await guild.channels.create({
                        name: "üì¢‚îÉ v√©-nh√¢n-vi√™n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory5, // Category ID 
                        permissionOverwrites: [
                            {
                                id: interaction.guild.id,
                                deny: [PermissionsBitField.Flags.ViewChannel]
                            },
                            {
                                id: memberrole,
                                deny: [PermissionsBitField.Flags.ViewChannel]
                            },
                            {
                                id: viprole,
                                deny: [PermissionsBitField.Flags.ViewChannel]
                            },
                            ...overwritesmute, ...overwritesadmin],
                            
                        
                    });

                    await guild.channels.create({
                        name: "üì®‚ï∞„Éªv√©-t·∫∑ng", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory5, // Category ID 
                        permissionOverwrites: overwritesmute
                    });

                    const ids2 = [memberrole.id,viprole.id, interaction.guild.id]; const overwritesprivate = [];
                    for await (const id of ids2) overwritesprivate.push({ id: id, deny: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] });


                    const ids3 = [giverole.id, staffrole.id, modrole.id, seniormodrole.id, adminrole.id]; const overwritestaffmute = [];
                    for await (const id of ids3) overwritestaffmute.push({ id: id, allow: [PermissionsBitField.Flags.ViewChannel], deny: [PermissionsBitField.Flags.SendMessages] });


                    const ids4 = [giverole.id, staffrole.id, modrole.id, seniormodrole.id, adminrole.id]; const overwritestafftalk = [];
                    for await (const id of ids4) overwritestafftalk.push({ id: id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]});

                    const ids5 = [giverole.id, staffrole.id, modrole.id, seniormodrole.id]; const overwritestaffhide = [];
                    for await (const id of ids5) overwritestaffhide.push({ id: id, deny: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]});





                    const advancedcategory6 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "NH√ÇN VI√äN"
                    });

                    await guild.channels.create({
                        name: "üì£‚ï≠„Éªth√¥ng-b√°o", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffmute, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üìú‚îÉ„Éªn·ªôi-quy-nh√¢n-vi√™n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffmute, ...overwritesadmin]
                    });


                    //staff rules embed
                    const channel2 = interaction.guild.channels.cache.find((channel) => channel.name.includes("n·ªôi-quy-nh√¢n-vi√™n")); // when reusing this line change the variable (channel) change to like (channel2) (used to find channels)

                    const staffrules = new EmbedBuilder()
                    .setTitle('N·ªôi quy nh√¢n vi√™n')
                    .setColor('Random')
                    .addFields({ name: "**N·ªôi quy ƒë·ªôi ng≈© nh√¢n vi√™n**", value: "**Khi gia nh·∫≠p ƒë·ªôi ng≈© nh√¢n vi√™n, ph·∫£i ch·∫•p h√†nh m·ªçi n·ªôi quy ƒë√£ ƒë∆∞·ª£c BQT ƒë·∫∑t ra!**" })
                    .addFields({ name: "‚Ä¢ 1) __Discord ToS v√† Nguy√™n t·∫Øc__", value: "V·ªõi t∆∞ c√°ch l√† nh√¢n vi√™n, b·∫°n ƒë·∫°i di·ªán cho m√°y ch·ªß v√† c√°c gi√° tr·ªã c·ªßa n√≥, v√¨ v·∫≠y b·∫°n ph·∫£i tu√¢n th·ªß c√°c quy t·∫Øc! --> https://discordapp.com/guidelines" })
                    .addFields({ name: "‚Ä¢ 2) __S·ª± t√¥n tr·ªçng__", value: "B·∫°n ph·∫£i t√¥n tr·ªçng c·ªông ƒë·ªìng v√† c√°c nh√¢n vi√™n kh√°c." })
                    .addFields({ name: "‚Ä¢ 3) __Quy·∫øt ƒë·ªãnh__", value: "D√π l√† nh√¢n vi√™n nh∆∞ng b·∫°n v·∫´n ph·∫£i nghe l·ªùi BQT v√¨ h·ªç l√† ng∆∞·ªùi ƒë∆∞a ra quy·∫øt ƒë·ªãnh cu·ªëi c√πng." })
                    .addFields({ name: "‚Ä¢ 4) __Quy·∫øt ƒë·ªãnh__", value: "V·ªõi t∆∞ c√°ch l√† th√†nh vi√™n nh√≥m nh√¢n vi√™n, tr√°ch nhi·ªám c·ªßa b·∫°n l√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh nhanh ch√≥ng v√† c√¥ng b·∫±ng." })
                    .addFields({ name: "‚Ä¢ 5) __Qu·∫£ng c√°o__", value: "Kh√¥ng qu·∫£ng c√°o c√°c m√°y ch·ªß kh√°c khi ch∆∞a c√≥ s·ª± cho ph√©p c·ªßa nh√¢n vi√™n c·∫•p cao." })
                    .addFields({ name: "‚Ä¢ 6) __Tranh c√£i__", value: "ƒê·ª´ng g√¢y s·ª± v·ªõi nhau ho·∫∑c gi·ªØa c√°c th√†nh vi√™n ch·ªâ v√¨ ni·ªÅm vui." })
                    .addFields({ name: "‚Ä¢ 7) __Kh√¢Ãân c√¢ÕÄu__", value: "ƒê·ª´ng Kh√¢Ãân c√¢ÕÄu nh√¢n vi√™n c·∫•p cao v·ªÅ m·ªçi th·ª©." })

                    channel2.send({ embeds: [staffrules] });


                    await guild.channels.create({
                        name: "üéÄ‚îÉ„Éªtr√≤-chuy·ªán-nh√¢n-vi√™n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestafftalk, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üíº‚îÉ„Éªl·ªánh-nh√¢n-vi√™n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestafftalk, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üîí‚ï∞„Éªtr√≤-chuy·ªán-qu·∫£n-tr·ªã-vi√™n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffhide, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "vc-c·ªßa-nh√¢n-vi√™n", // Channel Name
                        type: ChannelType.GuildVoice, // Channel Type
                        parent: advancedcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate]
                    });


                    const advancedcategory7 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "NH·∫¨T-K√ù"
                    });

                    await guild.channels.create({
                        name: "üíº‚îÉ tin-nh·∫Øn", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory7, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffhide, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üíº‚îÉ nh·∫≠t-k√Ω-mod", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory7, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffhide, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üíº‚îÉ nh·∫≠t-k√Ω-b·∫£o-m·∫≠t", // Channel Nameserver-log
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory7, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffhide, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üíº‚îÉ nh·∫≠t-k√Ω-m√°y-ch·ªß", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory7, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffhide, ...overwritesadmin]
                    });

                    const advancedcategory8 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "VC"
                    });
    
                    await guild.channels.create({
                        name: "Ch∆°i-game-1", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: advancedcategory8, // Category ID 
                    });
    
                    await guild.channels.create({
                        name: "Ch∆°i-game-2", // Channel Name
                        type: ChannelType.GuildVoice, // Channel Type
                        parent: advancedcategory8, // Category ID 
                    });
    
                    await guild.channels.create({
                        name: "T·ªïng", // Channel Name
                        type: ChannelType.GuildVoice, // Channel Type
                        parent: advancedcategory8, // Category ID 
                    });


                    //set-up complete embed

                const advancedcomplete = interaction.guild.channels.cache.find((channel) => channel.name.includes("nh·∫≠t-k√Ω-m√°y-ch·ªß"));

                const advanceddone1 = new EmbedBuilder()
                    .setTitle("Thi·∫øt l·∫≠p n√¢ng cao ƒë√£ ho√†n t·∫•t")
                    .setColor("Green")
                    .setDescription("m√°y ch·ªß n√¢ng cao c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ho√†n ch·ªânh, h√£y t·∫≠n h∆∞·ªüng m√°y ch·ªß c·ªßa b·∫°n!")
                    .setTimestamp()
                    .setImage(`https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExd3Bqa2loYWxlZnNsYWczZmU2ZHRxbzNweTh5aGt5N2hlbWg0djcxcyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Ftw7aDJxYNOBvLAoQw/giphy.gif`)
                    .setFooter({ text: "b·∫°n c√≥ th·ªÉ x√≥a n·ªôi dung nh√∫ng n√†y" });

                    advancedcomplete.send({ embeds: [advanceddone1] });

    
                });

                break;
            }


















            case "premium": {

        //         // Danh s√°ch ID c·ªßa c√°c ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh n√†y
        // const allowedUserIds = ["1215380543815024700", "940104526285910046", "ID_nguoi_dung_2", "ID_nguoi_dung_1"];

        // // Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ trong danh s√°ch ƒë∆∞·ª£c ph√©p kh√¥ng
        // if (!allowedUserIds.includes(interaction.user.id))
        //     return await interaction.reply({ content: "L·ªánh n√†y ch·ªâ d√†nh cho dev", ephemeral: true });

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ d·ªØ li·ªáu trong b·∫£ng User hay kh√¥ng
        const user = await User.findOne({ discordId: interaction.user.id });
        if (!user || !user.isPremium) {
        return interaction.reply({ content: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng g√≥i cao c·∫•p premium. Vui l√≤ng ƒëƒÉng k√Ω premium ƒë·ªÉ s·ª≠ d·ª•ng.\n\n', ephemeral: true });
        }

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ m√£ premium v√† m√£ ƒë√≥ c√≤n h·∫°n hay kh√¥ng
        const currentTime = new Date();
        if (user.premiumUntil && user.premiumUntil < currentTime) {
            return interaction.reply({ content: 'M√£ premium c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng gia h·∫°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng g√≥i cao c·∫•p premium.', ephemeral: true });
        }

                const premiumembed = new EmbedBuilder()
                    .setColor("LuminousVividPink")
                    .setTitle("‚ö†Ô∏è C·∫¢NH B√ÅO T·∫†O M√ÅY CH·ª¶ CAO C·∫§P ‚ö†Ô∏è")
                    .setDescription("***C·∫§P T·∫§T C·∫¢ C√ÅC QUY·ªÄN CHO BOT TR∆Ø·ªöC KHI TH·ª∞C HI·ªÜN ƒêI·ªÄU N√ÄY***\n\nNh·∫•p v√†o n√∫t x√°c nh·∫≠n ho·∫∑c ‚úÖ t·∫•t c·∫£ k√™nh/danh m·ª•c c√≥ th·ªÉ b·ªã x√≥a v√† thay th·∫ø ƒë·ªÉ thi·∫øt l·∫≠p m√°y ch·ªß n√†y!")
                    .setTimestamp()
                    .setFooter({ text: "C·∫£nh b√°o c√†i ƒë·∫∑t cao c·∫•p" });

                const premiumbuttons = new ActionRowBuilder()
                    .addComponents(new ButtonBuilder()
                        .setEmoji("‚úñÔ∏è")
                        .setLabel("H·ªßy b·ªè")
                        .setStyle(ButtonStyle.Danger)
                        .setCustomId("setup-sv-no2"),

                    new ButtonBuilder()
                        .setEmoji("‚úÖ")
                        .setLabel("x√°c nh·∫≠n")
                        .setStyle(ButtonStyle.Success)
                        .setCustomId("setup-sv-ok2"));

                await interaction.deferReply({ ephemeral: true }); // Ho√£n ph·∫£n h·ªìi ƒë·ªÉ tr√°nh l·ªói

                await interaction.channel.send({ embeds: [premiumembed], components: [premiumbuttons] });

                await interaction.deleteReply(); // X√≥a ph·∫£n h·ªìi ƒë√£ ho√£n ƒë·ªÉ tr√°nh l·ªói

                const premiumcollector = interaction.channel.createMessageComponentCollector();

                // let setupMessage; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ tham chi·∫øu tin nh·∫Øn

                premiumcollector.on("collect", async (i) => {

                if (i.customId === "setup-sv-no2") {
                    premiumembed.setColor("DarkGreen");
                    premiumembed.setTitle("ƒê√£ h·ªßy b·ªè thi·∫øt l·∫≠p m√°y ch·ªß cao c·∫•p");
                    premiumembed.setDescription("Vi·ªác thi·∫øt l·∫≠p m√°y ch·ªß cao c·∫•p ƒë√£ b·ªã h·ªßy, n·∫øu ƒëi·ªÅu n√†y kh√¥ng ph·∫£i d·ª± ƒë·ªãnh c·ªßa b·∫°n th√¨ h√£y ch·∫°y l·∫°i l·ªánh.");
                    premiumembed.setTimestamp();
                    i.update({ embeds: [premiumembed], components: [], fetchReply: true }).then((message) => {
                        setTimeout(() => { message.delete(); }, 5000);
                    });

                    return;
                }


                if (i.customId === "setup-sv-ok2") {
                    premiumembed.setColor("Gold");
                    premiumembed.setTitle("ƒêang kh·ªüi t·∫°o...");
                    premiumembed.setDescription("Qu√° tr√¨nh thi·∫øt l·∫≠p m√°y ch·ªß cao c·∫•p ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu, vi·ªác n√†y s·∫Ω m·∫•t nhi·ªÅu th·ªùi gian h∆°n v√† ph·ª• thu·ªôc v√†o ƒë∆∞·ªùng truy·ªÅn m·∫°ng c·ªßa b·∫°n. ƒê·ª´ng n√≥ng v·ªôi, h√£y ƒë·ª£i trong gi√¢y l√°t");
                    premiumembed.setTimestamp();
                    premiumembed.setImage(`https://cdn.dribbble.com/users/90627/screenshots/1096260/loading.gif`);
                    setupMessage = await i.update({ embeds: [premiumembed], components: [] });


                    await new Promise((resolve) => setTimeout(resolve, 5000));
                };


                if (interaction.guild.roles.cache.size) {
                for await (const [, role] of interaction.guild.roles.cache) if (role.editable) await role.delete().catch(() => null);
                }

                // s√°ng t·∫°o vai tr√≤

                await interaction.guild.roles.create({
                    name: "-",
                    color: "#a8a8a8",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.Administrator],
                        Position: 1
                });

                await interaction.guild.roles.create({
                    name: "owner",
                    color: "#D60620",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel,
                        PermissionsBitField.Flags.Administrator],
                        Position: 2
                });

                await interaction.guild.roles.create({
                    name: "*",
                    color: "#a8a8a8",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.Administrator],
                        Position: 3
                });

                await interaction.guild.roles.create({
                    name: "co-owner",
                    color: "#FFFFFF",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel,
                        PermissionsBitField.Flags.BanMembers,
                        PermissionsBitField.Flags.KickMembers,
                        PermissionsBitField.Flags.ViewAuditLog,
                        PermissionsBitField.Flags.ManageMessages,
                        PermissionsBitField.Flags.MuteMembers,
                        PermissionsBitField.Flags.Administrator],
                        Position: 4
                });

                await interaction.guild.roles.create({
                    name: "Bots",
                    color: "#FFFFFF",
                    hoist: true,
                    permissions: [PermissionsBitField.Flags.Administrator],
                        Position: 5
                });

                await interaction.guild.roles.create({
                    name: "server manager",
                    color: "#FCE205",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel,
                        PermissionsBitField.Flags.BanMembers,
                        PermissionsBitField.Flags.KickMembers,
                        PermissionsBitField.Flags.ViewAuditLog,
                        PermissionsBitField.Flags.ManageMessages,
                        PermissionsBitField.Flags.MuteMembers,
                        PermissionsBitField.Flags.DeafenMembers,
                        PermissionsBitField.Flags.ManageGuild,
                        PermissionsBitField.Flags.ManageChannels],
                        Position: 6
                });

                await interaction.guild.roles.create({
                    name: "Administrator",
                    color: "#a8a8a8",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.ManageRoles,
                        PermissionsBitField.Flags.BanMembers,
                        PermissionsBitField.Flags.ModerateMembers],
                        Position: 7
                });


                await interaction.guild.roles.create({
                    name: "BQT",
                    color: "#00ff28",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel,
                        PermissionsBitField.Flags.BanMembers,
                        PermissionsBitField.Flags.KickMembers,
                        PermissionsBitField.Flags.ViewAuditLog,
                        PermissionsBitField.Flags.ManageMessages,
                        PermissionsBitField.Flags.MuteMembers,
                        PermissionsBitField.Flags.DeafenMembers],
                        Position: 8
                });


                await interaction.guild.roles.create({
                    name: "Admin",
                    color: "#7f00ff",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel,
                        PermissionsBitField.Flags.BanMembers,
                        PermissionsBitField.Flags.KickMembers,
                        PermissionsBitField.Flags.ViewAuditLog,
                        PermissionsBitField.Flags.ManageMessages,
                        PermissionsBitField.Flags.MuteMembers],
                        Position: 9
                });

                await interaction.guild.roles.create({
                    name: "Qu·∫£n tr·ªã vi√™n c·∫•p cao",
                    color: "#9d4af0",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel,
                        PermissionsBitField.Flags.BanMembers,
                        PermissionsBitField.Flags.KickMembers,
                        PermissionsBitField.Flags.ViewAuditLog,
                        PermissionsBitField.Flags.ManageMessages,
                        PermissionsBitField.Flags.MuteMembers],
                        Position: 10
                });

                
                await interaction.guild.roles.create({
                    name: "Ng∆∞·ªùi ƒëi·ªÅu h√†nh c·∫•p cao",
                    color: "#FCE205",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel,
                        PermissionsBitField.Flags.ViewAuditLog,
                        PermissionsBitField.Flags.ManageMessages,
                        PermissionsBitField.Flags.MuteMembers,
                        PermissionsBitField.Flags.KickMembers],
                        Position: 11
                });

                await interaction.guild.roles.create({
                    name: "Ng∆∞·ªùi ƒëi·ªÅu h√†nh",
                    color: "#FF8303",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel,
                        PermissionsBitField.Flags.ViewAuditLog,
                        PermissionsBitField.Flags.ManageMessages,
                        PermissionsBitField.Flags.MuteMembers],
                        Position: 12
                });

                await interaction.guild.roles.create({
                    name: "Nh√¢n vi√™n",
                    color: "#1167b1",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.ManageMessages,
                        PermissionsBitField.Flags.ViewAuditLog,
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel],
                        Position: 13
                });

                await interaction.guild.roles.create({
                    name: "Nh√¢n vi√™n x√©t x·ª≠",
                    color: "#6abd97",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.ViewAuditLog,
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel],
                        Position: 14
                });

                await interaction.guild.roles.create({
                    name: "Ng∆∞·ªùi t·ªï ch·ª©c qu√† t·∫∑ng",
                    color: "#010101",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.ManageMessages,
                        PermissionsBitField.Flags.ViewAuditLog,
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel],
                        Position: 15
                });

                await interaction.guild.roles.create({
                    name: "VIP",
                    color: "#D4AF37",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel],
                        Position: 16
                });


                //color roles (6), ping roles(3), level roles(5-8)

                await interaction.guild.roles.create({
                    name: "red",
                    color: "#ff0000",
                    hoist: false,
                    Position: 17
                });

                await interaction.guild.roles.create({
                    name: "blue",
                    color: "#0065ff",
                    hoist: false,
                    Position: 18
                });

                await interaction.guild.roles.create({
                    name: "purple",
                    color: "#8d00ff",
                    hoist: false,
                    Position: 19
                });

                await interaction.guild.roles.create({
                    name: "orange",
                    color: "#ff8b00",
                    hoist: false,
                    Position: 20
                });

                await interaction.guild.roles.create({
                    name: "green",
                    color: "#00ff28",
                    hoist: false,
                    Position: 21
                });

                await interaction.guild.roles.create({
                    name: "pink",
                    color: "#ff94e0",
                    hoist: false,
                    Position: 22
                });

                await interaction.guild.roles.create({
                    name: "Th√†nh vi√™n",
                    color: "#1338BE",
                    hoist: true,
                    permissions: [
                        PermissionsBitField.Flags.SendMessages,
                        PermissionsBitField.Flags.ReadMessageHistory,
                        PermissionsBitField.Flags.ViewChannel],
                        Position: 23
                });

                //level roles

                await interaction.guild.roles.create({
                    name: "Level 30",
                    color: "#a8a8a8",
                    hoist: false,
                    Position: 24
                });

                await interaction.guild.roles.create({
                    name: "Level 25",
                    color: "#a8a8a8",
                    hoist: false,
                    Position: 25
                });

                await interaction.guild.roles.create({
                    name: "Level 20",
                    color: "#a8a8a8",
                    hoist: false,
                    Position: 26
                });

                await interaction.guild.roles.create({
                    name: "Level 15",
                    color: "#a8a8a8",
                    hoist: false,
                    Position: 27
                });

                await interaction.guild.roles.create({
                    name: "Level 10",
                    color: "#a8a8a8",
                    hoist: false,
                    Position: 28
                });

                await interaction.guild.roles.create({
                    name: "Level 5",
                    color: "#a8a8a8",
                    hoist: false,
                    Position: 29
                });

                //ping roles

                await interaction.guild.roles.create({
                    name: "announcement ping",
                    color: "#a8a8a8",
                    hoist: false,
                    Position: 30
                });

                await interaction.guild.roles.create({
                    name: "giveaway ping",
                    color: "#a8a8a8",
                    hoist: false,
                    Position: 31
                });

                await interaction.guild.roles.create({
                    name: "staff ping",
                    color: "#a8a8a8",
                    hoist: false,
                    Position: 32
                });

                await interaction.guild.roles.create({
                    name: "event ping",
                    color: "#a8a8a8",
                    hoist: false,
                    Position: 33
                }); //end of roles


                const servermanager = interaction.guild.roles.cache.find((r) => r.name === "server manager"); // to find roles
                const perms = interaction.guild.roles.cache.find((r) => r.name === "Administrator"); 
                const senioradmin = interaction.guild.roles.cache.find((r) => r.name === "BQT"); 
                const admin = interaction.guild.roles.cache.find((r) => r.name === "Admin"); 
                const junioradmin = interaction.guild.roles.cache.find((r) => r.name === "Qu·∫£n tr·ªã vi√™n c·∫•p cao"); 
                const seniormod = interaction.guild.roles.cache.find((r) => r.name === "Ng∆∞·ªùi ƒëi·ªÅu h√†nh c·∫•p cao"); 
                const mod = interaction.guild.roles.cache.find((r) => r.name === "Ng∆∞·ªùi ƒëi·ªÅu h√†nh"); 
                const staff = interaction.guild.roles.cache.find((r) => r.name === "Nh√¢n vi√™n"); 
                const trialstaff = interaction.guild.roles.cache.find((r) => r.name === "Nh√¢n vi√™n x√©t x·ª≠");
                const givehost = interaction.guild.roles.cache.find((r) => r.name === "Ng∆∞·ªùi t·ªï ch·ª©c qu√† t·∫∑ng"); // staff roles


                const vip = interaction.guild.roles.cache.find((r) => r.name === "VIP"); // color role


                const member = interaction.guild.roles.cache.find((r) => r.name === "Th√†nh vi√™n");



                const ids = [interaction.guild.roles.everyone.id, member.id, vip.id, givehost.id, trialstaff.id, staff.id, mod.id, seniormod.id, junioradmin.id]; const overwritesmute = [];
                for await (const id of ids) overwritesmute.push({ id: id, deny: [PermissionsBitField.Flags.SendMessages], allow: [PermissionsBitField.Flags.ViewChannel] });


                const ids1 = [admin.id, senioradmin.id, perms.id, servermanager.id]; const overwritesadmin = [];
                for await (const id of ids1) overwritesadmin.push({ id: id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] });


                const ids2 = [member.id, vip.id, interaction.guild.id]; const overwritesprivate = [];
                for await (const id of ids2) overwritesprivate.push({ id: id, deny: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] });



                const ids3 = [givehost.id, trialstaff.id, staff.id, mod.id, seniormod.id, junioradmin.id]; const overwritestaffmute = [];
                for await (const id of ids3) overwritestaffmute.push({ id: id, allow: [PermissionsBitField.Flags.ViewChannel], deny: [PermissionsBitField.Flags.SendMessages] });



                const ids4 = [givehost.id, trialstaff.id, staff.id, mod.id, seniormod.id, junioradmin.id]; const overwritestafftalk = [];
                for await (const id of ids4) overwritestafftalk.push({ id: id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]});

                
                const ids5 = [givehost.id, trialstaff.id, staff.id, mod.id, seniormod.id, junioradmin.id]; const overwritestaffhide = [];
                for await (const id of ids5) overwritestaffhide.push({ id: id, deny: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]});


                if (interaction.guild.channels.cache.size) {
                    for await (const [, channel] of interaction.guild.channels.cache) await channel.delete().catch(() => null);
                    }


                const { guild } = interaction;

                const premiumcategory = await guild.channels.create({
                    type: ChannelType.GuildCategory,
                    name: "TH√îNG TIN"
                });


                await guild.channels.create({
                    name: "qu·∫£n-l√Ω", // Channel Name
                    type: ChannelType.GuildText, // Channel Type
                    parent: premiumcategory, // Category ID
                    permissionOverwrites: [...overwritesadmin, ...overwritestaffhide, ...overwritesprivate]
                });


                await guild.channels.create({
                    name: "üôå„Éªch√†o-m·ª´ng", // Channel Name
                    type: ChannelType.GuildText, // Channel Type
                    parent: premiumcategory, // Category ID
                    permissionOverwrites: [...overwritesmute, ...overwritesadmin]
                });

                await guild.channels.create({
                    name: "üìö„Éªquy-t·∫Øc", // Channel Name
                    type: ChannelType.GuildText, // Channel Type
                    parent: premiumcategory, // Category ID
                    permissionOverwrites: [...overwritesmute, ...overwritesadmin]
                });

                const channel = interaction.guild.channels.cache.find((channel) => channel.name.includes("quy-t·∫Øc")); // when reusing this line change the variable (channel) change to like (channel2) (used to find channels)

                    const premiumrules = new EmbedBuilder()
                        .setTitle("Quy t·∫Øc")
                        .setColor('DarkGold')
                        .addFields({ name: "**Quy t·∫Øc m√°y ch·ªß Discord**", value: "**Khi tham gia m√°y ch·ªß, ph·∫£i tu√¢n theo t·∫•t c·∫£ c√°c quy t·∫Øc c·ªßa m√°y ch·ªß**" })
                        .addFields({ name: "‚Ä¢ 1) __Discord ToS and Guidelines__", value: "All users need to follow Discord's Terms of Service and Community Guidelines." })
                        .addFields({ name: "‚Ä¢ 2) __Advertising__", value: "No user should post ads, In members DM's of within the server its self, If you wish to partner Ask the owner." })
                        .addFields({ name: "‚Ä¢ 3) __Scamming__", value: "No user will scam or attempt to scam members/staff for Real items or online items." })
                        .addFields({ name: "‚Ä¢ 4) __Racist language__", value: "Any racial slurs or racist behaviour/comments are NOT accepted in this server. This will be an instant Ban." })
                        .addFields({ name: "‚Ä¢ 5) __Respect__", value: "Respecting the admin and mod team is really important. The moderation team has the final say." })
                        .addFields({ name: "‚Ä¢ 6) __NSFW__", value: "There will be 0 NSFW images, videos or text, breaking this rule is an instant and permanent ban." })
                        .addFields({ name: "‚Ä¢ 7) __Selling__", value: "There will be no selling online itmes for REAL currency." })
                        .addFields({ name: "‚Ä¢ 8) __No staff impersonation__", value: "Do not attempt to Impersonate staff members." })
                        .addFields({ name: "‚Ä¢ 9) __Loopholes__", value: "Do not attempt to bypass any rules with loopholes within the rules, if there are loopholes being exploited users will be punished for using it, Please report any found loopholes." })
                        .addFields({ name: "‚Ä¢ 10) __Server raiding__", value: "Do not try to set up and attempt to raid this server or any server." })
                        .addFields({ name: " __**Warnings**__", value: "minor offences will result in a warn." });

                    channel.send({ embeds: [premiumrules] });
                

                    await guild.channels.create({
                        name: "üì¢„Éªth√¥ng-b√°o", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory, // Category ID
                        permissionOverwrites: overwritesmute, ...overwritesadmin
                    });

                    await guild.channels.create({
                        name: "üíé„Éªboosts", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory, // Category ID
                        permissionOverwrites: overwritesmute, ...overwritesadmin
                    });

                    await guild.channels.create({
                        name: "üçÄ„Éªpings", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory, // Category ID
                        permissionOverwrites: overwritesmute
                    });

                    await guild.channels.create({
                        name: "üé®„Éªm√†u-s·∫Øc", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory, // Category ID
                        permissionOverwrites: overwritesmute
                    });

                    await guild.channels.create({
                        name: "‚ö†„Éªb√°o-c√°o", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory, // Category ID
                        permissionOverwrites: overwritesmute
                    });


                    const premiumcategory2 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "C·ªòNG ƒê·ªíNG"
                    });


                    await guild.channels.create({
                        name: "üí¨„Éªtr√≤-chuy·ªán-ch√≠nh", // T√™n k√™nh
                        type: ChannelType.GuildText, // Lo·∫°i k√™nh üôå„Éªch√†o m·ª´ng
                        parent: premiumcategory2, // Th·ªÉ lo·∫°i ID
                        
                    });

                    await guild.channels.create({
                        name: "ü§°„Éªmemes", // T√™n k√™nh
                        type: ChannelType.GuildText, // Lo·∫°i k√™nh
                        parent: premiumcategory2, // Th·ªÉ lo·∫°i ID
                    });

                    await guild.channels.create({
                        name: "ü§ñ„Éªl·ªánh", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory2 // Category ID
                    });

                    await guild.channels.create({
                        name: "üì∑„Éªph∆∞∆°ng ti·ªán truy·ªÅn th√¥ng", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory2 // Category ID
                    });

                    await guild.channels.create({
                        name: "ü•á„ÉªthƒÉng h·∫°ng", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory2, // Category ID
                        permissionOverwrites: overwritesmute
                    });


                    const premiumcategory3 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "S·ª∞ KI·ªÜN"
                    });

                    await guild.channels.create({
                        name: "üé™„Éªth√¥ng-b√°o-s·ª±-ki·ªán", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory3, // Category ID 
                        permissionOverwrites: overwritesmute
                    });

                    await guild.channels.create({
                        name: "minigames", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory3, // Category ID 
                        permissionOverwrites: overwritesmute
                    });

                    const premiumcategory4 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "QU√Ä T·∫∂NG"
                    });

                    await guild.channels.create({
                        name: "üéâ‚ï≠„Éªqu√†-t·∫∑ng-l·ªõn", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory4, // Category ID 
                        permissionOverwrites: [
                            {
                                id: givehost,
                                allow: [PermissionsBitField.Flags.SendMessages]
                            },
                            ...overwritesmute],
                            
                    });


                    await guild.channels.create({
                        name: "üéâ‚îÉ qu√†-t·∫∑ng", // Channel Nameü•≥‚ï∞„Éªopen-invites
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory4, // Category ID 
                        permissionOverwrites: [
                            {
                                id: givehost,
                                allow: [PermissionsBitField.Flags.SendMessages]
                            },
                            ...overwritesmute],
                            
                    });


                    await guild.channels.create({
                        name: "ü•≥‚ï∞„Éªqu√†-t·∫∑ng-ng·∫Øn-h·∫°n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory4, // Category ID 
                        permissionOverwrites: [
                            {
                                id: givehost,
                                allow: [PermissionsBitField.Flags.SendMessages]
                            },
                            ...overwritesmute],
                            
                    });


                    const premiumcategory5 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "V√â"
                    });

                    await guild.channels.create({
                        name: "üì©‚ï≠„Éªv√©", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory5, // Category ID 
                        permissionOverwrites: overwritesmute
                    });

                    await guild.channels.create({
                        name: "üì¢‚îÉ v√©-nh√¢n-vi√™n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory5, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritesmute, ...overwritesadmin],
                            
                        
                    });

                    await guild.channels.create({
                        name: "üì®‚ï∞„Éªv√©-t·∫∑ng", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory5, // Category ID 
                        permissionOverwrites: overwritesmute
                    });


                    const premiumcategory6 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "NH√ÇN VI√äN"
                    });

                    await guild.channels.create({
                        name: "üì£‚ï≠„Éªth√¥ng-b√°o", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffmute, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üì£‚ï≠„Éªkhuy·∫øn-m√£i", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffmute, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üìú‚îÉ„Éªn·ªôi-quy-nh√¢n-vi√™n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffmute, ...overwritesadmin]
                    });


                    //staff rules embed
                    const channel3 = interaction.guild.channels.cache.find((channel) => channel.name.includes("n·ªôi-quy-nh√¢n-vi√™n")); // when reusing this line change the variable (channel) change to like (channel2) (used to find channels)

                    const staffrules = new EmbedBuilder()
                    .setTitle('N·ªòI QUY NH√ÇN VI√äN')
                    .setColor('Random')
                    .addFields({ name: "**N·ªôi quy ƒë·ªôi ng≈© nh√¢n vi√™n**", value: "**Khi gia nh·∫≠p ƒë·ªôi ng≈© nh√¢n vi√™n, ch·∫•p h√†nh ƒë√∫ng m·ªçi n·ªôi quy m√† Admin ƒë∆∞a ra!**" })
                    .addFields({ name: "‚Ä¢ 1) __Discord ToS v√† Nguy√™n t·∫Øc__", value: "V·ªõi t∆∞ c√°ch l√† nh√¢n vi√™n, b·∫°n ƒë·∫°i di·ªán cho m√°y ch·ªß v√† c√°c gi√° tr·ªã c·ªßa n√≥, v√¨ v·∫≠y b·∫°n ph·∫£i tu√¢n th·ªß c√°c quy t·∫Øc! --> https://discordapp.com/guidelines." })
                    .addFields({ name: "‚Ä¢ 2) __S·ª± t√¥n tr·ªçng__", value: "B·∫°n v·∫´n ph·∫£i t√¥n tr·ªçng c·ªông ƒë·ªìng v√† c√°c nh√¢n vi√™n kh√°c." })
                    .addFields({ name: "‚Ä¢ 3) __Decisions__", value: "Although your a staff member you must still listen to higher-ups, they have the final call." })
                    .addFields({ name: "‚Ä¢ 4) __Decision making__", value: "As a staff team member its your responsibility to make quick and fair decisions." })
                    .addFields({ name: "‚Ä¢ 5) __Advertising__", value: "Do not advertise other servers without permission from higher staff." })
                    .addFields({ name: "‚Ä¢ 6) __fighting__", value: "Do not start fight between one another or between members for the fun of it." })
                    .addFields({ name: "‚Ä¢ 7) __Begging__", value: "Don't beg high staff for things." })

                    channel3.send({ embeds: [staffrules] });


                    await guild.channels.create({
                        name: "üéÄ‚îÉ„Éªtr√≤-chuy·ªán-nh√¢n-vi√™n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestafftalk, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üíº‚îÉ„Éªl·ªánh-nh√¢n-vi√™n", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestafftalk, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üîí‚ï∞„Éªtr√≤-chuy·ªán-Admin", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffhide, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "vc-c·ªßa-nh√¢n vi√™n", // Channel Name
                        type: ChannelType.GuildVoice, // Channel Type
                        parent: premiumcategory6, // Category ID 
                        permissionOverwrites: [...overwritesprivate]
                    });


                    const premiumcategory7 = await guild.channels.create({
                        type: ChannelType.GuildCategory,
                        name: "NH·∫¨T K√ù"
                    });

                    await guild.channels.create({
                        name: "üíº‚îÉ nh·∫≠t-k√Ω-tin-nh·∫Øn", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory7, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffhide, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üíº‚îÉ nh·∫≠t-k√Ω-mod", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory7, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffhide, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üíº‚îÉ nh·∫≠t-k√Ω-b·∫£o-m·∫≠t", // Channel Nameserver-log
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory7, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffhide, ...overwritesadmin]
                    });

                    await guild.channels.create({
                        name: "üíº‚îÉ nh·∫≠t-k√Ω-m√°y-ch·ªß", // Channel Name
                        type: ChannelType.GuildText, // Channel Type
                        parent: premiumcategory7, // Category ID 
                        permissionOverwrites: [...overwritesprivate, ...overwritestaffhide, ...overwritesadmin]
                    });

                     //set-up complete embed

                const premiumcomplate = interaction.guild.channels.cache.find((channel) => channel.name.includes("nh·∫≠t-k√Ω-m√°y-ch·ªß"));

                const premiumdone = new EmbedBuilder()
                    .setTitle("Thi·∫øt l·∫≠p cao c·∫•p ƒë√£ ho√†n t·∫•t ")
                    .setColor('Gold')
                    .setDescription("m√°y ch·ªß cao c·∫•p c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p r·∫•t t·ªët, h√£y t·∫≠n h∆∞·ªüng m√°y ch·ªß c·ªßa b·∫°n!")
                    .setTimestamp()
                    .setImage(`https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExd3Bqa2loYWxlZnNsYWczZmU2ZHRxbzNweTh5aGt5N2hlbWg0djcxcyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Ftw7aDJxYNOBvLAoQw/giphy.gif`)
                    .setFooter({ text: "b·∫°n c√≥ th·ªÉ x√≥a n·ªôi dung nh√∫ng n√†y" });

                    premiumcomplate.send({ embeds: [premiumdone] });
                    
            })
            break;
        }; // d√≤ng cu·ªëi d√†nh cho ng∆∞·ªùi thu ph√≠ cao c·∫•p
    }
}}