// const { SlashCommandBuilder, PermissionsBitField } = require('discord.js');

// module.exports = {
//   data: new SlashCommandBuilder()
//     .setName('give')
//     .setDescription('üéñÔ∏è | Cung c·∫•p cho ng∆∞·ªùi d√πng m·ªôt vai tr√≤.')
//     .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator)
//     .addUserOption(option =>
//       option.setName('user')
//         .setDescription('Ng∆∞·ªùi d√πng giao vai tr√≤ cho.')
//         .setRequired(true))
//     .addRoleOption(option =>
//       option.setName('role')
//         .setDescription('hi·ªán t·∫°i ch·ªâ c√≥ th·ªÉ c·∫•p cho ng∆∞·ªùi d√πng vai tr√≤ th√†nh vi√™n, m·ªçi vai tr√≤ kh√°c s·∫Ω b·ªã l·ªói.')
//         .setRequired(true)),
//   async execute(interaction) {
//     const guild = interaction.guild;
//     const member = guild.members.cache.get(interaction.options.getUser('user').id);
//     const role = interaction.options.getRole('role');

//     try {
//       await member.roles.add(role);
//       await interaction.reply(`Vai tr√≤ ***${role.toString()}*** ƒë√£ ƒë∆∞·ª£c th√™m v√†o cho ${member.toString()}.`);
//     } catch (error) {
//       console.error(error);
//       await interaction.reply('ƒê√£ x·∫£y ra l·ªói khi ƒë∆∞a ra vai tr√≤.');
//     }
//   },
// };



const { SlashCommandBuilder, PermissionsBitField } = require('discord.js');
const { checkAdministrator } = require(`../../permissionCheck`)

module.exports = {
    data: new SlashCommandBuilder()
        .setName('give')
        .setDescription('Qu·∫£n l√Ω vai tr√≤ cho ng∆∞·ªùi d√πng.')
        .addSubcommand(subcommand =>
            subcommand
                .setName('role')
                .setDescription('Cung c·∫•p cho ng∆∞·ªùi d√πng m·ªôt vai tr√≤.')
                .addUserOption(option =>
                    option.setName('user')
                        .setDescription('Ng∆∞·ªùi d√πng giao vai tr√≤ cho.')
                        .setRequired(true))
                .addRoleOption(option =>
                    option.setName('role')
                        .setDescription('Ch·ªâ c√≥ th·ªÉ c·∫•p vai tr√≤ th√†nh vi√™n, c√°c vai tr√≤ kh√°c s·∫Ω b·ªã l·ªói.')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove-role')
                .setDescription('X√≥a m·ªôt vai tr√≤ c·ªßa ng∆∞·ªùi d√πng.')
                .addUserOption(option =>
                    option.setName('user')
                        .setDescription('Ng∆∞·ªùi d√πng m√† b·∫°n mu·ªën x√≥a vai tr√≤.')
                        .setRequired(true))
                .addRoleOption(option =>
                    option.setName('role')
                        .setDescription('Vai tr√≤ s·∫Ω b·ªã x√≥a.')
                        .setRequired(true))),

    async execute(interaction) {

        const hasPermission = await checkAdministrator(interaction);
        if (!hasPermission) return;

        const guild = interaction.guild;
        const member = guild.members.cache.get(interaction.options.getUser('user').id);
        const role = interaction.options.getRole('role');

        try {
            if (interaction.options.getSubcommand() === 'role') {
                await member.roles.add(role);
                await interaction.reply(`Vai tr√≤ ***${role.toString()}*** ƒë√£ ƒë∆∞·ª£c th√™m v√†o cho ${member.toString()}.`);
            } else if (interaction.options.getSubcommand() === 'remove-role') {
                await member.roles.remove(role);
                await interaction.reply(`Vai tr√≤ ***${role.toString()}*** ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi ${member.toString()}.`);
            }
        } catch (error) {
            console.error(error);
            await interaction.reply('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán thao t√°c v·ªõi vai tr√≤.');
        }
    },
};
