const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType } = require("discord.js");
const tinycolor = require("tinycolor2");
const moment = require("moment-timezone");
const randomColor = require("randomcolor");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("announce")
    .setDescription("üîî | G·ª≠i th√¥ng b√°o n√¢ng cao")
    .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageGuild)
    .addChannelOption((option) =>
      option
        .setName("channel")
        .setDescription("Ch·ªçn k√™nh ƒë·ªÉ th√¥ng b√°o")
        .setRequired(true)
        .addChannelTypes(ChannelType.GuildText)
    )
    .addStringOption((option) =>
      option
        .setName("message")
        .setDescription("Tin nh·∫Øn th√¥ng b√°o, M·∫πo: c√≥ th·ªÉ d√πng \\n: ƒë·ªÉ xu·ªëng 1 d√≤ng, {s1}m·∫ßu xanh{/s1} v√† {s2}m·∫ßu ƒë·ªè{/s2}")
        .setRequired(true)
    )
    .addStringOption((option) =>
      option.setName("title").setDescription("Ti√™u ƒë·ªÅ c·ªßa th√¥ng b√°o")
    )
    .addStringOption((option) =>
      option.setName("color").setDescription("Ch·ªçn M·∫ßu b·∫°n mu·ªën (ch·ªâ d√†nh cho tin nh·∫Øn nh√∫ng)").addChoices(
        { name: "M·∫ßu ng·∫´u nhi√™n", value: "Random" },
        { name: "M·∫ßu ƒë·ªè", value: "Red" },
        { name: "M·∫ßu xanh d∆∞∆°ng", value: "Blue" },
        { name: "M·∫ßu xanh l√° c√¢y", value: "Green" },
        { name: "M·∫ßu t√≠m", value: "Purple" },
        { name: "M·∫ßu cam", value: "Orange" },
        { name: "M·∫ßu v√†ng", value: "Yellow" },
        { name: "M·∫ßu ƒëen", value: "Black" },
        { name: "M·∫ßu xanh l∆° (r·∫•t ƒë·∫πp)", value: "Cyan" },
        { name: "M·∫ßu h·ªìng", value: "Pink" },
        { name: "M·∫ßu hoa o·∫£i h∆∞∆°ng", value: "Lavender" },
        { name: "M·∫ßu s·∫´m (M·∫ßu ƒë·ªè s·∫´m, h∆°i t√≠m)", value: "Maroon" },
        { name: "M·∫ßu √¥ liu", value: "Olive" },
        { name: "M·∫ßu xanh lam (xanh n∆∞·ªõc bi·ªÉn)", value: "Teal" },
        { name: "M·∫ßu b·∫°c", value: "Silver" },
        { name: "M·∫ßu v√†ng ƒë·ªìng", value: "Gold" },
        { name: "M·∫ßu be", value: "Beige" },
        { name: "M·∫ßu h·∫£i qu√¢n (xanh d∆∞∆°ng ƒë·∫≠m)", value: "Navy" },
        { name: "M·∫ßu t√≠m ƒë·∫≠m", value: "Indigo" },
        { name: "M·∫ßu h·ªìng t√≠m", value: "Violet" },
      )
    )
    .addStringOption((option) =>
      option
        .setName("timestamp")
        .setDescription("ƒê·ªãnh d·∫°ng H·∫πn th·ªùi gian ƒë·ªÉ g·ª≠i th√¥ng b√°o (HH:mm DD/MM/YYYY)")
    ),

  async execute(interaction) {
    try {
      const channel = interaction.options.getChannel("channel");
      const messageText = interaction.options.getString("message");
      const title = interaction.options.getString("title") || "Th√¥ng b√°o";
      const color = interaction.options.getString("color") || "turquoise";
      const timestamp = interaction.options.getString("timestamp");

      const perm = new EmbedBuilder()
      .setColor(`Blue`)
      .setDescription(`\`\`\`yml\nB·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·∫∑t l·∫°i c·∫•p ƒë·ªô xp trong m√°y ch·ªß ${interaction.guild.name}.\`\`\``)

      if(!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) return await interaction.reply({ embeds: [perm], ephemeral: true });

      let colorCode;

      if (color === "Random") {
        colorCode = randomColor();
      } else {
        colorCode = tinycolor(color);
      }

      if (color !== "Random" && !colorCode.isValid()) {
        return await interaction.reply({ content: "M·∫ßu b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá.", ephemeral: true });
      }

      const processMessage = (text) => {
        return text
          .replace(/{s1}/g, '```diff\n+ ')
          .replace(/{\/s1}/g, '\n```')
          .replace(/{s2}/g, '```diff\n- ')
          .replace(/{\/s2}/g, '\n```')
          .replace(/{s3}/g, '‚úÖ ')
          .replace(/{s4}/g, '‚ùå ')
          .replace(/\\n/g, '\n'); // Th√™m d√≤ng n√†y ƒë·ªÉ thay th·∫ø k√Ω t·ª± \n b·∫±ng xu·ªëng d√≤ng th·ª±c s·ª±;
      };

      const embed = new EmbedBuilder()
        .setTitle(title)
        .setDescription(processMessage(messageText));

      if (color === "Random") {
        embed.setColor(colorCode);
      } else {
        embed.setColor(colorCode.toHexString());
      }

      if (timestamp) {
        const regex = /^(\d{2}):(\d{2}) (\d{2})\/(\d{2})\/(\d{4})$/;
        const match = timestamp.match(regex);

        if (!match) {
          await interaction.reply({
            content: `ƒê·ªãnh d·∫°ng d·∫•u th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng HH:mm DD/MM/YYYY\n\n***CH√ö TH√çCH***:\nHH: hi·ªÉn th·ªã gi·ªù\nmm: hi·ªÉn th·ªã ph√∫t\nDD: hi·ªÉn th·ªã ng√†y\nMM: hi·ªÉn th·ªã th√°ng\nYYYY: hi·ªÉn th·ªã nƒÉm .`,
            ephemeral: true,
          });
          return;
        }

        const [_, hour, minute, day, month, year] = match;
        const scheduledTime = moment.tz(`${year}-${month}-${day} ${hour}:${minute}`, "YYYY-MM-DD HH:mm", "Asia/Ho_Chi_Minh");

        if (!scheduledTime.isValid()) {
          await interaction.reply({
            content: "C√≥ v·∫ª nh∆∞ b·∫°n vi·∫øt ƒë√£ vi·∫øt sai gi√° tr·ªã th·ªùi gian r·ªìi. Vui l√≤ng ki·ªÉm tra l·∫°i ng√†y v√† gi·ªù",
            ephemeral: true,
          });
          return;
        }

        const delay = scheduledTime.valueOf() - Date.now();

        if (delay <= 0) {
          await interaction.reply({
            content: "Th·ªùi gian l√™n l·ªãch ph·∫£i l√† m·ªôt th·ªùi gian trong t∆∞∆°ng lai.",
            ephemeral: true,
          });
          return;
        }

        await interaction.reply({
          content: `Th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i v√†o l√∫c ${scheduledTime.format('HH:mm [ng√†y] DD/MM/YYYY')} (gi·ªù Vi·ªát Nam)`,
          ephemeral: true,
        });

        setTimeout(async () => {
          await channel.send({ embeds: [embed] });
        }, delay);

      } else {
        const row = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId("confirm_send")
            .setEmoji(`<:177envelopesend:1252735130003443722>`)
            .setStyle(ButtonStyle.Success),
          new ButtonBuilder()
            .setCustomId("cancel_send")
            .setEmoji(`<:giphy5:1252736661763391548>`)
            .setStyle(ButtonStyle.Primary)
        );

        await interaction.deferReply({ ephemeral: true });

        await interaction.editReply({
          content: "Xem tr∆∞·ªõc th√¥ng b√°o:",
          embeds: [embed],
          components: [row],
        });

        const filter = (i) => i.user.id === interaction.user.id;

        const collector = interaction.channel.createMessageComponentCollector({
          filter,
          time: 60000,
        });

        collector.on("collect", async (i) => {
          if (i.customId === "confirm_send") {
            await i.update({
              content: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!",
              components: [],
            });
            await channel.send({ embeds: [embed] });
          } else if (i.customId === "cancel_send") {
            await i.update({
              content: "Th√¥ng b√°o b·ªã h·ªßy b·ªè.",
              components: [],
            });
          }
        });

        collector.on("end", async (collected) => {
          if (collected.size === 0) {
            await interaction.editReply({
              content: "Kh√¥ng c√≥ h√†nh ƒë·ªông. Th√¥ng b√°o b·ªã h·ªßy b·ªè.",
              components: [],
            });
          }
        });
      }
    } catch (err) {
      console.error(err);
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({
          content: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω th√¥ng b√°o c·ªßa b·∫°n.",
          ephemeral: true,
        });
      }
    }
  },
};
