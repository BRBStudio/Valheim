const { ButtonBuilder, ActionRowBuilder, ButtonStyle } = require('discord.js');
const imageVotes = new Map();

// N∆°i ActionRowBuilder v·ªõi 1 n√∫t tr√™n 1 h√†ng d√πng cho l·ªánh ping
const button13 = new ActionRowBuilder()
    .addComponents(
        new ButtonBuilder()
            .setCustomId('button13')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üîÅ')
    );

// d√πng cho l·ªánh ping
const button14 = new ActionRowBuilder()
    .addComponents(
        new ButtonBuilder()
            .setCustomId('button14')
            .setStyle(ButtonStyle.Danger)
            .setDisabled(true)
            .setEmoji('üí®')
    );

const Valheim = new ActionRowBuilder()
    .addComponents(
        new ButtonBuilder()
            .setCustomId('valheim_ok')
            .setLabel('Ch·∫•p nh·∫≠n')
            .setStyle(ButtonStyle.Success),
            
        new ButtonBuilder()
            .setCustomId('valheim_no')
            .setLabel('T·ª´ ch·ªëi')
            .setStyle(ButtonStyle.Success)
    );

const Discord = new ActionRowBuilder()
    .addComponents(
        new ButtonBuilder()
            .setCustomId('discord_ok')
            .setLabel('Ch·∫•p nh·∫≠n')
            .setStyle(ButtonStyle.Success),
            
        new ButtonBuilder()
            .setCustomId('discord_no')
            .setLabel('T·ª´ ch·ªëi')
            .setStyle(ButtonStyle.Success)
    );

// d√πng cho l·ªánh message-secret
const view = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                .setCustomId('view')
                .setLabel('Xem tin nhƒÉn')
                .setEmoji('üì©')
                .setStyle(ButtonStyle.Primary)
            )

// H√†m t·∫°o row99 v·ªõi interaction d√πng trong l·ªánh hi
const rowHi = (interaction) => new ActionRowBuilder()
    .addComponents(
        new ButtonBuilder()
            .setCustomId('button3')
            .setLabel(`Quy t·∫Øc ${interaction.guild.name}`)
            .setEmoji('<:9VayEYA0VU:1248778363892400148>') // <:hanyaCheer:1173363092353200158>
            .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
            .setCustomId('button4')
            .setLabel(`ƒê·∫∑c quy·ªÅn ${interaction.guild.name}`)
            .setEmoji(`<:arrowr1:1249618706066051096>`)
            .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
            .setCustomId('button5')
            .setLabel(`Quy t·∫Øc Valheim Survival`)
            .setEmoji(`<:pinkstar:1249623499534893127>`)
            .setStyle(ButtonStyle.Primary)
    );

// N∆°i ActionRowBuilder v·ªõi nhi·ªÅu n√∫t tr√™n 1 h√†ng, l·ªánh bot-commands
const row3 = new ActionRowBuilder()
    .addComponents(
        new ButtonBuilder()
            .setCustomId('homeButton')
            .setStyle(ButtonStyle.Primary)
            .setLabel('Trang ch·ªß'),  // Th√™m nh√£n cho n√∫t
        new ButtonBuilder()
            .setCustomId('reportButton')
            .setStyle(ButtonStyle.Primary)
            .setLabel('B√°o c√°o'),
        new ButtonBuilder()
            .setCustomId('inviteButton')
            .setStyle(ButtonStyle.Primary)
            .setLabel('M·ªùi bot'),
        new ButtonBuilder()
            .setCustomId('deleteButton')
            .setStyle(ButtonStyle.Danger)
            .setLabel('X√≥a b·ªè')
    );

// ch·ªâ d√πng cho vi·ªác bot ƒë∆∞·ª£c m·ªùi v√†o m√°y ch·ªß
const button = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('deleteNew')
                        .setLabel(`üóëÔ∏è`)
                        .setStyle(ButtonStyle.Danger)
                );

// d√πng cho l·ªánh brb
const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("previouss_button")
        .setEmoji('<:K5ZDT5iOVH:1250106818483720264>')
        .setStyle("Primary"),
      new ButtonBuilder()
        .setCustomId("restartt_button")
        .setEmoji('<:VEMhiD3Uxw:1250105551015247933>')
        .setStyle("Primary"),
      new ButtonBuilder()
        .setCustomId("nextt_button")
        .setEmoji('<:kqWQGPzIsE:1250109668886315119>')
        .setStyle("Primary"),
    );

// H√†m t·∫°o row1 v·ªõi URL ƒë·ªông trong r·ªùi m√°y ch·ªß
const createRow1 = (inviteLink) => new ActionRowBuilder()
    .addComponents(
        new ButtonBuilder()
            .setLabel('Quay l·∫°i m√°y ch·ªß')
            .setStyle(ButtonStyle.Link)
            .setURL(inviteLink)
    );

// D√πng cho l·ªánh vote-image
const voteButtons = new ActionRowBuilder()
    .addComponents(
        new ButtonBuilder()
            .setCustomId('vote_very_bad')
            .setLabel(`‚≠ê(${imageVotes.get('vote_very_bad') || 0} phi·∫øu)`)
            .setEmoji('<:likebutton:1250095157076824128>')
            .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
            .setCustomId('vote_bad')
            .setLabel(`‚≠ê‚≠ê(${imageVotes.get('vote_bad') || 0} phi·∫øu)`)
            .setEmoji('<:likebutton:1250095157076824128>')
            .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
            .setCustomId('vote_normal')
            .setLabel(`‚≠ê‚≠ê‚≠ê(${imageVotes.get('vote_normal') || 0} phi·∫øu)`)
            .setEmoji('<:likebutton:1250095157076824128>')
            .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
            .setCustomId('vote_good')
            .setLabel(`‚≠ê‚≠ê‚≠ê‚≠ê(${imageVotes.get('vote_good') || 0} phi·∫øu)`)
            .setEmoji('<:likebutton:1250095157076824128>')
            .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
            .setCustomId('vote_very_good')
            .setLabel(`‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê(${imageVotes.get('vote_very_good') || 0} phi·∫øu)`)
            .setEmoji('<:likebutton:1250095157076824128>')
            .setStyle(ButtonStyle.Primary),
    );



// n√∫t vote ·∫£nh
function handleVoteInteraction(interaction) {
    try {
        const userId = interaction.user.id;
        const voteType = interaction.customId;
        const imageAttachment = interaction.message.attachments.first();

        if (!imageAttachment) {
            console.error('Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh ƒë√≠nh k√®m.');
            return;
        }

        const imageId = imageAttachment.url;

        // Ki·ªÉm tra n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu b√¨nh ch·ªçn cho ·∫£nh n√†y
        if (!imageVotes.has(imageId)) {
            imageVotes.set(imageId, new Map());
        }

        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ b√¨nh ch·ªçn cho ·∫£nh n√†y hay ch∆∞a
        if (imageVotes.get(imageId).has(userId)) {
            interaction.reply({ content: "B·∫°n ƒë√£ b√¨nh ch·ªçn cho h√¨nh ·∫£nh n√†y.", ephemeral: true });
            return;
        }

        // Update vote count for this button
        const voteCounts = imageVotes.get(imageId);
        const currentCount = voteCounts.get(voteType) || 0;
        voteCounts.set(voteType, currentCount + 1);

        // Update button labels with current vote counts
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId("vote_very_bad")
                .setLabel(`‚≠ê(${voteCounts.get('vote_very_bad') || 0} phi·∫øu)`)
                .setEmoji(`<:likebutton:1250095157076824128>`)
                .setStyle("Primary"),
            new ButtonBuilder()
                .setCustomId("vote_bad")
                .setLabel(`‚≠ê‚≠ê(${voteCounts.get('vote_bad') || 0} phi·∫øu)`)
                .setEmoji(`<:likebutton:1250095157076824128>`)
                .setStyle("Primary"),
            new ButtonBuilder()
                .setCustomId("vote_normal")
                .setLabel(`‚≠ê‚≠ê‚≠ê(${voteCounts.get('vote_normal') || 0} phi·∫øu)`)
                .setEmoji(`<:likebutton:1250095157076824128>`)
                .setStyle("Primary"),
            new ButtonBuilder()
                .setCustomId("vote_good")
                .setLabel(`‚≠ê‚≠ê‚≠ê‚≠ê(${voteCounts.get('vote_good') || 0} phi·∫øu)`)
                .setEmoji(`<:likebutton:1250095157076824128>`)
                .setStyle("Primary"),
            new ButtonBuilder()
                .setCustomId("vote_very_good")
                .setLabel(`‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê(${voteCounts.get('vote_very_good') || 0} phi·∫øu)`)
                .setEmoji(`<:likebutton:1250095157076824128>`)
                .setStyle("Primary")
        );

        interaction.update({ components: [row] });

        // Update user's vote
        imageVotes.get(imageId).set(userId, voteType);

    } catch (error) {
        console.error('L·ªói x·ª≠ l√Ω t∆∞∆°ng t√°c b√¨nh ch·ªçn:', error);
    }
}

const RefreshPingButton = new ActionRowBuilder()
    .addComponents(
        new ButtonBuilder()
            .setCustomId('refreshping')
            .setLabel('L√†m m·ªõi')
            .setStyle(ButtonStyle.Primary)
    );


// Xu·∫•t c√°c n√∫t v√† h√†nh ƒë·ªông
module.exports = {
    button13,                               // l·ªánh ping
    button14,                               // l·ªánh ping
    row3,                                   // l·ªánh bot-commands
    button,                                 // d√πng cho server-join trong Events
    row,                                    // l·ªánh brb
    rowHi,                                  // l·ªánh hi
    createRow1,                             // d√πng cho guildMemberRemove trong Events
    view,                                   // l·ªánh message-secret
    handleVoteInteraction,                  // l·ªánh vote-image h√†m n√†y d√πng ƒë·ªÉ x·ª≠ l√Ω c√°c n√∫t t·∫°i th∆∞ m·ª•c InteractionTypes
    voteButtons,                            // l·ªánh vote-image
    Valheim,                                // l·ªánh recruitment
    Discord,                                // l·ªánh recruitment
    RefreshPingButton,                      // l·ªánh ping-api.js
};
